<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo|用Hexo写博客</title>
    <url>/2019/05/19/Hexo%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>简单总结使用的hexo命令</strong><br><span id="more"></span></p>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></figure>
<h2 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n title</span><br></pre></td></tr></table></figure>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server #Hexo会监视文件变动并自动更新，您无须重启服务器。</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br></pre></td></tr></table></figure>
<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><h2 id="备份博客源文件"><a href="#备份博客源文件" class="headerlink" title="备份博客源文件"></a>备份博客源文件</h2><p>在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout hexo #切换到hexo分支</span><br><span class="line">git add . #添加当前目录下的所有文件到暂存区</span><br><span class="line">git commit -m &quot;xxx&quot; #注释</span><br><span class="line">git push #提交</span><br></pre></td></tr></table></figure></p>
<h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><p><a href="https://www.jianshu.com/p/0520359a18d5">https://www.jianshu.com/p/0520359a18d5</a></p>
<h2 id="符号-amp-公式"><a href="#符号-amp-公式" class="headerlink" title="符号&amp;公式"></a>符号&amp;公式</h2><p><a href="https://blog.csdn.net/gsww404/article/details/78684278">https://blog.csdn.net/gsww404/article/details/78684278</a><br><a href="https://www.jianshu.com/p/16fbd768bfe7">https://www.jianshu.com/p/16fbd768bfe7</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|基于BOF算法的图像检索</title>
    <url>/2019/07/07/BOF/</url>
    <content><![CDATA[<p><strong>BoF(Bag of features)算法在图像分类中具有着重要的作用</strong><br><span id="more"></span></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Bag of Features方法仿照文本检索领域的Bag-of-Words方法，把每幅图像描述为一个局部区域/关键点(Patches/Key Points)特征的无序集合。<br>使用某种聚类算法(如K-means)将局部特征进行聚类，每个聚类中心被看作是词典中的一个<strong>视觉词汇</strong>(Visual Word)，相当于文本检索中的词，视觉词汇由聚类中心对应特征形成的<strong>码字</strong>(code word)来表示。<br>图像中的每个特征都将被映射到视觉词典的某个词上，这种映射可以通过计算特征间的距离去实现，然后统计每个视觉词汇的出现与否或次数，图像可描述为一个维数相同的直方图向量。</p>
<h1 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h1><p>基本流程可以分为四步：</p>
<h2 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h2><p>从原始图像中提取特征，常用的特征提取方法有SIFT，SURF。SIFT得到的特征描述是128维度的向量，相比SISF，SURF计算量更小些，得到的特征是64维的向量。也有使用HoG和LBP来进行特征提取的。注意特征提取的方法要满足旋转不变性以及尺寸不变性。<br><img src="/2019/07/07/BOF/3.png" alt="3"></p>
<h2 id="字典生成"><a href="#字典生成" class="headerlink" title="字典生成"></a>字典生成</h2><p>对所有的图片提取完特征后，将所有的特征进行聚类，比如使用K-Means聚类，得到K类，每个类别看作一个word，这样我们就得到了字典，如下图所示。<br><img src="/2019/07/07/BOF/4.png" alt="4"></p>
<h2 id="直方图表示"><a href="#直方图表示" class="headerlink" title="直方图表示"></a>直方图表示</h2><p>上一步训练得到的字典，是为了这一步对图像特征进行量化。对于一幅图像而言，我们可以提取出大量的特征，但这些特征(如SIFT提取的特征)仍然属于一种浅层的表示，缺乏代表性。因此，这一步的目标，是根据字典重新提取图像的高层特征。具体做法是，对于每一张图片得到的每一个特征(如SIFT提取的特征)，都可以在字典中找到一个最相似的word(实际上就是将特征输入到得到的聚类模型，得到类别)，统计相似的每种word的数量，于是就得到一个K维的直方图。如下图所示。<br><img src="/2019/07/07/BOF/5.png" alt="5"></p>
<h2 id="训练分类器"><a href="#训练分类器" class="headerlink" title="训练分类器"></a>训练分类器</h2><p>对于每张图片，我们得到了其对应的直方图向量，当然也知道其对应的属于哪种物品的标记。这样我们就可以构造训练集来训练某种分类器。当需要进行预测时，我们先测试集的图片中提取特征，然后利用字典量化得到直方图，输入训练好的分类器，得到预测的类别。</p>
<h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>本次实验采用了三个类别：[‘aeroplane’, ‘bicycle’, ‘car’]，在train文件夹下有三个子文件夹表示各类。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_paths</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="comment"># 获取训练数据类别</span></span><br><span class="line">    training_names = os.listdir(path)</span><br><span class="line">    <span class="comment"># 获取图片路径及标签</span></span><br><span class="line">    image_paths = [] <span class="comment"># 获取所有图片路径</span></span><br><span class="line">    image_classes = [] <span class="comment">#记录每张图片的标签，[0,...,0,1,...,1,2,...,2]</span></span><br><span class="line">    class_id = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> training_name <span class="keyword">in</span> training_names:</span><br><span class="line">        name = os.path.join(path, training_name)</span><br><span class="line">        class_path = <span class="built_in">list</span>(paths.list_images(name))</span><br><span class="line">        image_paths += class_path</span><br><span class="line">        image_classes += [class_id] * <span class="built_in">len</span>(class_path)</span><br><span class="line">        class_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Label \t\t  count&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---------------------&quot;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> training_name <span class="keyword">in</span> training_names:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;0:10&#125; &#123;1:6d&#125;&#x27;</span>.<span class="built_in">format</span>(training_name, image_classes.count(i)))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> training_names, image_paths, image_classes</span><br></pre></td></tr></table></figure><br><img src="/2019/07/07/BOF/6.png" alt="6"></p>
<h2 id="提取图像特征"><a href="#提取图像特征" class="headerlink" title="提取图像特征"></a>提取图像特征</h2><p>这里采用的是OpenCV自带的SIFT算法生成图像库中每幅图的特征点及描述符。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建特征提取和关键点检测器对象</span></span><br><span class="line">sift=cv2.xfeatures2d.SIFT_create()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征提取与描述子生成</span></span><br><span class="line">des_list = []</span><br><span class="line"><span class="keyword">for</span> image_path <span class="keyword">in</span> image_paths:</span><br><span class="line">    im = cv2.imread(image_path)</span><br><span class="line">    kpts, des = sift.detectAndCompute(im, <span class="literal">None</span>)</span><br><span class="line">    des_list.append((image_path, des))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;image file path : &quot;</span>, image_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述子向量聚合</span></span><br><span class="line">descriptors = des_list[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> image_path, descriptor <span class="keyword">in</span> des_list[<span class="number">1</span>:]:</span><br><span class="line">    descriptors = np.vstack((descriptors, descriptor))</span><br></pre></td></tr></table></figure><br><img src="/2019/07/07/BOF/sift.png" alt="s"></p>
<h2 id="对特征进行聚类"><a href="#对特征进行聚类" class="headerlink" title="对特征进行聚类"></a>对特征进行聚类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kmeans聚类</span></span><br><span class="line">k = <span class="number">100</span></span><br><span class="line">voc,_= kmeans(descriptors, k, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="根据字典将图片表示成向量"><a href="#根据字典将图片表示成向量" class="headerlink" title="根据字典将图片表示成向量"></a>根据字典将图片表示成向量</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成特征直方图</span></span><br><span class="line">im_features = np.zeros((<span class="built_in">len</span>(image_paths), k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(image_paths)):</span><br><span class="line">    words, distance = vq(des_list[i][<span class="number">1</span>], voc)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        im_features[i][w] += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/07/BOF/histogram.png" alt="h"></p>
<h2 id="特征集进行加权及量化"><a href="#特征集进行加权及量化" class="headerlink" title="特征集进行加权及量化"></a>特征集进行加权及量化</h2><p>在一篇文档里，“的”“你”“我”等字眼的出现频率高，那么这些word在直方图上的bin就会比较高，并且在每篇文档里都会出现，但是这些并不能作为文档的标识，因此要弱化这些共性特征的权重。</p>
<blockquote>
<p>这里采用了TF-IDF加权<br>TF:如果某个关键词在一篇文章中出现的频率高，说明该词语能够表征文章的内容，该关键词在其它文章中很少出现，则认为此词语具有很好的类别区分度，对分类有很大的贡献。<br>IDF:如果文件数据库中包含词语A的文件越少，则IDF越大，说明词语A具有很好的类别区分能力。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># TF-IDF</span></span><br><span class="line">nbr = np.<span class="built_in">sum</span>((im_features &gt; <span class="number">0</span>) * <span class="number">1</span>, axis=<span class="number">0</span>)</span><br><span class="line">idf = np.array(np.log((<span class="number">1.0</span> * <span class="built_in">len</span>(image_paths) + <span class="number">1</span>) / (<span class="number">1.0</span> * nbr + <span class="number">1</span>)), <span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">im_features = im_features * idf</span><br><span class="line">tf = np.zeros((<span class="built_in">len</span>(image_paths), k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(image_paths)):</span><br><span class="line">     tf[i] = im_features[i] / (np.<span class="built_in">sum</span>(im_features, axis=<span class="number">1</span>)[i])</span><br><span class="line">     im_features[i] = im_features[i] * tf[i]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尺度化</span></span><br><span class="line">stdSlr = StandardScaler().fit(im_features)</span><br><span class="line">im_features = stdSlr.transform(im_features)</span><br></pre></td></tr></table></figure></p>
<h2 id="训练分类器-1"><a href="#训练分类器-1" class="headerlink" title="训练分类器"></a>训练分类器</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">clf = LinearSVC()</span><br><span class="line">clf.fit(im_features, np.array(image_classes))</span><br></pre></td></tr></table></figure>
<p>最后可以将训练的结果打包并保存<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;training and save model...&quot;</span>)</span><br><span class="line">sklearn.externals.joblib.dump((clf, training_names,std_slr, k, voc, idf), <span class="string">&quot;bof.pkl&quot;</span>, compress=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;========================================&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="预测并测试"><a href="#预测并测试" class="headerlink" title="预测并测试"></a>预测并测试</h2><p>预测步骤和训练相似，先提取图像特征，将提取的图像特征加权并尺度化，代入训练好的分类器<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_image</span>(<span class="params">image_path</span>):</span></span><br><span class="line"></span><br><span class="line">    clf, classes_names, std_slr, k, voc, idf = sklearn.externals.joblib.load(<span class="string">&quot;bof.pkl&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sift = cv2.xfeatures2d.SIFT_create()</span><br><span class="line">    im = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    kpts, des = sift.detectAndCompute(im, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    test_features = np.zeros((<span class="number">1</span>, k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line">    words, distance = vq(des, voc)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        test_features[<span class="number">0</span>][w] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    test_features = test_features * idf</span><br><span class="line">    tf = test_features / np.<span class="built_in">sum</span>(test_features, axis=<span class="number">1</span>)</span><br><span class="line">    test_features = test_features * tf</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Scale the features</span></span><br><span class="line">    test_features = std_slr.transform(test_features)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Perform the predictions</span></span><br><span class="line">    predictions = [classes_names[i] <span class="keyword">for</span> i <span class="keyword">in</span> clf.predict(test_features)]</span><br><span class="line">    <span class="keyword">return</span> predictions</span><br></pre></td></tr></table></figure><br>读取测试数据，并输出结果<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">test_path</span>):</span></span><br><span class="line">    _, image_paths, _ = read_paths(test_path)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> image_paths:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        predictions = predict_image(image_path)</span><br><span class="line">        img = cv2.imread(image_path)</span><br><span class="line">        img = cv2.resize(img, (<span class="built_in">int</span>(img.shape[<span class="number">1</span>]*<span class="number">2</span>), <span class="built_in">int</span>(img.shape[<span class="number">0</span>] * <span class="number">2</span>))) <span class="comment">#图片扩大两倍</span></span><br><span class="line">        output=cv2.putText(img, predictions[<span class="number">0</span>], (<span class="number">10</span>, <span class="number">150</span>), cv2.FONT_HERSHEY_COMPLEX, <span class="number">2.0</span>, (<span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>), <span class="number">5</span>)</span><br><span class="line">        cv2.imshow(image_path, output)</span><br><span class="line">        cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;image%d: %s, classes : %s&quot;</span> % (i, image_path, predictions))</span><br></pre></td></tr></table></figure><br><img src="/2019/07/07/BOF/result.png" alt="r"><br><img src="/2019/07/07/BOF/7.png" alt="7"></p>
</blockquote>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.externals</span><br><span class="line"><span class="keyword">from</span> imutils <span class="keyword">import</span> paths</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line"><span class="keyword">from</span> scipy.cluster.vq <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_paths</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="comment"># 获取训练数据类别</span></span><br><span class="line">    training_names = os.listdir(path)</span><br><span class="line">    <span class="comment"># 获取图片路径及标签</span></span><br><span class="line">    image_paths = [] <span class="comment"># 获取所有图片路径</span></span><br><span class="line">    image_classes = [] <span class="comment">#记录每张图片的标签，[0,...,0,1,...,1,2,...,2]</span></span><br><span class="line">    class_id = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> training_name <span class="keyword">in</span> training_names:</span><br><span class="line">        name = os.path.join(path, training_name)</span><br><span class="line">        class_path = <span class="built_in">list</span>(paths.list_images(name))</span><br><span class="line">        image_paths += class_path</span><br><span class="line">        image_classes += [class_id] * <span class="built_in">len</span>(class_path)</span><br><span class="line">        class_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Label \t\t  count&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---------------------&quot;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> training_name <span class="keyword">in</span> training_names:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;0:10&#125; &#123;1:6d&#125;&#x27;</span>.<span class="built_in">format</span>(training_name, image_classes.count(i)))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> training_names, image_paths, image_classes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">train_path</span>):</span></span><br><span class="line">    training_names, image_paths, image_classes = read_paths(train_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建SIFT特征提取器</span></span><br><span class="line">    sift = cv2.xfeatures2d.SIFT_create()</span><br><span class="line">    <span class="comment"># 特征提取与描述子生成</span></span><br><span class="line">    des_list = []</span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> image_paths:</span><br><span class="line">        im = cv2.imread(image_path)</span><br><span class="line">        kpts, des = sift.detectAndCompute(im, <span class="literal">None</span>)</span><br><span class="line">        des_list.append(des)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 描述子向量</span></span><br><span class="line">    descriptors = des_list[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> descriptor <span class="keyword">in</span> des_list[<span class="number">1</span>:]:</span><br><span class="line">        descriptors = np.vstack((descriptors, descriptor))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 100 聚类 K-Means</span></span><br><span class="line">    k = <span class="number">100</span></span><br><span class="line">    voc, _ = kmeans(descriptors, k, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成特征直方图</span></span><br><span class="line">    im_features = np.zeros((<span class="built_in">len</span>(image_paths), k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(image_paths)):</span><br><span class="line">        words, distance = vq(des_list[i], voc)</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">            im_features[i][w] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># TF-IDF</span></span><br><span class="line">    nbr = np.<span class="built_in">sum</span>((im_features &gt; <span class="number">0</span>) * <span class="number">1</span>, axis=<span class="number">0</span>)</span><br><span class="line">    idf = np.array(np.log((<span class="number">1.0</span> * <span class="built_in">len</span>(image_paths) + <span class="number">1</span>) / (<span class="number">1.0</span> * nbr + <span class="number">1</span>)), <span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">    im_features = im_features * idf</span><br><span class="line">    tf = np.zeros((<span class="built_in">len</span>(image_paths), k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(image_paths)):</span><br><span class="line">        tf[i] = im_features[i] / (np.<span class="built_in">sum</span>(im_features, axis=<span class="number">1</span>)[i])</span><br><span class="line">        im_features[i] = im_features[i] * tf[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 尺度化</span></span><br><span class="line">    std_slr = StandardScaler().fit(im_features)</span><br><span class="line">    im_features = std_slr.transform(im_features)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SVM</span></span><br><span class="line">    clf = LinearSVC()</span><br><span class="line">    clf.fit(im_features, np.array(image_classes))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Save the SVM</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;training and save model...&quot;</span>)</span><br><span class="line">    sklearn.externals.joblib.dump((clf, training_names, std_slr, k, voc, idf), <span class="string">&quot;bof.pkl&quot;</span>, compress=<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;========================================&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_image</span>(<span class="params">image_path</span>):</span></span><br><span class="line"></span><br><span class="line">    clf, classes_names, std_slr, k, voc, idf = sklearn.externals.joblib.load(<span class="string">&quot;bof.pkl&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sift = cv2.xfeatures2d.SIFT_create()</span><br><span class="line">    im = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    kpts, des = sift.detectAndCompute(im, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    test_features = np.zeros((<span class="number">1</span>, k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line">    words, distance = vq(des, voc)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        test_features[<span class="number">0</span>][w] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    test_features = test_features * idf</span><br><span class="line">    tf = test_features / np.<span class="built_in">sum</span>(test_features, axis=<span class="number">1</span>)</span><br><span class="line">    test_features = test_features * tf</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Scale the features</span></span><br><span class="line">    test_features = std_slr.transform(test_features)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Perform the predictions</span></span><br><span class="line">    predictions = [classes_names[i] <span class="keyword">for</span> i <span class="keyword">in</span> clf.predict(test_features)]</span><br><span class="line">    <span class="keyword">return</span> predictions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">test_path</span>):</span></span><br><span class="line">    _, image_paths, _ = read_paths(test_path)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> image_paths:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        predictions = predict_image(image_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;image%d: %s, classes : %s&quot;</span> % (i, image_path, predictions))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train_path = <span class="string">&quot;C:/Code/Picture/dataset/train/&quot;</span></span><br><span class="line">    train(train_path)</span><br><span class="line"></span><br><span class="line">    test_path = <span class="string">&quot;C:/Code/Picture/dataset/test/&quot;</span></span><br><span class="line">    test(test_path)</span><br></pre></td></tr></table></figure>
<h1 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h1><ol>
<li>字典大小的选择也是问题，字典过大，单词缺乏一般性，对噪声敏感，计算量大，关键是图象投影后的维数高；字典太小，单词区分性能差，对相似的目标特征无法表示。</li>
<li>这种一个特征点对应于一个词的方法显然忽略图像空间上下文，这很容易造成词语义的模糊。</li>
<li>图像中一般都存在同主题无关的内容，会影响分类的结果，改进方法是检测兴趣区域并给不同的权重。</li>
</ol>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>BOF</tag>
        <tag>OpenCV</tag>
        <tag>SIFT</tag>
        <tag>Kmeans</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|Socket编程实例</title>
    <url>/2019/06/21/Java-Socket/</url>
    <content><![CDATA[<p><strong>多线程版UDP及线程池版的TCP</strong><br><span id="more"></span></p>
<h1 id="TCP-IP网络体系"><a href="#TCP-IP网络体系" class="headerlink" title="TCP/IP网络体系"></a>TCP/IP网络体系</h1><h2 id="TCP-IP先于OSI模型，不完全符合OSI标准"><a href="#TCP-IP先于OSI模型，不完全符合OSI标准" class="headerlink" title="TCP/IP先于OSI模型，不完全符合OSI标准"></a>TCP/IP先于OSI模型，不完全符合OSI标准</h2><p><img src="/2019/06/21/Java-Socket/1.png" alt="1"></p>
<h2 id="TCP-IP四层模型"><a href="#TCP-IP四层模型" class="headerlink" title="TCP/IP四层模型"></a>TCP/IP四层模型</h2><blockquote>
<p>也可分为五层，将网络接口层分为两层</p>
</blockquote>
<p><img src="/2019/06/21/Java-Socket/2.png" alt="2"></p>
<h2 id="各层网络协议的存在位置"><a href="#各层网络协议的存在位置" class="headerlink" title="各层网络协议的存在位置"></a>各层网络协议的存在位置</h2><ul>
<li>路由器中只包含物理层、链路层、网络层协议实现模块</li>
<li>主机中包含五层协议实现模块</li>
<li>操作系统负责实现传输层及以下网络协议的实现<br><img src="/2019/06/21/Java-Socket/3.png" alt="3"></li>
</ul>
<h1 id="Socket套接字"><a href="#Socket套接字" class="headerlink" title="Socket套接字"></a>Socket套接字</h1><h2 id="什么是socket？"><a href="#什么是socket？" class="headerlink" title="什么是socket？"></a>什么是socket？</h2><p>传输层和网络层提供给应用层的标准化编程接口（或称为编程接口）<br><img src="/2019/06/21/Java-Socket/4.png" alt="4"></p>
<h2 id="Socket类型"><a href="#Socket类型" class="headerlink" title="Socket类型"></a>Socket类型</h2><ul>
<li>流式套接字</li>
<li>数据报套接字</li>
<li>原始套接字<br><img src="/2019/06/21/Java-Socket/5.png" width="70%" height="70%" div align="center"></li>
</ul>
<h2 id="TCP套接字编程典型模型"><a href="#TCP套接字编程典型模型" class="headerlink" title="TCP套接字编程典型模型"></a>TCP套接字编程典型模型</h2><p><img src="/2019/06/21/Java-Socket/6.png" alt="6"></p>
<h2 id="UDP套接字编程典型模型"><a href="#UDP套接字编程典型模型" class="headerlink" title="UDP套接字编程典型模型"></a>UDP套接字编程典型模型</h2><p><img src="/2019/06/21/Java-Socket/7.png" alt="7"></p>
<h1 id="并发服务技术"><a href="#并发服务技术" class="headerlink" title="并发服务技术"></a>并发服务技术</h1><h2 id="基于多线程的并发服务技术"><a href="#基于多线程的并发服务技术" class="headerlink" title="基于多线程的并发服务技术"></a>基于多线程的并发服务技术</h2><p><img src="/2019/06/21/Java-Socket/8.png" alt="8"></p>
<h2 id="基于线程池的并发服务技术"><a href="#基于线程池的并发服务技术" class="headerlink" title="基于线程池的并发服务技术"></a>基于线程池的并发服务技术</h2><p><img src="/2019/06/21/Java-Socket/9.png" alt="9"></p>
<h1 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h1><h2 id="多线程版UDP"><a href="#多线程版UDP" class="headerlink" title="多线程版UDP"></a>多线程版UDP</h2><p><strong>UDPClient.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    	</span><br><span class="line">        InetAddress address = InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8800</span>;</span><br><span class="line">        String userInput = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] data= <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">byte</span>[] reply = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        </span><br><span class="line">        BufferedReader stdIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        DatagramPacket p1,p2 = <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> ((userInput=stdIn.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        	data = userInput.getBytes();</span><br><span class="line">            p1 = <span class="keyword">new</span> DatagramPacket(data, data.length, address, port);</span><br><span class="line">            socket.send(p1);</span><br><span class="line">            </span><br><span class="line">            p2 = <span class="keyword">new</span> DatagramPacket(reply, reply.length);</span><br><span class="line">            socket.receive(p2);</span><br><span class="line">            </span><br><span class="line">            String info = <span class="keyword">new</span> String(reply, <span class="number">0</span>, p2.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;Server：&quot;</span> + info);</span><br><span class="line">		&#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>UDPThread.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    DatagramPacket packet = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UDPThread</span><span class="params">(DatagramSocket socket, DatagramPacket packet)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">        <span class="keyword">this</span>.packet = packet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String info = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] reply = <span class="keyword">null</span>;</span><br><span class="line">        DatagramPacket p = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	InetAddress address = packet.getAddress();</span><br><span class="line">            System.out.println(<span class="string">&quot;IP：&quot;</span> + address.getHostAddress());</span><br><span class="line">            </span><br><span class="line">            info = <span class="keyword">new</span> String(packet.getData(), <span class="number">0</span>, packet.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;Message from Client：&quot;</span> + info);</span><br><span class="line"></span><br><span class="line">            reply = <span class="string">&quot;Successful reception&quot;</span>.getBytes();</span><br><span class="line">            p = <span class="keyword">new</span> DatagramPacket(reply, reply.length, packet.getAddress(), packet.getPort());</span><br><span class="line">            socket.send(p);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>UDPServer.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8800</span>);</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, data.length);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;Server...&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            UDPThread udp = <span class="keyword">new</span> UDPThread(socket, packet);</span><br><span class="line">            udp.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="线程池版的TCP"><a href="#线程池版的TCP" class="headerlink" title="线程池版的TCP"></a>线程池版的TCP</h2><p><strong>TCPClient.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		 </span><br><span class="line">		String userInput = <span class="keyword">null</span>;</span><br><span class="line">		String echoMessage = <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		BufferedReader stdIn = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">		</span><br><span class="line">		Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8189</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Connected to Server&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		InputStream inStream = socket.getInputStream();</span><br><span class="line">		OutputStream outStream = socket.getOutputStream();</span><br><span class="line">		BufferedReader in = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(inStream));</span><br><span class="line">		PrintWriter out = <span class="keyword">new</span> PrintWriter(outStream);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>((userInput=stdIn.readLine())!=<span class="keyword">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            out.println(userInput);</span><br><span class="line">			out.flush();</span><br><span class="line">			echoMessage = in.readLine();</span><br><span class="line">			System.out.println(<span class="string">&quot;Echo from server: &quot;</span> + echoMessage);</span><br><span class="line">		&#125;</span><br><span class="line">		socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>TCPThread.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TCPThread</span><span class="params">(Socket socket)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        InputStream is=<span class="keyword">null</span>;</span><br><span class="line">        InputStreamReader isr=<span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br=<span class="keyword">null</span>;</span><br><span class="line">        OutputStream os=<span class="keyword">null</span>;</span><br><span class="line">        PrintWriter pw=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            isr = <span class="keyword">new</span> InputStreamReader(is);</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">			os = socket.getOutputStream();</span><br><span class="line">            pw = <span class="keyword">new</span> PrintWriter(os);</span><br><span class="line">            String info=<span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((info=br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            	InetAddress address = socket.getInetAddress();</span><br><span class="line">                System.out.println(<span class="string">&quot;IP：&quot;</span> + address.getHostAddress());</span><br><span class="line">                System.out.println(<span class="string">&quot;Message from client:&quot;</span>+info);</span><br><span class="line">				pw.println(info);</span><br><span class="line">				pw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(pw!=<span class="keyword">null</span>)</span><br><span class="line">                    pw.close();</span><br><span class="line">                <span class="keyword">if</span>(os!=<span class="keyword">null</span>)</span><br><span class="line">                    os.close();</span><br><span class="line">                <span class="keyword">if</span>(br!=<span class="keyword">null</span>)</span><br><span class="line">                    br.close();</span><br><span class="line">                <span class="keyword">if</span>(isr!=<span class="keyword">null</span>)</span><br><span class="line">                    isr.close();</span><br><span class="line">                <span class="keyword">if</span>(is!=<span class="keyword">null</span>)</span><br><span class="line">                    is.close();</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="keyword">null</span>)</span><br><span class="line">                    socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><strong>TCPServer.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPServer</span> </span>&#123;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		 <span class="keyword">int</span> n=<span class="number">2</span>;</span><br><span class="line">		 <span class="keyword">int</span> m=<span class="number">4</span>;</span><br><span class="line">		 </span><br><span class="line">		 ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(n, m, <span class="number">200</span>, TimeUnit.MILLISECONDS,  </span><br><span class="line">	                <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(n));</span><br><span class="line">		 </span><br><span class="line">		 ServerSocket listenSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8189</span>); </span><br><span class="line">		 System.out.println(<span class="string">&quot;Server listening at 8189&quot;</span>);</span><br><span class="line">		 </span><br><span class="line">		 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(n+m);i++) &#123;</span><br><span class="line">			 Socket clientSocket = listenSocket.accept();</span><br><span class="line">			 System.out.println(<span class="string">&quot;Accepted connection from client&quot;</span>);</span><br><span class="line">			 TCPThread tcp=<span class="keyword">new</span> TCPThread(clientSocket);</span><br><span class="line">			 executor.execute(tcp);</span><br><span class="line">		 &#125;</span><br><span class="line">		 executor.shutdown();</span><br><span class="line">		 listenSocket.close();</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Socket</tag>
        <tag>分布式</tag>
        <tag>TCP</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|Pycharm使用技巧</title>
    <url>/2020/08/15/Pycharm/</url>
    <content><![CDATA[<p><strong>Windows 10 专业版<br>Pycharm 2020.2</strong><br><span id="more"></span></p>
<h1 id="Pycharm使用技巧"><a href="#Pycharm使用技巧" class="headerlink" title="Pycharm使用技巧"></a>Pycharm使用技巧</h1><h2 id="自动调整代码格式"><a href="#自动调整代码格式" class="headerlink" title="自动调整代码格式"></a>自动调整代码格式</h2><p><strong>问题</strong></p>
<p>在使用pycharm的代码编辑器时，常常懒得写空格，但这是不符合代码规范的，而且也会影响可读性。</p>
<p><strong>解决办法</strong></p>
<p>pycharm有自动调整代码格式的快捷键，默认为<code>Alt+Ctrl+L</code>，按下快捷键后，代码自动填充了空格。</p>
<h2 id="运行当前编辑文件"><a href="#运行当前编辑文件" class="headerlink" title="运行当前编辑文件"></a>运行当前编辑文件</h2><p><strong>问题</strong></p>
<p>运行代码时，总是要先选择文件，点击运行或者右击选择运行，需要两步</p>
<p><strong>解决方法</strong></p>
<p>设置快捷键，运行当前编辑文件快捷键为<code>Ctrl+Sift+F10</code><br><img src="/2020/08/15/Pycharm/1.png" alt="1"></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|MapReduce-TopN</title>
    <url>/2019/06/28/TopN/</url>
    <content><![CDATA[<p><strong>问题描述：</strong><br>有一个很大的文件，这文件中的内容全部都是数字，要求尝试从这个文件中找出最大的N个数字。<br><span id="more"></span><br>设置数据集data.txt<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">143</span><br><span class="line">23</span><br><span class="line">34</span><br><span class="line">43</span><br><span class="line">5243</span><br><span class="line">632</span><br><span class="line">7342</span><br><span class="line">845</span><br><span class="line">945</span><br><span class="line">10</span><br><span class="line">234</span><br><span class="line">3424</span><br><span class="line">43</span><br><span class="line">6324</span><br><span class="line">647</span><br><span class="line">427</span><br><span class="line">6</span><br><span class="line">687</span><br><span class="line">789</span><br><span class="line">23</span><br><span class="line">324</span><br></pre></td></tr></table></figure></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.DoubleWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopN</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TMap</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt;</span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] topN;</span><br><span class="line">		<span class="keyword">int</span> length;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			length = context.getConfiguration().getInt(<span class="string">&quot;N&quot;</span>,<span class="number">5</span>);</span><br><span class="line">			topN = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			String data = value.toString();</span><br><span class="line">			<span class="keyword">int</span> cost = Integer.valueOf(data);</span><br><span class="line">			topN[<span class="number">0</span>] = cost;</span><br><span class="line">			Arrays.sort(topN);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length+<span class="number">1</span>;i++)&#123;</span><br><span class="line">                context.write(<span class="keyword">new</span> Text(String.valueOf(topN[i])),<span class="keyword">new</span> Text(String.valueOf(topN[i])));</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] topN;</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            length = context.getConfiguration().getInt(<span class="string">&quot;N&quot;</span>,<span class="number">5</span>);</span><br><span class="line">            topN = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			topN[<span class="number">0</span>] = Integer.valueOf(key.toString());</span><br><span class="line">			Arrays.sort(topN);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length+<span class="number">1</span>;i++)&#123;</span><br><span class="line">                context.write(<span class="keyword">new</span> Text(String.valueOf(i)),<span class="keyword">new</span> Text(String.valueOf(topN[length-i+<span class="number">1</span>])));</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		conf.setInt(<span class="string">&quot;N&quot;</span>,<span class="number">3</span>);</span><br><span class="line">		String[] otherArgs = <span class="keyword">new</span> GenericOptionsParser(conf, args).getRemainingArgs();</span><br><span class="line">		<span class="keyword">if</span> (otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		  System.err.println(<span class="string">&quot;Usage: TopN&lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">		  System.exit(<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Job job = Job.getInstance(conf, <span class="string">&quot;TopN&quot;</span>);</span><br><span class="line">		job.setJarByClass(TopN.class);</span><br><span class="line">		job.setMapperClass(TMap.class);</span><br><span class="line">		job.setReducerClass(TReducer.class);</span><br><span class="line">		job.setOutputKeyClass(Text.class);</span><br><span class="line">		job.setOutputValueClass(Text.class);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">			FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[i]));</span><br><span class="line">		&#125;</span><br><span class="line">		FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> Path(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">		System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>setcp.bat<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set classpath=%classpath%;C:\Soft\Hadoop\etc\hadoop;C:\Soft\Hadoop\share\hadoop\common;C:\Soft\Hadoop\share\hadoop\common\lib\*;C:\Soft\Hadoop\share\hadoop\common\*;C:\Soft\Hadoop\share\hadoop\hdfs;C:\Soft\Hadoop\share\hadoop\hdfs\lib\*;C:\Soft\Hadoop\share\hadoop\hdfs\*;C:\Soft\Hadoop\share\hadoop\yarn;C:\Soft\Hadoop\share\hadoop\yarn\lib\*;C:\Soft\Hadoop\share\hadoop\yarn\*;C:\Soft\Hadoop\share\hadoop\mapreduce\*</span><br></pre></td></tr></table></figure></p>
<p>基本步骤<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setcp</span><br><span class="line">javac TopN.java</span><br><span class="line">jar cvf TopN.jar *.class</span><br><span class="line">hadoop jar TopN.jar TopN /test /output</span><br><span class="line">hadoop fs -ls /output</span><br><span class="line">hadoop fs -cat /output/part-r-<span class="number">00000</span></span><br><span class="line">hadoop fs -rm -r /output</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|SIFT算法</title>
    <url>/2019/06/08/SIFT/</url>
    <content><![CDATA[<p><strong>尺度不变特征变换（Scale-invariant feature transform，SIFT），是用于图像处理领域的一种描述。</strong><br><span id="more"></span></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://baike.baidu.com/item/SIFT/1396275?fr=aladdin">SIFT算法</a>是一种提取局部特征的算法，基于物体上的一些局部外观的兴趣点而与影像的大小和旋转无关。对于光线、噪声、微视角改变的容忍度也相当高。基于这些特性，它们是高度显著而且相对容易撷取，在母数庞大的特征数据库中，很容易辨识物体而且鲜有误认。使用SIFT特征描述对于部分物体遮蔽的侦测率也相当高，甚至只需要3个以上的SIFT物体特征就足以计算出位置与方位。在现今的电脑硬件速度下和小型的特征数据库条件下，辨识速度可接近即时运算。SIFT特征的信息量大，适合在海量数据库中快速准确匹配。<br>匹配的过程就是对比这些特征点的过程，这个流程可以用下图表述：<br><img src="/2019/06/08/SIFT/1.png" alt="1"></p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li>SIFT特征是图像的局部特征，其对旋转、尺度缩放、亮度变化保持不变性，对视角变化、仿射变换、噪声也保持一定程度的稳定性。 </li>
<li>独特性好，信息量丰富，适用于在海量特征数据库中进行快速、准确匹配。 </li>
<li>多量性，即使少数的几个物体也可以产生大量SIFT特征向量。 </li>
<li>高速性，经优化的SIFT匹配算法甚至可以达到实时的要求。 </li>
<li>可扩展性，可以很方便的与其他形式的特征向量进行联合。</li>
</ul>
<h1 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h1><ol>
<li>检测尺度空间极值点</li>
<li>精确定位极值点</li>
<li>为每个关键点指定方向参数</li>
<li>关键点描述子的生成</li>
</ol>
<h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><p>OpenCV中带有SIFT算法。可以直接调用<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">img= cv2.imread(&#x27;C:/Code/Picture/apple.jpg&#x27;)</span><br><span class="line">gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">sift=cv2.xfeatures2d.SIFT_create()</span><br><span class="line">keypoints,descriptor=sift.detectAndCompute(gray,None)</span><br><span class="line"></span><br><span class="line">img=cv2.drawKeypoints(image=img,outImage=img,keypoints=keypoints,flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS,color=(51,163,236))</span><br><span class="line">cv2.imshow(&#x27;sift_keypoints&#x27;,img)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><br><img src="/2019/06/08/SIFT/new.png" alt="apple"></p>
<blockquote>
<p>OpenCV使用SIFT时报错,建议卸载后安装opencv-contrib-python,同时3.4.3.18以上的版本会出现专利问题而无法使用。安装前记得卸载原来的。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install opencv-contrib-python==<span class="number">3.4</span><span class="number">.2</span><span class="number">.17</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<blockquote>
<p>参考文献<br><a href="https://blog.csdn.net/dcrmg/article/details/52577555">Sift算子特征点提取、描述及匹配全流程解析</a><br><a href="https://blog.csdn.net/dcrmg/article/details/52561656">Sift中尺度空间、高斯金字塔、差分金字塔（DOG金字塔）、图像金字塔</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>OpenCV</tag>
        <tag>SIFT</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|有趣的小工具</title>
    <url>/2020/07/08/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p><strong>记录有趣的小技巧</strong><br><span id="more"></span></p>
<h1 id="一键抠图"><a href="#一键抠图" class="headerlink" title="一键抠图"></a>一键抠图</h1><ol>
<li>进入<a href="https://www.remove.bg/">官网</a>,可以直接上传图片</li>
</ol>
<p><img src="/2020/07/08/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/1.png" alt="1"></p>
<ol>
<li>也可以注册账号申请API，通过代码实现<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装库</span></span><br><span class="line">pip install removebg</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从官网获取自己的API</span></span><br><span class="line"><span class="keyword">from</span> removebg <span class="keyword">import</span> RemoveBg</span><br><span class="line">rmbg = RemoveBg(<span class="string">&quot;自己的API&quot;</span>, <span class="string">&quot;error.log&quot;</span>)</span><br><span class="line">rmbg.remove_background_from_img_file(<span class="string">&quot;C:/Code/Picture/new.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/2020/07/08/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/1.1.jpg" alt="1.1"></p>
<p><img src="/2020/07/08/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/1.2.png" alt="1.2"></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Kindle|电子书排版总结</title>
    <url>/2021/03/18/calibre/</url>
    <content><![CDATA[<p>总结一些用于AZW3格式的排版<br><span id="more"></span></p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="Sigil"><a href="#Sigil" class="headerlink" title="Sigil"></a>Sigil</h2><p><a href="https://github.com/Sigil-Ebook/Sigil/releases">下载地址</a></p>
<p>Sigil，跨平台的开源 ePub 电子书编辑器，支持Windows、Linux和Mac系统。</p>
<blockquote>
<p>个人主要用于切分章节.主要是因为处理文本量较大的文件时会闪退</p>
<h2 id="Easypub"><a href="#Easypub" class="headerlink" title="Easypub"></a>Easypub</h2><p><a href="https://bookfere.com/post/151.html">下载地址</a></p>
</blockquote>
<p>可以TXT文档转成带目录的MOBI/EPUB格式,但是排版一般.</p>
<blockquote>
<p>一般用这个将txt简单转换下,再细调</p>
<h2 id="Calibre"><a href="#Calibre" class="headerlink" title="Calibre"></a>Calibre</h2><p><a href="https://calibre-ebook.com/download_windows64">下载地址</a></p>
</blockquote>
<p>Calibre 是一个免费的开源的“一站式”的电子书解决方案，它可以全面满足你的电子书需求。它是一个完整的电子图书馆，包括图书管理，格式转换，新闻，将材料转换为电子书，以及电子书阅读器同步功能、整合进电子图书阅读器。当然它也内置了一个 ePub 格式电子书编辑工具以满足修改电子书的需要。</p>
<blockquote>
<p>主要工具,功能强悍</p>
</blockquote>
<h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p>个人主要使用黑体,楷体,思源宋体和方正兰亭</p>
<h2 id="楷体"><a href="#楷体" class="headerlink" title="楷体"></a>楷体</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;DK-KAITI&quot;</span>, <span class="string">&quot;楷体&quot;</span>, <span class="string">&quot;方正楷体_GBK&quot;</span>, <span class="string">&quot;KaiTi&quot;</span>, <span class="string">&quot;STKaiti&quot;</span>, <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br></pre></td></tr></table></figure>
<h2 id="思源宋体"><a href="#思源宋体" class="headerlink" title="思源宋体"></a>思源宋体</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;syst&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;../fonts/systB.ttf&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;syst&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="方正兰亭"><a href="#方正兰亭" class="headerlink" title="方正兰亭"></a>方正兰亭</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;fzlt&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;../fonts/fzltZH.ttf&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;fzlt&quot;</span>;</span><br></pre></td></tr></table></figure>
<h1 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h1><p>Kindle 电子书封面图片标准规格如下：</p>
<ul>
<li>JPEG 或 TIFF 格式</li>
<li>优先使用 1.6:1 的长宽比</li>
<li>最小尺寸：宽 625 像素，长 1000 像素</li>
<li>最佳尺寸：宽 1563 像素，长 2500 像素</li>
</ul>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="卷标题"><a href="#卷标题" class="headerlink" title="卷标题"></a>卷标题</h2><h3 id="横板"><a href="#横板" class="headerlink" title="横板"></a>横板</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">class</span>=<span class="string">&quot;volume-title&quot;</span>&gt;</span></span><br><span class="line">第一卷</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> <span class="attr">class</span>=<span class="string">&quot;calibre3&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;volume-subtitle&quot;</span>&gt;</span> </span><br><span class="line">游戏创新的一般原理</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/18/calibre/1.png" alt="1"></p>
<p>其中<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.volume-title</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;DK-KAITI&quot;</span>, <span class="string">&quot;楷体&quot;</span>, <span class="string">&quot;方正楷体_GBK&quot;</span>, <span class="string">&quot;KaiTi&quot;</span>, <span class="string">&quot;STKaiti&quot;</span>, <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.3em</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30%</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.volume-subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;syst&quot;</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="竖版"><a href="#竖版" class="headerlink" title="竖版"></a>竖版</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;head1&quot;</span> <span class="attr">title</span>=<span class="string">&quot;第一卷 天元篇&quot;</span>&gt;</span>第一卷<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;head2&quot;</span>&gt;</span>天元篇<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/18/calibre/2.png" alt="2"><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.head</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1.4em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">25%</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.head1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;DK-FANGSONG&quot;</span>, <span class="string">&quot;方正仿宋_GBK&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.head2</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;DK-FANGSONG&quot;</span>, <span class="string">&quot;方正仿宋_GBK&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="章标题"><a href="#章标题" class="headerlink" title="章标题"></a>章标题</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;chapter-title&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;chapter-sequence-number&quot;</span>&gt;</span>第991章<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span> 黑火石和哨兵</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;chapter-subtitle&quot;</span>&gt;</span>（上）<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/18/calibre/3.png" alt="3"><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.chapter-sequence-number</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;fzlt&quot;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chapter-title</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;syst&quot;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chapter-subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.7em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.calibre4</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: justify;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插图"><a href="#插图" class="headerlink" title="插图"></a>插图</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tupian&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-alone&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../images/00079.jpeg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tupian</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.image-alone</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;math-super&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;part0107.html#bz1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;z1&quot;</span>&gt;</span>[1]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;zhusi&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;part0012.html#z1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bz1&quot;</span>&gt;</span>[1]<span class="tag">&lt;/<span class="name">a</span>&gt;</span>注释内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.math-super</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;DK-KAITI&quot;</span>, <span class="string">&quot;楷体&quot;</span>, <span class="string">&quot;方正楷体_GBK&quot;</span>, <span class="string">&quot;KaiTi&quot;</span>, <span class="string">&quot;STKaiti&quot;</span>, <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.75em</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: super;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zhusi</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;DK-KAITI&quot;</span>, <span class="string">&quot;楷体&quot;</span>, <span class="string">&quot;方正楷体_GBK&quot;</span>, <span class="string">&quot;KaiTi&quot;</span>, <span class="string">&quot;STKaiti&quot;</span>, <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="方框"><a href="#方框" class="headerlink" title="方框"></a>方框</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;reference&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.reference</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.25em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">#444</span> dotted <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;indent&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;titlemode&quot;</span>&gt;</span>原文<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/18/calibre/4.png" alt="4"><br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.indent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">140%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: justify;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.titlemode</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4A494A</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;楷体&quot;</span>, <span class="string">&quot;仿宋_gb2312&quot;</span>, <span class="string">&quot;zw&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker|Docker的安装及简单使用</title>
    <url>/2019/05/20/docker/</url>
    <content><![CDATA[<p><strong>本文的安装环境为win10专业版</strong><br><span id="more"></span></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><strong>注意：适用于Windows的Docker需要运行Microsoft Hyper-V。</strong></p>
<p>先到控制面板-&gt;程序与功能-&gt;启用或关闭Windows功能中查看自己是否开启Hyper-V<br><img src="/2019/05/20/docker/1.png" alt="hyper"><br>可以从<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows">官网</a>下载，但是在国内会比较慢。可以点击<a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe">这里</a>下载。<br><img src="/2019/05/20/docker/2.png" alt="xiazai"><br>下载完成后，一路next即可，最终结果<br><img src="/2019/05/20/docker/3.png" alt="end"><br>在命令行中测试一下<br><img src="/2019/05/20/docker/4.png" alt="test"></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>运行docker run hello-world以测试从Docker Hub中拉取镜像并启动容器<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><br><img src="/2019/05/20/docker/5.png" alt="hello"><br>删除镜像<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image </span><br><span class="line">docker rmi id</span><br></pre></td></tr></table></figure><br><img src="/2019/05/20/docker/6.png" alt="delet"></p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>用Dockerfile定义一个镜像，输出hello world</p>
<p>首先新建一个文件夹，文件夹里放入三个文件<br><img src="/2019/05/20/docker/7.png" alt="file"><br><strong>app.py</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from redis import Redis, RedisError</span><br><span class="line">import os</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">redis = Redis(host=&quot;redis&quot;, db=0, socket_connect_timeout=2, socket_timeout=2)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    try:</span><br><span class="line">        visits = redis.incr(&quot;counter&quot;)</span><br><span class="line">    except RedisError:</span><br><span class="line">        visits = &quot;&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;&quot;</span><br><span class="line"></span><br><span class="line">    html = &quot;&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;&quot;</span><br><span class="line">    return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname(), visits=visits)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, port=80)</span><br></pre></td></tr></table></figure><br><strong>Dockerfile</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM python:3.6-slim</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line">ADD . /app</span><br><span class="line"></span><br><span class="line">RUN pip install --trusted-host mirrors.aliyun.com --index http://mirrors.aliyun.com/pypi/simple/ -r requirements.txt</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">ENV NAME World</span><br><span class="line"></span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><strong>requirements.txt</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Flask</span><br><span class="line">Redis</span><br></pre></td></tr></table></figure><br>打开命令行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 文件夹</span><br><span class="line">docker build -t firstapp .</span><br></pre></td></tr></table></figure><br><img src="/2019/05/20/docker/8.png" alt="build"><br>创建完成后，在镜像列表里就能看到了<br><img src="/2019/05/20/docker/9.png" alt="list"><br>运行应用<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 4040:80 firstapp</span><br></pre></td></tr></table></figure><br><img src="/2019/05/20/docker/10.png" alt="run"><br><img src="/2019/05/20/docker/11.png" alt="e"></p>
<p>大功告成！！！[&gt;_&lt;]</p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|遗传算法实现</title>
    <url>/2019/06/02/ga/</url>
    <content><![CDATA[<p><strong>遗传算法（genetic algorithm）是计算数学中用于解决最优化的搜索算法，是进化算法的一种。</strong><br><span id="more"></span></p>
<h1 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h1><blockquote>
<p>参照维基百科</p>
</blockquote>
<p>在遗传算法里，优化问题的解被称为个体，它表示为一个变量序列，叫做染色体或者基因串。染色体一般被表达为简单的字符串或数字符串，不过也有其他的依赖于特殊问题的表示方法适用，这一过程称为编码。首先，算法随机生成一定数量的个体，有时候操作者也可以干预这个随机产生过程，以提高初始种群的质量。在每一代中，都会评价每一个体，并通过计算适应度函数得到适应度数值。按照适应度排序种群个体，适应度高的在前面。这里的“高”是相对于初始的种群的低适应度而言。</p>
<p>下一步是产生下一代个体并组成种群。这个过程是通过选择和繁殖完成，其中繁殖包括交配（crossover，在算法研究领域中我们称之为交叉操作）和突变（mutation）。选择则是根据新个体的适应度进行，但同时不意味着完全以适应度高低为导向，因为单纯选择适应度高的个体将可能导致算法快速收敛到局部最优解而非全局最优解，我们称之为早熟。作为折中，遗传算法依据原则：适应度越高，被选择的机会越高，而适应度低的，被选择的机会就低。初始的数据可以通过这样的选择过程组成一个相对优化的群体。之后，被选择的个体进入交配过程。一般的遗传算法都有一个交配概率（又称为交叉概率），范围一般是0.6~1，这个交配概率反映两个被选中的个体进行交配的概率。例如，交配概率为0.8，则80%的“夫妻”会生育后代。每两个个体通过交配产生两个新个体，代替原来的“老”个体，而不交配的个体则保持不变。交配父母的染色体相互交换，从而产生两个新的染色体，第一个个体前半段是父亲的染色体，后半段是母亲的，第二个个体则正好相反。不过这里的半段并不是真正的一半，这个位置叫做交配点，也是随机产生的，可以是染色体的任意位置。再下一步是突变，通过突变产生新的“子”个体。一般遗传算法都有一个固定的突变常数（又称为变异概率），通常是0.1或者更小，这代表变异发生的概率。根据这个概率，新个体的染色体随机的突变，通常就是改变染色体的一个字节（0变到1，或者1变到0）。</p>
<p>经过这一系列的过程（选择、交配和突变），产生的新一代个体不同于初始的一代，并一代一代向增加整体适应度的方向发展，因为总是更常选择最好的个体产生下一代，而适应度低的个体逐渐被淘汰掉。这样的过程不断的重复：评价每个个体，计算适应度，两两交配，然后突变，产生第三代。周而复始，直到终止条件满足为止。一般终止条件有以下几种：</p>
<pre><code>计算耗费的资源限制（例如计算时间、计算占用的内存等）；
一个个体已经满足最优值的条件，即最优值已经找到；
适应度已经达到饱和，继续进化不会产生适应度更好的个体；
人为干预；以及以上两种或更多种的组合。
</code></pre><h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><ul>
<li>首先对问题进行<strong>编码</strong>，产生初始种群。</li>
<li>然后对个体进行<strong>交叉</strong>、<strong>变异</strong>等遗传操作，产生出新的个体。</li>
<li>再按照优胜劣汰的原则对个体进行<strong>选择</strong>。</li>
<li>如此往复，逐代演化产生出越来<strong>越好</strong>的个体。</li>
</ul>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>将问题的解变换为位串形式编码表示的过程叫编码</p>
<blockquote>
<p>编码是进化计算解决问题的先决条件<br>编码的重要性主要体现在三方面：<br>（1） 编码决定了个体基因的排列形式，从而决定了选择、交叉及变异的方式。<br>（2） 编码决定了搜索的困难度与复杂性。<br>（3） 编码决定了问题的求解精度。</p>
</blockquote>
<h2 id="交叉"><a href="#交叉" class="headerlink" title="交叉"></a>交叉</h2><p>单点交叉<br><img src="/2019/06/02/ga/2.png" alt="2"><br>两点交叉<br><img src="/2019/06/02/ga/3.png" alt="3"><br>部分匹配交叉<br><img src="/2019/06/02/ga/4.png" alt="4"><br>顺序交叉<br><img src="/2019/06/02/ga/6.png" alt="5"></p>
<h2 id="变异"><a href="#变异" class="headerlink" title="变异"></a>变异</h2><p><img src="/2019/06/02/ga/7.png" alt="6"></p>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>轮盘赌选择<br><img src="/2019/06/02/ga/8.png" alt="7"><br><img src="/2019/06/02/ga/9.png" alt="8"><br><img src="/2019/06/02/ga/10.png" alt="9"><br>可能出现的问题<br><img src="/2019/06/02/ga/11.png" alt="10"><br><img src="/2019/06/02/ga/12.png" alt="11"><br><img src="/2019/06/02/ga/13.png" alt="12"><br><img src="/2019/06/02/ga/14.png" alt="13"><br>两两竞争法选择<br><img src="/2019/06/02/ga/15.png" alt="14"><br>锦标赛选择<br><img src="/2019/06/02/ga/16.png" alt="15"><br>精英保留<br><img src="/2019/06/02/ga/17.png" alt="16"></p>
<h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><ul>
<li><strong>[初始化]</strong> 确定种群规模$N$，交叉概率$p_c$，变异概率$p_m$和终止条件。随机生成$N$个个体作为初始种群$P(0)$，设种群代数$t$=0.</li>
<li><strong>[个体评价]</strong> 计算种群$P(t)$中每个个体的适应度值.</li>
<li><strong>[种群进化]</strong><ul>
<li>(<strong>选择父代</strong>) 运用选择算子从$P(t)$中选择出$N/2$对父代；</li>
<li>(<strong>交叉</strong>) 对选择的$N/2$对父代，依概率$p_c$进行交叉，生成的子代个体记为集合$O_1$；</li>
<li>(<strong>变异</strong>) 对集合$O_1$中的个体依概率$p_m$进行变异，生成的子代个体记为集合$O_2$；</li>
<li>(<strong>选择子代</strong>) 从集合$P(t)\cup O_1\cup O_2$中依据选择算子选出$N$个个体组成下代种群$P(t+1)$；</li>
</ul>
</li>
<li><strong>[终止检验]</strong> 如算法满足终止条件，则输出$P(t+1)$中具有最大适应度值的个体作为最优解，终止算法，否则令$t=t+1$转入步骤2</li>
</ul>
<h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><blockquote>
<p>敬请期待</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>GA</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|MapReduce-计算平均成绩</title>
    <url>/2019/06/02/hadoop1/</url>
    <content><![CDATA[<p><strong>环境:</strong> Hadoop 3.0.0+Win10<br><strong>实现功能：</strong><br>1 每个同学必修课的平均成绩<br>2 按科目统计每个班的平均成绩<br><span id="more"></span></p>
<h1 id="配置数据和环境变量"><a href="#配置数据和环境变量" class="headerlink" title="配置数据和环境变量"></a>配置数据和环境变量</h1><p>输入文件为学生成绩信息，包含了必修课与选修课成绩：<a href="https://pan.baidu.com/s/12nsFyszQWgyElh5PfxML3g">Input1.txt</a>(提取码:xrq7)<br><img src="/2019/06/02/hadoop1/1.png" alt="1"></p>
<p>首先启动hadoop（记得以管理员模式启动），新建一个input1文件夹，把输入文件上传到文件夹中<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir /input1</span><br><span class="line">hadoop fs -put input1.txt /input1</span><br></pre></td></tr></table></figure><br>由于程序里会用到hadoop的jar包，所以要把路径配置到环境中，一种是直接在系统变量中修改classpath，但是会影响以后的编译，不推荐；第二种是新建一个.bat文件，在编译前启动就行了。<br>查看自己hadoop里jar包的路径<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop classpath</span><br></pre></td></tr></table></figure><br><img src="/2019/06/02/hadoop1/2.png" alt="2"><br>新建一个文件夹Map,里面新建一个setcp.bat，内容如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set classpath=%classpath%;上一步查看的内容</span><br></pre></td></tr></table></figure><br>在Map文件下，启动setcp<br><img src="/2019/06/02/hadoop1/3.png" alt="3"><br>到此准备工作就做完了。</p>
<h1 id="程序构成"><a href="#程序构成" class="headerlink" title="程序构成"></a>程序构成</h1><p><img src="/2019/06/02/hadoop1/7.png" alt="7"></p>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><h2 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h2><p>问题是求每个同学必修课的平均成绩，思路很简单。以同学的名字为主键，如果是必修课成绩就读取，最后计算总分数和个数，求取平均数。</p>
<blockquote>
<p>这里要注意一下中文编码问题，输入数据为utf-8的格式，而hadoop读取时会转为GBK，在判断必修的时候注意编码。</p>
</blockquote>
<p>Score.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.DoubleWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Score</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SMap</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">DoubleWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			String[] split=value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">			String Name=split[<span class="number">1</span>];</span><br><span class="line">			String t=split[<span class="number">3</span>];</span><br><span class="line">			<span class="keyword">if</span>(t.equals(<span class="string">&quot;▒пля&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				DoubleWritable Score = <span class="keyword">new</span> DoubleWritable(Integer.parseInt(split[<span class="number">4</span>]));</span><br><span class="line">				context.write(<span class="keyword">new</span> Text(Name),Score);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">DoubleWritable</span>,<span class="title">Text</span>,<span class="title">DoubleWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;DoubleWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (DoubleWritable val : values) &#123;</span><br><span class="line">				sum += val.get();</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">double</span> average=sum/(<span class="keyword">double</span>)count;</span><br><span class="line">			context.write(key,<span class="keyword">new</span> DoubleWritable(average));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		String[] otherArgs = <span class="keyword">new</span> GenericOptionsParser(conf, args).getRemainingArgs();</span><br><span class="line">		<span class="keyword">if</span> (otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		  System.err.println(<span class="string">&quot;Usage: Score&lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">		  System.exit(<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Job job = Job.getInstance(conf, <span class="string">&quot;score&quot;</span>);</span><br><span class="line">		job.setJarByClass(Score.class);</span><br><span class="line">		job.setMapperClass(SMap.class);</span><br><span class="line">		job.setReducerClass(SReducer.class);</span><br><span class="line">		job.setOutputKeyClass(Text.class);</span><br><span class="line">		job.setOutputValueClass(DoubleWritable.class);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">			FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[i]));</span><br><span class="line">		&#125;</span><br><span class="line">		FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> Path(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">		System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编译写好的程序，并打包。没问题的话，会在文件夹里看到生成的Score.jar<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac Score.java</span><br><span class="line">jar cvf Score.jar *.class</span><br></pre></td></tr></table></figure><br>执行程序，hadoop会读取input1的数据，将输出文件放到output1中。</p>
<blockquote>
<p>在执行这步时，可能会遇到各种各样的问题，多查一查，网上都会有解决方法的。当然，重装可以解决百分之五十的问题:yum:<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop jar Score.jar Score /input1 /output1</span><br></pre></td></tr></table></figure><br>最后，能在output1里看到两个文件，part-r-00000是最终结果。<br>如果要多次运行，记得每次运行前把output文件夹删了，否则会由于文件夹存在报错。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /output1</span><br><span class="line">hadoop fs -cat /output1/part-r-00000</span><br></pre></td></tr></table></figure><br>在命令行打开应该会乱码，打开<a href="http://localhost:9870/explorer.html#/output1">http://localhost:9870/explorer.html#/output1</a>下载下来。<br><img src="/2019/06/02/hadoop1/4.png" alt="4"><br>最终结果<br><img src="/2019/06/02/hadoop1/5.png" alt="5"></p>
</blockquote>
<h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><p>思路和问题一直，把学生姓名换成课程名称+班级就行了<br>cScore.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.FloatWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cScore</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">cSMap</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			String[] split=value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">			String room=split[<span class="number">0</span>];</span><br><span class="line">			String course=split[<span class="number">2</span>];</span><br><span class="line">			String Name=course+<span class="string">&quot; &quot;</span>+room;</span><br><span class="line">			<span class="keyword">int</span> Score=Integer.parseInt(split[<span class="number">4</span>]);</span><br><span class="line">			context.write(<span class="keyword">new</span> Text(Name),<span class="keyword">new</span> IntWritable(Score));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">cSReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">IntWritable</span>,<span class="title">Text</span>,<span class="title">FloatWritable</span>&gt; </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">				sum += val.get();</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">float</span> average=sum/(<span class="keyword">float</span>)count;</span><br><span class="line">			context.write(key,<span class="keyword">new</span> FloatWritable(average));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		String[] otherArgs = <span class="keyword">new</span> GenericOptionsParser(conf, args).getRemainingArgs();</span><br><span class="line">		<span class="keyword">if</span> (otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		  System.err.println(<span class="string">&quot;Usage: cScore&lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">		  System.exit(<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Job job = Job.getInstance(conf, <span class="string">&quot;cscore&quot;</span>);</span><br><span class="line">		job.setJarByClass(cScore.class);</span><br><span class="line">		job.setMapperClass(cSMap.class);</span><br><span class="line">		job.setReducerClass(cSReducer.class);</span><br><span class="line">		job.setOutputKeyClass(Text.class);</span><br><span class="line">		job.setOutputValueClass(IntWritable.class);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">			FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[i]));</span><br><span class="line">		&#125;</span><br><span class="line">		FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> Path(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">		System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行方法和上面一直<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac cScore.java</span><br><span class="line">jar cvf cScore.jar *.class</span><br><span class="line">hadoop fs -mkdir /input1</span><br><span class="line">hadoop fs -put input1.txt /input1</span><br><span class="line">hadoop jar cScore.jar cScore /input1 /output2</span><br></pre></td></tr></table></figure><br>最后，能在output2里找到最终结果part-r-00000。打开<a href="http://localhost:9870/explorer.html#/output2">http://localhost:9870/explorer.html#/output2</a>下载下来。<br>最终结果<br><img src="/2019/06/02/hadoop1/6.png" alt="6"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop|在Windows上安装Hadoop及WordCount示例</title>
    <url>/2019/05/27/hadoop/</url>
    <content><![CDATA[<p><strong>安装环境：<br>操作系统：Windows 10<br>JDK版本：JDK 1.8以上的Java开发和运行环境</strong><br><span id="more"></span></p>
<h1 id="什么是Hadoop"><a href="#什么是Hadoop" class="headerlink" title="什么是Hadoop"></a>什么是Hadoop</h1><p>　　Hadoop是一款支持数据密集型分布式应用程序并以Apache 2.0许可协议发布的开源软件框架。它支持在商品硬件构建的大型集群上运行的应用程序。Hadoop是根据谷歌公司发表的MapReduce和Google文件系统的论文自行实现而成。所有的Hadoop模块都有一个基本假设，即硬件故障是常见情况，应该由框架自动处理。</p>
<p>　　Hadoop框架透明地为应用提供可靠性和数据移动。它实现了名为MapReduce的编程范式：应用程序被分割成许多小部分，而每个部分都能在集群中的任意节点上运行或重新运行。此外，Hadoop还提供了分布式文件系统，用以存储所有计算节点的数据，这为整个集群带来了非常高的带宽。MapReduce和分布式文件系统的设计，使得整个框架能够自动处理节点故障。它使应用程序与成千上万的独立计算的计算机和PB级的数据连接起来。</p>
<p>以上内容来自维基百科。不过对于我来说，开始学习某一套技术只有当我亲自动手实践后，才能真正理解这套技术解决了什么问题，并且有益于后续的学习。下来就让我们开始吧！</p>
<h1 id="Hadoop配置"><a href="#Hadoop配置" class="headerlink" title="Hadoop配置"></a>Hadoop配置</h1><p>1 先检查下自己的配置环境，主要是JDK版本<br><img src="/2019/05/27/hadoop/1.png" alt="java"><br>2 下载进制压缩包文件:<a href="http://archive.apache.org/dist/hadoop/core/hadoop-3.0.0/">hadoop-3.0.0.tar.gz </a><br><img src="/2019/05/27/hadoop/2.png" alt="h"><br>3 下载针对Windows环境的Hadoop修正程序:<a href="https://github.com/steveloughran/winutils">winutils-master.zip</a><br><img src="/2019/05/27/hadoop/3.png" alt="wm"><br>4 将hadoop-3.0.0.tar.gz解压至 <strong>C:\Soft\Hadoop</strong>（可以根据自己喜好更改Hadoop安装目录）<br><img src="/2019/05/27/hadoop/4.png" alt="h"><br>5 新增环境变量<strong>HADOOP_HOME</strong>（作为系统变量），并将其值设为<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Soft\Hadoop\bin</span><br><span class="line">(这里根据你自己解压的位置设置)</span><br></pre></td></tr></table></figure><br>（设置方法：进入“控制面板\系统和安全\系统”，然后点击“高级系统设置”，然后点击“环境变量(N)..”按钮）<br><img src="/2019/05/27/hadoop/5.png" alt="h"><br>6 观察<strong>JAVA_HOME</strong>变量设置是否正确，这个后面会用到。<br><img src="/2019/05/27/hadoop/6.png" alt="h"><br>7 将<strong>C:\Soft\Hadoop\bin</strong>路径添加到Path环境变量。(这是本人的，记得换成自己的)<br>8 将如下内容粘贴到..\Hadoop\etc\hadoop\core-site.xml文件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><br>9 将如下内容粘贴到..\Hadoop\etc\hadoop\mapred-site.xml文件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><br>10 在..\Hadoop路径下创建“data”子目录；<br>在..\Hadoop\data路径下创建“namenode”子目录；<br>在..\Hadoop\data路径下创建“datanode”子目录。<br><img src="/2019/05/27/hadoop/7.png" alt="d"><br>11 将如下内容粘贴到..\Hadoop\etc\hadoop\hdfs-site.xml文件<br>（里面的路径记得换成自己的）<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">       &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">       &lt;value&gt;file:///C:/Soft/hadoop/data/namenode&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">       &lt;value&gt;file:///C:/Soft/hadoop/data/datanode&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><br>12 将如下内容粘贴到..\Hadoop\etc\hadoop\yarn-site.xml文件<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">    	&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">    	&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">      	&lt;name&gt;yarn.nodemanager.auxservices.mapreduce.shuffle.class&lt;/name&gt;  </span><br><span class="line">	&lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><br>13 编辑文件C:\Hadoop\etc\hadoop\hadoop-env.cmd：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把“set JAVA_HOME=%JAVA_HOME%”</span><br><span class="line">修改为“set JAVA_HOME=C:\PROGRA~1\Java\自己的jdk版本”</span><br><span class="line">可以回到第6步看一下，本人的是jdk1.8.0_201</span><br></pre></td></tr></table></figure><br>14 C:\Hadoop\bin目录下的内容删除。<br>15 将第3步下载的“winutils-master.zip”解压，然后将解压文件中“..\winutils-master\hadoop-3.0.0\bin”目录下的内容拷贝到“..\Hadoop\bin”目录。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>到此为止，Hadoop的安装就完成了，接下来运行几个命令测试Hadoop是否可以正常运行<br>1 打开终端<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ..\Hadoop\bin</span><br></pre></td></tr></table></figure><br>2 先对HDFS分布式文件系统进行格式化。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs namenode –format</span><br></pre></td></tr></table></figure><br>如果成功，能看到下面这句<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO common.Storage: Storage directory C:\Soft\hadoop\data\namenode has been successfully formatted</span><br></pre></td></tr></table></figure><br>3 输入下面的命令。如果一切正常，将会启动一个“hdfs namenode”进程和一个“hdfs datanode”进程，构成了只有1个主节点和1个从节点的“HDFS分布式文件系统集群”。可以通过<a href="http://localhost:9870">http://localhost:9870</a>监控HDFS系统。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ..\Hadoop\sbin</span><br><span class="line">start-dfs</span><br></pre></td></tr></table></figure><br><img src="/2019/05/27/hadoop/9.png" alt="s"><br>4 关闭HDFS分布式文件系统。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ..\Hadoop\sbin</span><br><span class="line">stop-dfs</span><br></pre></td></tr></table></figure></p>
<h1 id="WordCount示例的使用"><a href="#WordCount示例的使用" class="headerlink" title="WordCount示例的使用"></a>WordCount示例的使用</h1><p>首先，以管理员身份启动命令行，进到sbin文件夹下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\Soft\Hadoop\sbin</span><br></pre></td></tr></table></figure><br><img src="/2019/05/27/hadoop/10.png" alt="1"><br>启动Hadoop<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start-all</span><br></pre></td></tr></table></figure><br><img src="/2019/05/27/hadoop/11.png" alt="2"><br>如果正常的话会打开四个窗口<br><img src="/2019/05/27/hadoop/14.png" alt="w"><br>新建一个txt文件作为数据样本<br>test.txt<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br><span class="line">qit</span><br><span class="line">stop</span><br><span class="line">sdf</span><br><span class="line">apple</span><br><span class="line">EA</span><br><span class="line">steam</span><br><span class="line">orange</span><br></pre></td></tr></table></figure><br>在Hadoop中新建一个test文件夹<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir /test</span><br></pre></td></tr></table></figure><br><img src="/2019/05/27/hadoop/13.png" alt="3"><br>将test.txt上传到test文件夹中，查看一下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -put C:\Else\test.txt \test</span><br><span class="line">hadoop fs -ls /</span><br><span class="line">hadoop fs -ls /test</span><br></pre></td></tr></table></figure><br><img src="/2019/05/27/hadoop/12.png" alt="4"><br>到此准备工作就已经做完了。</p>
<p>WordCount是Hadoop自带的一个示例程序，在../Hadoop\share\hadoop\mapreduce文件夹下能找到名称里带有examples的jar包<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop jar C:\Soft\Hadoop\share\hadoop\mapreduce\hadoop-mapreduce-examples-3.0.0.jar wordcount \test \output</span><br></pre></td></tr></table></figure><br><img src="/2019/05/27/hadoop/15.png" alt="5"><br>运行完成后能在output文件夹下看的两个文件，最终的结果就存在part-r-00000中<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /output</span><br><span class="line">hadoop fs -cat /output/part-r-00000</span><br></pre></td></tr></table></figure><br><img src="/2019/05/27/hadoop/16.png" alt="6"><br>输入结束命令，关闭系统<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop-all</span><br></pre></td></tr></table></figure></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>代码|操作<br>|-|-|<br>hadoop fs –ls / |    显示根目录下的所有文件和目录|<br>hadoop fs –mkdir /test|    创建子目录/test，创建多级目录 加上 –p|<br>hadoop fs -rm /test1.txt|    删除文件|<br>hadoop fs -rm -r /test|    删除子目录（要加-r参数）|<br>hadoop fs -put C:\tmp\test.txt \test|    将本地文件上传到HDFS分布式文件系统|<br>hadoop fs -cat \test\test.txt|    查看文件内容|<br>hadoop fs -cp URI [URI …] |    cp 复制系统内文件|<br>hadoop fs -get[-ignorecrc] [-crc] |    下载文件到本地|<br>hadoop fs -mv URI [URI …] |    将文件从源路径移动到目标路径|<br>hadoop fs -du URI [URI …]|    显示文件大小|</p>
]]></content>
      <tags>
        <tag>分布式</tag>
        <tag>Hadoop</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|MapReduce-自连接算法</title>
    <url>/2019/06/04/hadoop2/</url>
    <content><![CDATA[<p><strong>环境:</strong> Hadoop 3.0.0+Win10<br><strong>实现功能：</strong><br>找出所有具有grandchild-grandparent关系的人名组。<br><span id="more"></span><br>输入文件的每一行为具有child-parent关系的一对人名<a href="https://pan.baidu.com/s/10fVu0_fmhxxOEMmwlKMJlw">Input2.txt</a>(提取码:2vd7)<br><img src="/2019/06/04/hadoop2/1.png" alt="1"><br>首先启动hadoop（记得以管理员模式启动），新建一个input2文件夹，把输入文件上传到文件夹中<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir /input2</span><br><span class="line">hadoop fs -put input2.txt /input2</span><br></pre></td></tr></table></figure><br>按照上一个博客里，启动setcp。准备工作完成。</p>
<h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><p>数据量很大，我们先从一个小样本开始<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a,b #a是b的儿子</span><br><span class="line">b,c #b是c的儿子</span><br><span class="line">很明显a是c的孙子，最后输出的肯定就是a,c </span><br></pre></td></tr></table></figure><br>爷爷就是爸爸的爸爸，如何识别出谁是子女，谁是父母呢？<br>很容易想到加标签。在父母前加个“0”，在子女前加个“1”，结果如下：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#&lt;key,value&gt;</span><br><span class="line">&lt;a,0_b&gt;</span><br><span class="line">&lt;b,1_a&gt;</span><br><span class="line">&lt;b,0_c&gt;</span><br><span class="line">&lt;c,1_b&gt;</span><br></pre></td></tr></table></figure><br>在同样的key中，前缀为0的就是前缀为1的grandparent</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Grand</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GrandMap</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			String[] array = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            context.write(<span class="keyword">new</span> Text(array[<span class="number">0</span>]),<span class="keyword">new</span> Text(<span class="string">&quot;0_&quot;</span>+array[<span class="number">1</span>]));</span><br><span class="line">            context.write(<span class="keyword">new</span> Text(array[<span class="number">1</span>]),<span class="keyword">new</span> Text(<span class="string">&quot;1_&quot;</span>+array[<span class="number">0</span>]));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">GrandReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">			Iterator&lt;Text&gt; iterator = values.iterator();</span><br><span class="line">			ArrayList&lt;String&gt; grandChildList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            ArrayList&lt;String&gt; grandParentList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                String[] splited = iterator.next().toString().split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (splited[<span class="number">0</span>].equals(<span class="string">&quot;1&quot;</span>))&#123;</span><br><span class="line">                    grandChildList.add(splited[<span class="number">1</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    grandParentList.add(splited[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (grandChildList.size() &gt;<span class="number">0</span> &amp;&amp; grandParentList.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(String grandChild:grandChildList)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (String grandParent:grandParentList)&#123;</span><br><span class="line">                        context.write(<span class="keyword">new</span> Text(grandChild),<span class="keyword">new</span> Text(grandParent));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">		String[] otherArgs = <span class="keyword">new</span> GenericOptionsParser(conf, args).getRemainingArgs();</span><br><span class="line">		<span class="keyword">if</span> (otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		  System.err.println(<span class="string">&quot;Usage: Grand&lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">		  System.exit(<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		Job job = Job.getInstance(conf, <span class="string">&quot;grand&quot;</span>);</span><br><span class="line">		job.setJarByClass(Grand.class);</span><br><span class="line">		job.setMapperClass(GrandMap.class);</span><br><span class="line">		job.setReducerClass(GrandReducer.class);</span><br><span class="line">		job.setOutputKeyClass(Text.class);</span><br><span class="line">		job.setOutputValueClass(Text.class);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">			FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[i]));</span><br><span class="line">		&#125;</span><br><span class="line">		FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> Path(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">		System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译并打包<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac Grand.java</span><br><span class="line">jar cvf Grand.jar *.class</span><br></pre></td></tr></table></figure><br>运行并查看结果<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop jar Grand.jar Grand /input2 /output3</span><br><span class="line">hadoop fs -cat /output3/part-r-00000</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows|linux子系统安装及使用</title>
    <url>/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>Windows 10 专业版<br><span id="more"></span></p>
<p>最近用c语言写socket套接字，需要在Linux上编译运行。但用虚拟机不仅占内存大而且耗电也挺多的，突然想起来有个Linux子系统。于是就决定放弃vbox，试试系统自带的。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先在windows功能中启动”<strong>适用于Linux的windows子系统</strong>“</p>
<p><img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/1.png" alt="1"></p>
<p>然后在Microsoft store里搜索ubuntu</p>
<p><img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/2.png" alt="2"></p>
<p>在前三个里选一个下载(我选的是18.04的)，下载完后启动并根据提示设置用户名和密码，最后结果如下图</p>
<p><img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/3.png" alt="3"></p>
<p>最后安装编译环境，由于目前只用C和C++,所以我只安装了gcc和g++</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>
<p><img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/4.png" alt="4"></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>经过上面的步骤安装成功后，打开命令行，打开你要编译的文件的文件夹下，输入bash，启动子系统。下来的操作就和Linux中一样了。<br><img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/5.png" alt="5"></p>
<h1 id="Linux子系统的位置"><a href="#Linux子系统的位置" class="headerlink" title="Linux子系统的位置"></a>Linux子系统的位置</h1><p>以我的系统为例，WSL的root目录对应windows的：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\name\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs</span><br></pre></td></tr></table></figure><br>但实际上微软为我们提供了一个默认的变量可以直接指向WSL的目录，你可以在运行(win+R)或资源管理器的路径里直接输入<code>\\wsl$</code>进入Ubuntu的目录<br><img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/6.png" alt="6"></p>
<hr>
<p>以上就是Linux子系统的简单使用，如果有新的发现将会继续更新。<br>同时欢迎留言分享！ヾ(•ω•`)o</p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|粒子群算法实现</title>
    <url>/2019/05/20/pso/</url>
    <content><![CDATA[<p><strong>粒子群算法，也称粒子群优化算法或鸟群觅食算法（Particle Swarm Optimization），缩写为PSO</strong><br><span id="more"></span></p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>粒子群算法（PSO）是模拟群体智能所建立起来的一种优化算法，主要用于解决最优化问题。基本思想是通过群体中个体之间的协作和信息共享来寻找最优解</p>
<p>算法是模拟鸟群或蜂群的觅食行为。假设这样一个问题：一群鸟在随机的搜索食物，在一块区域里只有一块食物，所有的鸟都不知道食物在哪。但是它们知道自己的当前位置距离食物有多远。那么这群鸟找到食物的最优策略就是搜寻目前离食物最近的鸟的周围区域。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>粒子群算法就是对上面问题的一个抽象。</p>
<ul>
<li>每个鸟抽象为一个无质量，无体积的“粒子”</li>
<li>每个粒子有一个适应度函数以模拟每只鸟与食物的距离</li>
<li>每个粒子有一个速度决定它的飞行方向和距离，初始值可以随机确定</li>
<li>每一次单位时间的飞行后，所有粒子分享信息，下一步将飞向自身最佳位置和全局最优位置的加权中心</li>
</ul>
<p>初始化为一群随机粒子，通过迭代找到最优。每次迭代中，粒子通过跟踪“个体极值（pbest）”和“全局极值(gbest)”来更新自己的位置。</p>
<p>举个例子，假设在D维搜索空间中，有m个粒子<br>其中第i个粒子的位置为矢量，记$\vec{x}_i=(x_{i1},x_{i2},\ldots,x_{iD})$<br>其飞翔速度也是一个矢量，记$\vec{v}_i=(v_{i1},v_{i2},\ldots,v_{iD})$<br>第i个粒子搜索到的最优位置为$\vec{p}_i=(p_{i1},p_{i2},\ldots,p_{iD})$<br>整个粒子群搜索到的最优位置为$\vec{p}_{gbest}=(p_{gbest1},p_{gbest2},\ldots,p_{gbestD})$</p>
<p><strong>第i个粒子的位置和速度更新为</strong><br>$v_{id}^{k+1}=wv_{id}^{k}+c_1rand()(p_{id}-x_{id}^k)+c_2rand()(p_{gbest}-x_{id}^k)$<br>$x_{id}^{k+1}=x_{id}^{k}+v_{id}^{k} \qquad i=1,2,\ldots,m \quad d=1,2,\ldots,D$<br>其中，$w$称为惯性权重;$c_1$和$c_2$为两个正常系数，称为加速因子;$rand()$为(0,1)之间的随机数;$v_{id}^{k}$限制在一个最大速度$v_{max}$内。</p>
<p><strong>简单解释一下：</strong></p>
<ul>
<li><strong>惯性权重$w$</strong><br>   使粒子保持运动惯性，使其有扩展搜索空间的趋势，有能力探索新的区域。<br>   表示微粒对当前自身运动状态的信任，依据自身的速度进行惯性运动。<br>   较大的w有利于跳出局部极值，而较小的w有利于算法收敛。</li>
<li><strong>加速常数$c_1$和$c_2$</strong><br>  将c1和c2统一为一个控制参数，φ= c1+c2<br>  如果φ很小，粒子群运动轨迹将非常缓慢；<br>  如果φ很大，则微粒位置变化非常快；<br>  实验表明，当φ=4.1（通常c1=2.0，c2=2.0）时，具有很好的收敛效果。</li>
<li><strong>最大速度$v_{max}$</strong><br>  决定粒子在一个循环中最大的移动距离，通常设定为粒子的范围宽度。</li>
<li><strong>粒子数</strong><br>  一般取20～40，对较难或特定类别的问题可以取100～200。</li>
</ul>
<h1 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h1><p>PSO算法思想很简单，先初始化为一群随机粒子，通过迭代找到最优。每次迭代中，粒子通过跟踪“个体极值（pbest）”和“全局极值(gbest)”来更新自己的位置，当最大循环数以及最小错误要求停止。<br><img src="/2019/05/20/pso/1.png" alt="suanfa"></p>
<h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><p>例子：$f(x)=x_1^2+x_2^2 \qquad x_1,x_2 \in[-10,10]$，求解最小值</p>
<ol>
<li>先建立一个PSO类，我们所要做的步骤，分别是设置参数，初始化种群，设置目标函数，进行迭代更新粒子位置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class PSO():</span><br><span class="line">    # ----------------------初始化种群-------------------------</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    #  ----------------------目标函数---------------------------</span><br><span class="line">    def function(self, x):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # ----------------------更新粒子位置------------------------</span><br><span class="line">    def iterator(self):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure></li>
<li>初始化参数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def __init__(self, pN, max_steps, dim=2, bound=[-10, 10], v_max=2, w=0.6, c1=2, c2=2):</span><br><span class="line">    self.pN = pN</span><br><span class="line">    self.dim = dim</span><br><span class="line">    self.steps = max_steps</span><br><span class="line"></span><br><span class="line">    self.w = w</span><br><span class="line">    self.c1 = c1</span><br><span class="line">    self.c2 = c2</span><br><span class="line">    self.x_bound = bound</span><br><span class="line"></span><br><span class="line">    self.x = np.random.uniform(self.x_bound[0], self.x_bound[1], (self.pN, self.dim))</span><br><span class="line">    self.v = np.random.rand(self.pN, self.dim) * v_max</span><br><span class="line">    self.pbest = self.x  # 个体的最佳位置</span><br><span class="line">    fitness = self.function(self.x)</span><br><span class="line">    self.gbest = self.x[np.argmin(fitness)]  # 全局最佳位置</span><br><span class="line">    self.p_fit = fitness  # 每个个体最佳适应值</span><br><span class="line">    self.fit = np.max(fitness)  # 全局最佳适应值</span><br></pre></td></tr></table></figure></li>
<li>设置目标函数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def function(self, x):</span><br><span class="line">    return np.sum(np.square(x), axis=1)</span><br></pre></td></tr></table></figure></li>
<li>更新粒子位置<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def iterator(self):</span><br><span class="line">    for step in range(self.steps):</span><br><span class="line">        # self.g_fit[step] = self.fit</span><br><span class="line">        r1 = np.random.rand(self.pN, self.dim)</span><br><span class="line">        r2 = np.random.rand(self.pN, self.dim)</span><br><span class="line">        self.v = self.w * self.v + self.c1 * r1 * (self.pbest - self.x) + self.c2 * r2 * (self.gbest - self.x)</span><br><span class="line">        self.x = self.v + self.x</span><br><span class="line">        fitness = self.function(self.x)</span><br><span class="line"></span><br><span class="line">        plt.clf()</span><br><span class="line">        plt.scatter(self.x[:, 0], self.x[:, 1], c=&#x27;k&#x27;)</span><br><span class="line">        plt.scatter(self.gbest[0], self.gbest[1], c=&#x27;r&#x27;)</span><br><span class="line">        plt.xlim(self.x_bound[0], self.x_bound[1])</span><br><span class="line">        plt.ylim(self.x_bound[0], self.x_bound[1])</span><br><span class="line">        plt.pause(0.01)</span><br><span class="line"></span><br><span class="line">        update = np.greater(self.p_fit, fitness)</span><br><span class="line">        self.pbest[update] = self.x[update]</span><br><span class="line">        self.p_fit[update] = fitness[update]</span><br><span class="line">        if np.min(fitness) &lt; self.fit:</span><br><span class="line">            self.gbest = self.x[np.argmin(fitness)]</span><br><span class="line">            self.fit = np.min(fitness)</span><br></pre></td></tr></table></figure>
最后进行一个测试<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pso = PSO(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line">    pso.iterator()</span><br><span class="line">    pso.show()</span><br></pre></td></tr></table></figure>
<img src="/2019/05/20/pso/2.png" alt="result"><blockquote>
<p>粒子群算法是对现实中规律的总结和应用，具体怎么使用还要看我们遇到的问题，和对问题的理解</p>
</blockquote>
</li>
</ol>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PSO</span>():</span></span><br><span class="line">    <span class="comment"># ----------------------初始化种群-------------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, pN, max_steps, dim=<span class="number">2</span>, bound=[-<span class="number">10</span>, <span class="number">10</span>], v_max=<span class="number">1</span>, w=<span class="number">0.6</span>, c1=<span class="number">2</span>, c2=<span class="number">2</span></span>):</span></span><br><span class="line">        self.pN = pN</span><br><span class="line">        self.dim = dim</span><br><span class="line">        self.steps = max_steps</span><br><span class="line"></span><br><span class="line">        self.w = w</span><br><span class="line">        self.c1 = c1</span><br><span class="line">        self.c2 = c2</span><br><span class="line">        self.x_bound = bound</span><br><span class="line"></span><br><span class="line">        self.x = np.random.uniform(self.x_bound[<span class="number">0</span>], self.x_bound[<span class="number">1</span>], (self.pN, self.dim))</span><br><span class="line">        self.v = np.random.rand(self.pN, self.dim) * v_max</span><br><span class="line">        self.pbest = self.x  <span class="comment"># 个体的最佳位置</span></span><br><span class="line">        fitness = self.function(self.x)</span><br><span class="line">        self.gbest = self.x[np.argmin(fitness)]  <span class="comment"># 全局最佳位置</span></span><br><span class="line">        self.p_fit = fitness  <span class="comment"># 每个个体最佳适应值</span></span><br><span class="line">        self.fit = np.<span class="built_in">max</span>(fitness)  <span class="comment"># 全局最佳适应值</span></span><br><span class="line">        <span class="comment"># self.g_fit = np.zeros((self.steps,1))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  ----------------------目标函数---------------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">function</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.<span class="built_in">sum</span>(np.square(x), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ----------------------更新粒子位置------------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">iterator</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(self.steps):</span><br><span class="line">            <span class="comment"># self.g_fit[step] = self.fit</span></span><br><span class="line">            r1 = np.random.rand(self.pN, self.dim)</span><br><span class="line">            r2 = np.random.rand(self.pN, self.dim)</span><br><span class="line">            self.v = self.w * self.v + self.c1 * r1 * (self.pbest - self.x) + self.c2 * r2 * (self.gbest - self.x)</span><br><span class="line">            self.x = self.v + self.x</span><br><span class="line">            fitness = self.function(self.x)</span><br><span class="line"></span><br><span class="line">            plt.clf()</span><br><span class="line">            plt.scatter(self.x[:, <span class="number">0</span>], self.x[:, <span class="number">1</span>], c=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">            plt.scatter(self.gbest[<span class="number">0</span>], self.gbest[<span class="number">1</span>], c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">            plt.xlim(self.x_bound[<span class="number">0</span>], self.x_bound[<span class="number">1</span>])</span><br><span class="line">            plt.ylim(self.x_bound[<span class="number">0</span>], self.x_bound[<span class="number">1</span>])</span><br><span class="line">            plt.pause(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">            update = np.greater(self.p_fit, fitness)</span><br><span class="line">            self.pbest[update] = self.x[update]</span><br><span class="line">            self.p_fit[update] = fitness[update]</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">min</span>(fitness) &lt; self.fit:</span><br><span class="line">                self.gbest = self.x[np.argmin(fitness)]</span><br><span class="line">                self.fit = np.<span class="built_in">min</span>(fitness)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;最佳位置：&quot;</span>, self.gbest)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;最优解：&quot;</span>, self.fit)</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pso = PSO(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line">    pso.iterator()</span><br><span class="line">    pso.show()</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Python</tag>
        <tag>PSO</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|PyTorch入门教程</title>
    <url>/2020/07/08/pytorch/</url>
    <content><![CDATA[<p><strong>PyTorch使用心得</strong><br><span id="more"></span></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>进入<a href="https://pytorch.org/get-started/locally/">PyTorch官网</a>，按照提示选择<br><img src="/2020/07/08/pytorch/1.png" alt="1"></p>
<blockquote>
<p>这里</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|一行代码生成二维码</title>
    <url>/2020/02/28/%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<p><strong>简单生成二维码</strong><br><span id="more"></span></p>
<h1 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h1><p>二维码也称为二维条码，是指在一维条码的基础上扩展出另一维具有可读性的条码，使用黑白矩形图案表示二进制数据，被设备扫描后可获取其中所包含的信息。一维条码的宽度记载着数据，而其长度没有记载数据。二维码的长度、宽度均记载着数据。二维码有一维条码没有的“定位点”和“容错机制”。容错机制在即使没有识别到全部的条码、或是说条码有污损时，也可以正确地还原条码上的信息。</p>
<p>二维码在现实生活中的应用越来与普遍，归于功于 QR code 码制的流行。我们常说的二维码就是它。所以，二维码又被称为 QR code。</p>
<blockquote>
<p>QR code 是一种矩阵式二维条码（又称棋盘式二维条码）。它是在一个矩形空间通过黑、白像素在矩阵中的不同分布进行编码。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。</p>
</blockquote>
<h1 id="二维码的生成"><a href="#二维码的生成" class="headerlink" title="二维码的生成"></a>二维码的生成</h1><p>安装工具 <a href="https://github.com/sylnsfar/qrcode">Myqr</a>：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install myqr</span><br></pre></td></tr></table></figure><br>生成一个普通二维码：<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myqr https://mengqiu233.github.io</span><br></pre></td></tr></table></figure><br>这时就会在当前目录下生成一个名称为 qrcode.png 的二维码<br><img src="/2020/02/28/%E4%BA%8C%E7%BB%B4%E7%A0%81/qrcode.png" alt="1"></p>
<blockquote>
<p>注意这里的字符串不能指定中文</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
<th>~</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>输出的文件路径</td>
</tr>
<tr>
<td>-n</td>
<td>文件名称</td>
<td>.jpg .png .gif</td>
</tr>
<tr>
<td>-l</td>
<td>二维码的纠错等级</td>
<td>L、M、Q、H，从左到右依次升高</td>
</tr>
<tr>
<td>-v</td>
<td>二维码的边长</td>
<td>范围是 1 至 40，数字越大边长越大</td>
</tr>
<tr>
<td>-p</td>
<td>添加图片</td>
</tr>
</tbody>
</table>
</div>
<p>比如将图片结合到二维码中<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myqr https://mengqiu233.github.io/ -p tree.jpg -c</span><br></pre></td></tr></table></figure><br><img src="/2020/02/28/%E4%BA%8C%E7%BB%B4%E7%A0%81/mencia_qrcode.png" alt="2"></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|面向消息中间件</title>
    <url>/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<p><strong>面向消息中间件（Message Oriented Middleware）提供了一种分布式消息队列服务，使得节点之间可以实现基于消息的形式灵活的异步通信。</strong><br><span id="more"></span></p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p><img src="/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/1.png" alt="1"></p>
<h1 id="两种通信模式"><a href="#两种通信模式" class="headerlink" title="两种通信模式"></a>两种通信模式</h1><h2 id="点对点通信模式："><a href="#点对点通信模式：" class="headerlink" title="点对点通信模式："></a>点对点通信模式：</h2><ul>
<li>用于消息生产者和消息消费者之间点点对点通信，相当于在生产者和消费者之间建立了一个点对点消息队列</li>
<li>每个消息只有一个消费者，不可重复消费(一旦被消费，消息就不再在消息队列中)</li>
<li>高级队列模式：带优先级的队列；支持持久性的队列</li>
</ul>
<h2 id="发布-订阅通信模式："><a href="#发布-订阅通信模式：" class="headerlink" title="发布/订阅通信模式："></a>发布/订阅通信模式：</h2><ul>
<li>支持向一个特定的消息主题发布消息。 多个订阅者可以同时关注并接收来自特定消息主题的消息</li>
<li>可以灵活地实现广播、组播和多对多等通信模式</li>
<li>可以支持持久性、事务机制等高级功能</li>
</ul>
<h1 id="常用的MOM中间件"><a href="#常用的MOM中间件" class="headerlink" title="常用的MOM中间件"></a>常用的MOM中间件</h1><p><strong>ActiveMQ：</strong></p>
<blockquote>
<p>由 Apache 出品，完全兼容JMS（Java Message Service）<br>为多种编程语言提供客户端API<br>内部支持多种通信协议<br>必须部署中心服务器作为消息路由代理。中心服务器可由服务器集群代替。</p>
</blockquote>
<p><strong>RabbitMQ：</strong></p>
<blockquote>
<p>采用Erlang语言实现的AMQP协议的消息中间件，最初起源于金融系统。</p>
</blockquote>
<p><strong>RocketMQ：</strong></p>
<blockquote>
<p>阿里 的开源产品，用 Java 语言实现；在阿里内部被广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理等场景。</p>
</blockquote>
<p><strong>Apache Kafka：</strong></p>
<blockquote>
<p>提供完全分布式架构，与Apache的其他平台如Hadoop、Apache Storm、Spark、Flink等集成方便。</p>
</blockquote>
<p><strong>ZeroMQ：</strong></p>
<blockquote>
<p>号称史上最快的消息队列，基于C语言开发。</p>
</blockquote>
<p><strong>WebsphereMQ：</strong></p>
<blockquote>
<p>IBM的MOM中间件产品</p>
</blockquote>
<h1 id="编程示例"><a href="#编程示例" class="headerlink" title="编程示例"></a>编程示例</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>利用MOM消息队列技术实现一个分布式随机信号分析系统，具体要求：</p>
<ol>
<li>随机信号产生器每隔10毫秒左右就产生一个正态分布的随机数字，并作为一个消息发布。</li>
<li>多个随机信号分析模块订阅并接收该随机数字，然后对信号进行分析并实时显示分析结果。至少包含如下分析模块：<ul>
<li>计算随机信号的均值；</li>
<li>计算过去N个随机信号的方差（N为常量，可设置）</li>
<li>实现基于正态分布的异常点检测$\mu \pm 3 \sigma$</li>
</ul>
</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><strong>Publisher.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageProducer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Publisher</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String brokerURL = <span class="string">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="keyword">private</span> MessageProducer producer;</span><br><span class="line">	<span class="keyword">private</span> Topic topic;</span><br><span class="line">	<span class="keyword">private</span> Random random=<span class="keyword">new</span> Random();</span><br><span class="line">	<span class="keyword">private</span> String d;</span><br><span class="line">	<span class="keyword">static</span> Scanner in=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Publisher</span><span class="params">(String topicName)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">		</span><br><span class="line">    	factory = <span class="keyword">new</span> ActiveMQConnectionFactory(brokerURL);</span><br><span class="line">    	connection = factory.createConnection();</span><br><span class="line">        </span><br><span class="line">        session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">		topic = session.createTopic(topicName);</span><br><span class="line">        producer = session.createProducer(topic);</span><br><span class="line">        producer.setTimeToLive(<span class="number">1000</span>);</span><br><span class="line">		connection.start();</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, InterruptedException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//    	System.out.println(&quot;Please input u and a&quot;);</span></span><br><span class="line"><span class="comment">//    	int u=in.nextInt();</span></span><br><span class="line"><span class="comment">//    	int a=in.nextInt();</span></span><br><span class="line">    	<span class="keyword">int</span> u=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    	Publisher publisher = <span class="keyword">new</span> Publisher(<span class="string">&quot;Gaussian&quot;</span>);</span><br><span class="line">    	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">    	<span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    		i++;</span><br><span class="line">    		<span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line">    		<span class="keyword">if</span>(t2-t1&gt;<span class="number">10000</span>)</span><br><span class="line">    		&#123;</span><br><span class="line">    			<span class="keyword">break</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    		publisher.sendMessage(u,a,i);</span><br><span class="line">    		Thread.sleep(<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">    	publisher.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> i)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">    	d = Double.toString(b*random.nextGaussian()+a);</span><br><span class="line">        Message message = session.createTextMessage(d);</span><br><span class="line">        producer.send(message);</span><br><span class="line">        System.out.println(<span class="string">&quot;Sent number &quot;</span>+i+<span class="string">&quot; :&quot;</span>+d);</span><br><span class="line">    &#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>ASyncConsumer_ave.java</strong>（计算均值）<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Average</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String ss=((TextMessage)message).getText();</span><br><span class="line">			num++;</span><br><span class="line">			sum+=Double.valueOf(ss);</span><br><span class="line">			System.out.println(<span class="string">&quot;number:&quot;</span>+num+<span class="string">&quot; average:&quot;</span>+sum/num);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASyncConsumer_ave</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">		String brokerURL = <span class="string">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class="line">		ConnectionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">		Connection connection = <span class="keyword">null</span>;</span><br><span class="line">		Session session = <span class="keyword">null</span>;</span><br><span class="line">		Topic topic = <span class="keyword">null</span>;</span><br><span class="line">		MessageConsumer messageConsumer = <span class="keyword">null</span>;</span><br><span class="line">		Average average=<span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			factory = <span class="keyword">new</span> ActiveMQConnectionFactory(brokerURL);</span><br><span class="line">			connection = factory.createConnection();</span><br><span class="line">			connection.start();</span><br><span class="line">			</span><br><span class="line">			session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">			topic = session.createTopic(<span class="string">&quot;Gaussian&quot;</span>);</span><br><span class="line"></span><br><span class="line">			messageConsumer = session.createConsumer(topic);</span><br><span class="line">			</span><br><span class="line">			average = <span class="keyword">new</span> Average();</span><br><span class="line">			</span><br><span class="line">			messageConsumer.setMessageListener(average);</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">&quot;Press any key to exit.&quot;</span>);</span><br><span class="line">			System.in.read();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			connection.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>ASyncConsumer_var.java</strong>（计算方差）<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Variance</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ArrayList&lt;Double&gt; p = <span class="keyword">new</span> ArrayList&lt;Double&gt;();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Variance</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.n=N;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String ss=((TextMessage)message).getText();</span><br><span class="line">			p.add(Double.valueOf(ss));</span><br><span class="line">			<span class="keyword">double</span> ave = <span class="number">0.0</span>;</span><br><span class="line">			<span class="keyword">double</span> <span class="keyword">var</span> = <span class="number">0.0</span>;</span><br><span class="line">			<span class="keyword">if</span>(p.size()&gt;=n)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">					ave += p.get(i);</span><br><span class="line">				&#125;</span><br><span class="line">				ave /= n;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">					<span class="keyword">var</span> += (p.get(i) - ave) * (p.get(i) - ave);</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;Variance：&quot;</span>+<span class="keyword">var</span>/n);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASyncConsumer_var</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> Scanner in=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">		String brokerURL = <span class="string">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class="line">		ConnectionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">		Connection connection = <span class="keyword">null</span>;</span><br><span class="line">		Session session = <span class="keyword">null</span>;</span><br><span class="line">		Topic topic = <span class="keyword">null</span>;</span><br><span class="line">		MessageConsumer messageConsumer = <span class="keyword">null</span>;</span><br><span class="line">		Variance variance=<span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">        </span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			factory = <span class="keyword">new</span> ActiveMQConnectionFactory(brokerURL);</span><br><span class="line">			connection = factory.createConnection();</span><br><span class="line">			connection.start();</span><br><span class="line">			</span><br><span class="line">			session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">			topic = session.createTopic(<span class="string">&quot;Gaussian&quot;</span>);</span><br><span class="line"></span><br><span class="line">			messageConsumer = session.createConsumer(topic);</span><br><span class="line"></span><br><span class="line">			System.out.println(<span class="string">&quot;Input N:&quot;</span>);</span><br><span class="line">			<span class="keyword">int</span> n=in.nextInt();</span><br><span class="line">			</span><br><span class="line">			variance=<span class="keyword">new</span> Variance(n);</span><br><span class="line">			messageConsumer.setMessageListener(variance);</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">&quot;Press any key to exit.&quot;</span>);</span><br><span class="line">			System.in.read();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			connection.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>ASyncConsumer_err.java</strong>（异常点检测）<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Error</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">	<span class="keyword">double</span> u=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> a=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> v=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> num=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">double</span> d = Double.valueOf(((TextMessage)message).getText());</span><br><span class="line">			sum += d;</span><br><span class="line">			num++;</span><br><span class="line">			<span class="keyword">if</span>(num&gt;<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				u=sum/num;</span><br><span class="line">				v += (d - u) * (d - u);</span><br><span class="line">				a=Math.sqrt(v/num);</span><br><span class="line">				<span class="keyword">if</span>(d&gt;u-<span class="number">3</span>*a&amp;&amp;d&lt;u+<span class="number">3</span>*a)</span><br><span class="line">				&#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;TRUE &quot;</span>+d);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ERROR &quot;</span>+d);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ASyncConsumer_err</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">		String brokerURL = <span class="string">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class="line">		ConnectionFactory factory = <span class="keyword">null</span>;</span><br><span class="line">		Connection connection = <span class="keyword">null</span>;</span><br><span class="line">		Session session = <span class="keyword">null</span>;</span><br><span class="line">		Topic topic = <span class="keyword">null</span>;</span><br><span class="line">		MessageConsumer messageConsumer = <span class="keyword">null</span>;</span><br><span class="line">		Error error=<span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			factory = <span class="keyword">new</span> ActiveMQConnectionFactory(brokerURL);</span><br><span class="line">			connection = factory.createConnection();</span><br><span class="line">			connection.start();</span><br><span class="line">			</span><br><span class="line">			session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">			topic = session.createTopic(<span class="string">&quot;Gaussian&quot;</span>);</span><br><span class="line"></span><br><span class="line">			messageConsumer = session.createConsumer(topic);</span><br><span class="line">			</span><br><span class="line">			error=<span class="keyword">new</span> Error();</span><br><span class="line">			</span><br><span class="line">			messageConsumer.setMessageListener(error);</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">&quot;Press any key to exit.&quot;</span>);</span><br><span class="line">			System.in.read();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			connection.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>开启ActiveMQ<br><img src="/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/2.png" alt="2"></li>
<li>用三个窗口分别运行ASyncConsumer_ave.java，ASyncConsumer_var.java和ASyncConsumer_err.java。<br><img src="/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/3.png" alt="3"></li>
<li>运行Publisher.java输入均值和方差<br><img src="/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/4.png" alt="4"></li>
<li>结果<br><img src="/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/5.png" alt="5"></li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>MOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|简单的Web Service</title>
    <url>/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/</url>
    <content><![CDATA[<p><strong>编写Web Service客户端程序。</strong><br><span id="more"></span></p>
<h1 id="什么是Web-Service？"><a href="#什么是Web-Service？" class="headerlink" title="什么是Web Service？"></a>什么是Web Service？</h1><ul>
<li>为方便网络上不同节点之间互操作而定义的一套协议标准， 也可视为实现远程过程调用的一套协议标准。(W3C)</li>
<li>方便了Business to Business的业务集成。可以将多个第三方服务组合成一种新的服务。</li>
<li>Web系统功能被扩展：不只是用于共享文档，不只是为“看”；Web系统也被用于节点之间的互操作。</li>
<li>客户端-服务器模式</li>
<li>跨平台、跨语言、面向接口编程</li>
<li>实现面向服务构架(SOA：Service-oriented Architecture)的重要技术之一</li>
</ul>
<h2 id="主要包含的标准协议"><a href="#主要包含的标准协议" class="headerlink" title="主要包含的标准协议"></a>主要包含的标准协议</h2><ul>
<li>消息编码标准(XML)</li>
<li>传输协议标准(HTTP、SMTP、TCP、UDP)</li>
<li>远程对象访问协议（即远程方法调用协议）：SOAP(Simple Object Access Protocol):</li>
<li>Web服务描述语言：WSDL(Web Services Description Language)  （主要描述服务接口定义）</li>
<li>服务目录、服务注册、服务发现：UDDI(Universal Discovery Description and Integration)</li>
<li>安全相关标准：签名、加密、认证等</li>
<li>服务组合、服务编排</li>
</ul>
<p><strong>SOAP</strong><br><img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/6.png" alt="6"></p>
<p><strong>WSDL与UDDI</strong><br><img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/7.png" alt="7"></p>
<h1 id="实现与调用Web-Service的流程"><a href="#实现与调用Web-Service的流程" class="headerlink" title="实现与调用Web Service的流程"></a>实现与调用Web Service的流程</h1><h2 id="服务端的实现"><a href="#服务端的实现" class="headerlink" title="服务端的实现"></a>服务端的实现</h2><ol>
<li>用常用高级编程语言（例如Java）定义Web服务接口</li>
<li>根据Java定义的Web服务接口生成WSDL（中间件自动做）</li>
<li>定义实现接口的Web服务实现类</li>
<li>将Web服务实现类绑定到Web服务器</li>
<li>将Web服务注册的UDDI中心</li>
</ol>
<h2 id="客户端的实现"><a href="#客户端的实现" class="headerlink" title="客户端的实现"></a>客户端的实现</h2><ol>
<li>从UDDI中心查找的目标Web服务的接口定义（WSDL）</li>
<li>根据WSDL生成Web服务代理类(WSDL to Java)</li>
<li>利用Web服务代理类调用Web服务接口中定义的具体方法</li>
</ol>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p><strong>题目</strong>：<br>到免费公开Web Service目录网站（如<a href="http://www.webxml.com.cn">http://www.webxml.com.cn</a>）上找到一种自己感兴趣的Web Service，如：天气预报服务、飞机航班时刻表查询服务、火车时刻表查询服务、邮政编码查询服务、中国股票行情查询、及时外汇查询等，编写一个该服务的调用客户端程序。</p>
<hr>
<p><strong>实现过程</strong><br>1.首先在Web Services的网站中找到目标Web服务的接口定义。（我选的是IP地址，主要要的是WSDL那一行）<br><img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/1.png" alt="网站"><br>拷贝网址<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ws.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx?wsdl</span><br></pre></td></tr></table></figure><br>2.打开命令行输入命令，根据WSDL生成Web服务代理类<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 你的文件夹</span><br><span class="line">wsimport -keep -p wsproxy 你拷贝的网址</span><br><span class="line">（比如：http://ws.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx?wsdl）</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/2.png" alt="ml"><br>在你的文件夹中会出现一个wsproxy文件夹<br><img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/4.png" alt="file"><br>3.利用Web服务代理类调用Web服务接口中定义的具体方法，编写客户端。这步比较麻烦，有接口说明的简单点，没有的就要根据上一步生成的文件猜测了。下面是我的，可以比较着写。<br><img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/3.png" alt="code"><br>4.最后，编译并运行客户端<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac .\wsclient\*.java</span><br><span class="line">java wsclient.CodeInfoClient</span><br><span class="line">(这里是我的客户端的位置和名称)</span><br></pre></td></tr></table></figure><br><img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/5.png" alt="end"></p>
<p>PS: 第一步的网站是免费的，但里面的网址不是都可以用的，如果第二步出错，换个网址试试</p>
<p><strong>再举个例子</strong><br>QQ在线查询<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsimport -keep -p wsproxy http://ws.webxml.com.cn/webservices/qqOnlineWebService.asmx?wsdl</span><br></pre></td></tr></table></figure><br>CodeInfoClient.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wsproxy.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeInfoClient</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        QqOnlineWebService service = <span class="keyword">new</span> QqOnlineWebService();</span><br><span class="line">        QqOnlineWebServiceSoap pService = service.getQqOnlineWebServiceSoap();</span><br><span class="line">         </span><br><span class="line">        System.out.println(pService.qqCheckOnline(<span class="string">&quot;QQ号&quot;</span>));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|操作系统</title>
    <url>/2021/04/24/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><strong>操作系统复习笔记</strong><br><span id="more"></span></p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><h3 id="1-并发性"><a href="#1-并发性" class="headerlink" title="1.并发性"></a>1.并发性</h3><ul>
<li><strong>并行性</strong>：两个或多个事件在同一时刻发生。</li>
<li><strong>并发性</strong>：两个或多个事件在同一时间间隔内发生。<h3 id="2-共享性"><a href="#2-共享性" class="headerlink" title="2.共享性"></a>2.共享性</h3></li>
</ul>
<blockquote>
<p>并发性和共享性是操作系统最基本的特征</p>
</blockquote>
<h3 id="3-虚拟性"><a href="#3-虚拟性" class="headerlink" title="3.虚拟性"></a>3.虚拟性</h3><h3 id="4-异步性"><a href="#4-异步性" class="headerlink" title="4.异步性"></a>4.异步性</h3><h2 id="操作系统的基本功能"><a href="#操作系统的基本功能" class="headerlink" title="操作系统的基本功能"></a>操作系统的基本功能</h2><h3 id="1-处理器管理"><a href="#1-处理器管理" class="headerlink" title="1. 处理器管理"></a>1. 处理器管理</h3><h3 id="2-存储器管理"><a href="#2-存储器管理" class="headerlink" title="2. 存储器管理"></a>2. 存储器管理</h3><h3 id="3-设备管理"><a href="#3-设备管理" class="headerlink" title="3. 设备管理"></a>3. 设备管理</h3><h3 id="4-文件管理"><a href="#4-文件管理" class="headerlink" title="4. 文件管理"></a>4. 文件管理</h3><h3 id="5-用户接口"><a href="#5-用户接口" class="headerlink" title="5. 用户接口"></a>5. 用户接口</h3><h2 id="操作系统的体系结构"><a href="#操作系统的体系结构" class="headerlink" title="操作系统的体系结构"></a>操作系统的体系结构</h2><h3 id="1-模块组合结构"><a href="#1-模块组合结构" class="headerlink" title="1.模块组合结构"></a>1.模块组合结构</h3><ul>
<li>优点：结构紧密，接口简单，系统效率较高</li>
<li>缺点：易导致系统结构不清晰，可扩展性差，可适应性差<blockquote>
<p>适用于系统小，模块少，使用环境比较稳定的系统</p>
</blockquote>
</li>
</ul>
<h3 id="2-层次结构"><a href="#2-层次结构" class="headerlink" title="2.层次结构"></a>2.层次结构</h3><ul>
<li>优点：结构清晰，可读性，可适应性及可靠性得到了增强，便于修改和扩充</li>
<li>缺点：需要考虑如何有效的分层<h3 id="3-微内核结构"><a href="#3-微内核结构" class="headerlink" title="3.微内核结构"></a>3.微内核结构</h3></li>
<li>优点：可靠性好，灵活性高，便于维护</li>
<li>缺点：操作系统效率不高<blockquote>
<p>适合分布式处理的计算环境</p>
</blockquote>
</li>
</ul>
<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2>]]></content>
      <tags>
        <tag>CS</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|高等数学</title>
    <url>/2019/07/16/%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<p><strong>数学学习笔记</strong><br><span id="more"></span></p>
<h1 id="高等数学"><a href="#高等数学" class="headerlink" title="高等数学"></a>高等数学</h1><h2 id="第一章-函数-极限-连续"><a href="#第一章-函数-极限-连续" class="headerlink" title="第一章 函数 极限 连续"></a>第一章 函数 极限 连续</h2><h3 id="一-需要区分左右极限的情形"><a href="#一-需要区分左右极限的情形" class="headerlink" title="一. 需要区分左右极限的情形"></a>一. <strong>需要区分左右极限的情形</strong></h3><p>1) 分段函数的分段点出（包含带有绝对值的情形）；<br>2) $e^{\infty}$型：$e^{+\infty} \rightarrow +\infty$；$e^{-\infty} \rightarrow 0$；<br>3) $arctan\infty$型：$arctan(+\infty)=\frac{\pi}{2}$;$arctan(-\infty)=-\frac{\pi}{2}$;</p>
<h3 id="二-极限的运算性质-P04"><a href="#二-极限的运算性质-P04" class="headerlink" title="二. 极限的运算性质(P04)"></a>二. <strong>极限的运算性质</strong>(P04)</h3><p>1) 若$\lim f(x)$存在，$\lim g(x)$不存在，则$\lim [f(x) \pm g(x)]$不存在<br>2) 若$\lim f(x)$不存在，$\lim g(x)$不存在，则$\lim [f(x) \pm g(x)]$不一定不存在</p>
<h3 id="三-求函数极限-P05"><a href="#三-求函数极限-P05" class="headerlink" title="三. 求函数极限(P05)"></a>三. <strong>求函数极限</strong>(P05)</h3><p>1) 常用的等价无穷小$x \rightarrow 0$<br>$\sin x \sim x, \arcsin x \sim x, \tan x \sim x, \arctan x \sim x, \ln (1+x) \sim x, e^{x}-1 \sim x, 1-\cos x \sim \frac{1}{2} x^{2},(1+x)^{\alpha}-1 \sim \alpha x, a^{x}-1 \sim x \ln a$</p>
<blockquote>
<p><strong>注</strong>：等价代换只能在乘除运算中使用.<br>2) $x \rightarrow 0$ 时 $, \quad x-\sin x \sim \frac{1}{6} x^{3}, \tan x-x \sim \frac{1}{3} x^{3}, x-\ln (1+x) \sim \frac{1}{2} x^{2}$<br>3) $0^{0}, \infty^{0}$型.常用方法：$\lim u(x)^{v(x)}=\lim e^{v(x) \ln u(x)}$<br>4) $1^\infty$型.常用方法：$\lim u(x)^{v(x)}=e^{A}$，其中 $A=\lim v(x)[u(x)-1]$<br>5) <strong>泰勒公式</strong></p>
<p>$\sin x=x-\frac{1}{6} x^{3}+o\left(x^{3}\right), \quad \cos x=1-\frac{1}{2 !} x^{2}+\frac{1}{4 !} x^{4}+o\left(x^{4}\right)$<br>$\arcsin x=x+\frac{1}{6} x^{3}+o\left(x^{3}\right), \quad \tan x=x+\frac{1}{3} x^{3}+o\left(x^{3}\right)$<br>$\arctan x=x-\frac{1}{3} x^{3}+o\left(x^{3}\right), \quad \ln (1+x)=x-\frac{1}{2} x^{2}+\frac{1}{3} x^{3}+o\left(x^{3}\right)$<br>$e^{x}=1+x+\frac{1}{2} x^{2}+\frac{1}{6} x^{3}+o\left(x^{3}\right)$<br>$(1+x)^{\alpha}=1+\alpha x+\frac{\alpha(\alpha-1)}{2 !} x^{2}+o\left(x^{2}\right)$</p>
</blockquote>
<h3 id="四-连续与间断"><a href="#四-连续与间断" class="headerlink" title="四. 连续与间断"></a>四. <strong>连续与间断</strong></h3><p>1) 间断点的分类<br>左右极限都存在的间断点称为第一类间断点；<br>左右极限至少一个不存在的间断点称为第二类间断点；<br>其中左右极限都存在且相等的间断点称为<strong>可去间断点</strong>，<br>左右极限都存在但不相等的间断点称为<strong>跳跃间断点</strong>;</p>
<h3 id="五-闭区间上的连续函数性质"><a href="#五-闭区间上的连续函数性质" class="headerlink" title="五.闭区间上的连续函数性质"></a>五.<strong>闭区间上的连续函数性质</strong></h3><ol>
<li>有界性</li>
<li>最大值最小值</li>
<li>介值定理</li>
<li>零点定理</li>
</ol>
<h2 id="第二章-导数与微分"><a href="#第二章-导数与微分" class="headerlink" title="第二章 导数与微分"></a>第二章 导数与微分</h2><h3 id="一-导数的几何意义"><a href="#一-导数的几何意义" class="headerlink" title="一. 导数的几何意义"></a>一. <strong>导数的几何意义</strong></h3><p>$y=f(x)$在$x_{0}$处的导数$f^{\prime}\left(x_{0}\right)$就是曲线$y=f(x)$在点$\left(x_{0}, f\left(x_{0}\right)\right)$的切线斜率k，则：<br>切线方程是$y-f\left(x_{0}\right)=f^{\prime}\left(x_{0}\right)\left(x-x_{0}\right)$<br>法线方程是$y-f\left(x_{0}\right)=-\frac{1}{f^{\prime}\left(x_{0}\right)}\left(x-x_{0}\right) \quad\left(f^{\prime}\left(x_{0}\right) \neq 0\right)$</p>
<h3 id="二-连续、可导、可微之间的关系"><a href="#二-连续、可导、可微之间的关系" class="headerlink" title="二. 连续、可导、可微之间的关系"></a>二. <strong>连续、可导、可微之间的关系</strong></h3><p><strong>连续未必可导；可导一定连续；可导等价可微.</strong></p>
<h3 id="三-导数与微分的计算"><a href="#三-导数与微分的计算" class="headerlink" title="三. 导数与微分的计算"></a>三. <strong>导数与微分的计算</strong></h3><h4 id="1-基本公式法"><a href="#1-基本公式法" class="headerlink" title="1.基本公式法"></a>1.基本公式法</h4><blockquote>
<p>$\left(x^{\mu}\right)^{\prime}=\mu x^{\mu-1} ;\left(a^{x}\right)^{\prime}=a^{x} \ln a,\left(e^{x}\right)^{\prime}=e^{x} ;\left(\log _{a} x\right)^{\prime}=\frac{1}{x \ln a}(a&gt;0, a \neq 1),(\ln x)^{\prime}=\frac{1}{x}$<br>$(\sin x)^{\prime}=\cos x,(\cos x)^{\prime}=-\sin x,(\tan x)^{\prime}=\sec ^{2} x,(\cot x)^{\prime}=-\csc ^{2} x$<br>$(\sec x)^{\prime}=\sec x \tan x,(\csc x)^{\prime}=-\csc x \cot x ;(\arcsin x)^{\prime}=\frac{1}{\sqrt{1-x^{2}}},(\arccos x)^{\prime}=-\frac{1}{\sqrt{1-x^{2}}}$<br>$(\arctan x)^{\prime}=\frac{1}{1+x^{2}},(\operatorname{arccot} x)^{\prime}=-\frac{1}{1+x^{2}} ;\left[\ln \left(x+\sqrt{x^{2}+1}\right)\right]^{\prime}=\frac{1}{\sqrt{x^{2}+1}}$</p>
</blockquote>
<h4 id="2-有理函数运算法则"><a href="#2-有理函数运算法则" class="headerlink" title="2. 有理函数运算法则"></a>2. 有理函数运算法则</h4><p>设$u，v$均可导，则$(u \pm v)^{\prime}=u^{\prime} \pm v^{\prime},(u v)^{\prime}=u^{\prime} v+u v^{\prime},\left(\frac{u}{v}\right)^{\prime}=\frac{u^{\prime} v-u v^{\prime}}{v^{2}}(v \neq 0)$</p>
<h4 id="3-复合函数求导法"><a href="#3-复合函数求导法" class="headerlink" title="3. 复合函数求导法"></a>3. 复合函数求导法</h4><h4 id="4-反函数求导法"><a href="#4-反函数求导法" class="headerlink" title="4. 反函数求导法"></a>4. 反函数求导法</h4><h4 id="5-隐函数求导法"><a href="#5-隐函数求导法" class="headerlink" title="5. 隐函数求导法"></a>5. 隐函数求导法</h4><h4 id="6-参数方程求导法"><a href="#6-参数方程求导法" class="headerlink" title="6. 参数方程求导法"></a>6. 参数方程求导法</h4><h4 id="7-高阶导数（莱布尼茨公式）"><a href="#7-高阶导数（莱布尼茨公式）" class="headerlink" title="7. 高阶导数（莱布尼茨公式）"></a>7. 高阶导数（莱布尼茨公式）</h4><p>$(u \pm v)^{(n)}=u^{(n)} \pm v^{(n)},(k u)^{(n)}=k u^{(n)},(u v)^{(n)}=\sum_{k=0}^{n} C_{n}^{k} u^{(n-k)} v^{(k)}$</p>
<blockquote>
<p>常用高阶导数<br>$\begin{array}{l}<br>\left(e^{a x+b}\right)^{(n)}=a^{n} e^{a x+b} \\<br>{[\sin (a x+b)]^{(n)}=a^{n} \sin \left(a x+b+\frac{n \pi}{2}\right)} \\<br>{[\cos (a x+b)]^{(n)}=a^{n} \cos \left(a x+b+\frac{n \pi}{2}\right)} \\<br>{[\ln (a x+b)]^{(n)}=(-1)^{n-1} a^{n} \frac{(n-1) !}{(a x+b)^{n}}} \\<br>\left(\frac{1}{a x+b}\right)^{(n)}=(-1)^{n} a^{n} \frac{n !}{(a x+b)^{n+1}}<br>\end{array}$</p>
</blockquote>
<h2 id="函数中值定理"><a href="#函数中值定理" class="headerlink" title="函数中值定理"></a>函数中值定理</h2><p>设$f(x)$在$[a,b]$上连续</p>
<h3 id="一、有界与最值定理"><a href="#一、有界与最值定理" class="headerlink" title="一、有界与最值定理"></a>一、有界与最值定理</h3><h3 id="二、介值定理"><a href="#二、介值定理" class="headerlink" title="二、介值定理"></a>二、介值定理</h3><h3 id="三、平均值定理"><a href="#三、平均值定理" class="headerlink" title="三、平均值定理"></a>三、平均值定理</h3><h3 id="四、零点定理"><a href="#四、零点定理" class="headerlink" title="四、零点定理"></a>四、零点定理</h3><h2 id="微分中值定理"><a href="#微分中值定理" class="headerlink" title="微分中值定理"></a>微分中值定理</h2><h3 id="一、-罗尔定理"><a href="#一、-罗尔定理" class="headerlink" title="一、 罗尔定理"></a>一、 <strong>罗尔定理</strong></h3><p>设${f(a)}$满足$\left\{\begin{array}{l}{[a, b]上连续} \\ {(a, b)内可导} \\ {f(a)=f(b)}\end{array}\right.$，则$\exists \xi \in(a, b), \quad 使f^{\prime}(\xi)=0$</p>
<h3 id="二、拉格朗日中值定理"><a href="#二、拉格朗日中值定理" class="headerlink" title="二、拉格朗日中值定理"></a>二、<strong>拉格朗日中值定理</strong></h3><p>设${f(a)}$满足$\left\{\begin{array}{l}{[a, b]上连续} \\ {(a, b)内可导}\end{array}\right.$，则$\exists \xi \in(a, b), f(b)-f(a)=f^{\prime}(\xi)(b-a)$</p>
<h3 id="三、柯西中值定理"><a href="#三、柯西中值定理" class="headerlink" title="三、柯西中值定理"></a>三、<strong>柯西中值定理</strong></h3><p>设${f(a)、g(a)}$满足$\left\{\begin{array}{l}{[a, b]上连续} \\ {(a, b)内可导} \\ {g^{\prime}(x) \neq 0}\end{array}\right.$，则$\exists \xi \in(a, b), \quad 使 \frac{f(b)-f(a)}{g(b)-g(a)}=\frac{f^{\prime}(\xi)}{g^{\prime}(\xi)}$</p>
<h3 id="四、泰勒公式"><a href="#四、泰勒公式" class="headerlink" title="四、泰勒公式"></a>四、泰勒公式</h3><h4 id="1-拉格朗日余项"><a href="#1-拉格朗日余项" class="headerlink" title="1.拉格朗日余项"></a>1.拉格朗日余项</h4><p>$f(x)=f\left(x_{0}\right)+f^{\prime}\left(x_{0}\right)\left(x-x_{0}\right)+\cdots+\frac{1}{n !} f^{(n)}\left(x_{0}\right)\left(x-x_{0}\right)^{n}+\frac{1}{(n+1) !} f^{(n+1)}(\xi)\left(x-x_{0}\right)^{n+1}$</p>
<h4 id="2-佩亚诺余项"><a href="#2-佩亚诺余项" class="headerlink" title="2.佩亚诺余项"></a>2.佩亚诺余项</h4><p>$f(x)=f\left(x_{0}\right)+f^{\prime}\left(x_{0}\right)\left(x-x_{0}\right)+\cdots+\frac{1}{n !} f^{(n)}\left(x_{0}\right)\left(x-x_{0}\right)^{n}+o\left(\left(x-x_{0}\right)^{n}\right)$</p>
<h2 id="导数的应用"><a href="#导数的应用" class="headerlink" title="导数的应用"></a>导数的应用</h2><h3 id="一-拐点"><a href="#一-拐点" class="headerlink" title="一. 拐点"></a>一. <strong>拐点</strong></h3><p><img src="/2019/07/16/%E6%95%B0%E5%AD%A6/1.png" alt="1"></p>
<h3 id="二-凹凸性的判定"><a href="#二-凹凸性的判定" class="headerlink" title="二. 凹凸性的判定"></a>二. 凹凸性的判定</h3><p><img src="/2019/07/16/%E6%95%B0%E5%AD%A6/2.png" alt="2"></p>
<h2 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h2><!-- ## 导数与微分
一. 

二. 

三. 

四. 

五. 

六. 

七.  -->]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|思想政治理论</title>
    <url>/2021/05/07/%E6%94%BF%E6%B2%BB/</url>
    <content><![CDATA[<p><strong>政治学习笔记</strong><br><span id="more"></span></p>
<style>

.t1 {
  display: block;
  line-height: 1.4;
  text-align: justify;
  text-indent: 2em;
}
</style>

<h1 id="一-马克思主义是关于无产阶级和人类解放的科学"><a href="#一-马克思主义是关于无产阶级和人类解放的科学" class="headerlink" title="一 马克思主义是关于无产阶级和人类解放的科学"></a>一 马克思主义是关于无产阶级和人类解放的科学</h1><h2 id="1-什么是马克思主义"><a href="#1-什么是马克思主义" class="headerlink" title="1 什么是马克思主义"></a>1 什么是马克思主义</h2><p><strong>创立人：</strong></p>
<p class="t1">马克思、恩格斯创立并为后继者所不断发展的科学理论体系</p>

<p><strong>研究对象：</strong></p>
<p></p><p class="t1">由自然、社会和人类思维发展一般规律的学说</p>
<p><strong>主要内容：</strong></p>
<p></p><p class="t1">关于社会主义必然代替资本主义、最终实现共产主义的学说</p>
<p><strong>奋斗目标：</strong></p>
<p></p><p class="t1">关于无产阶级解放、全人类解放和每个人自由而又全面的发展的学说</p>
<p><strong>现实意义：</strong></p>
<p></p><p class="t1">指引人民创造美好生活的行动指南</p>
<blockquote>
<p><strong>三个基本组成部分：</strong><br>马克思主义哲学、马克思主义政治经济学、科学社会主义</p>
</blockquote>
<h2 id="2-马克思主义的产生"><a href="#2-马克思主义的产生" class="headerlink" title="2 马克思主义的产生"></a>2 马克思主义的产生</h2><p>社会根源：<br>资本主义经济的发展为马克思主义的产生提供了经济、社会历史条件</p>
<p>阶级基础：<br>无产阶级反抗资产阶级剥削和压迫的斗争中，逐步走向自觉，并迫切渴望科学的理论指导</p>
<p>直接理论来源：<br>德国古典哲学、英国古典政治经济学、英法空想社会主义</p>
<p>自然科学前提：<br>细胞学说、能量守恒与转化定律、生物进化论</p>
<h2 id="3-马克思主义的发展"><a href="#3-马克思主义的发展" class="headerlink" title="3 马克思主义的发展"></a>3 马克思主义的发展</h2><ol>
<li><p>马克思主义在俄国的发展</p>
</li>
<li><p>马克思列宁主义在中国的发展</p>
</li>
</ol>
<h2 id="4-马克思主义的鲜明特征"><a href="#4-马克思主义的鲜明特征" class="headerlink" title="4 马克思主义的鲜明特征"></a>4 马克思主义的鲜明特征</h2><p>科学性：<br>对自然、社会和人类思维发展本质和规律的正确认识</p>
<p>革命性：<br>彻底的批判精神和鲜明的无产阶级立场</p>
<p>实践性：<br>从实践中来，到实践中去，在实践中接受检验，并随实践而不断发展的学说</p>
<p>人民性：<br>人民至上的政治立场</p>
<p>发展开放性：<br>不断发展的学说，具有与时俱进的理论品质</p>
<h1 id="二、世界的物质性及其发展规律"><a href="#二、世界的物质性及其发展规律" class="headerlink" title="二、世界的物质性及其发展规律"></a>二、世界的物质性及其发展规律</h1><h2 id="1-世界多样性与物质统一性"><a href="#1-世界多样性与物质统一性" class="headerlink" title="1 世界多样性与物质统一性"></a>1 世界多样性与物质统一性</h2><h3 id="1-1-哲学基本问题及其内容"><a href="#1-1-哲学基本问题及其内容" class="headerlink" title="1.1 哲学基本问题及其内容"></a>1.1 哲学基本问题及其内容</h3><blockquote>
<p>恩格斯<strong>第一次</strong>明确指出“全部哲学，特别是近代哲学的重大的基本问题，是思维和存在的关系问题。”</p>
</blockquote>
<p>$哲学基本问题的两个方面\left\{\begin{array}{l}{物质和意识何者为第一性\left\{\begin{array}{l}{唯物主义\left\{\begin{array}{l}{古代朴素唯物主义}\\{近代形而上学唯物主义}\\{现代辩证唯物主义}\end{array}\right.}\\{唯心主义\left\{\begin{array}{l}{主观唯心}\\{客观唯心}\end{array}\right.}\end{array}\right.} \\ {物质和意识是否具有同一性\left\{\begin{array}{l}{可知论\left\{\begin{array}{l}{唯物主义}\\{彻底的唯心主义}\end{array}\right.}\\{不可知论\left\{\begin{array}{l}{不彻底的唯心主义}\end{array}\right.}\end{array}\right.}\end{array}\right.$</p>
<blockquote>
<p><strong>主观唯心主义</strong>：把人的主观精神（如人的目的、意识、感觉、经验等）当作世界的本原<br><br><strong>客观唯心主义</strong>：把客观精神（如上帝、理念、绝对精神等）看做世界的本源</p>
</blockquote>
<p>哲学除了回答世界的本原是什么的问题，还要回答世界是怎样存在的问题。</p>
<p><strong>辩证法：</strong><br><br>坚持用联系的、发展的、全面的观点看问题，认为发展的根本原因在于事物的内部矛盾。</p>
<p><strong>形而上学：</strong><br><br>坚持用孤立的、静止的、片面的观点看问题，否认事物内部矛盾的存在和作用。</p>
<h3 id="1-2-物质与意识的辩证关系"><a href="#1-2-物质与意识的辩证关系" class="headerlink" title="1.2 物质与意识的辩证关系"></a>1.2 物质与意识的辩证关系</h3><h4 id="1）马克思主义的物质范畴及理论意义"><a href="#1）马克思主义的物质范畴及理论意义" class="headerlink" title="1）马克思主义的物质范畴及理论意义"></a>1）马克思主义的物质范畴及理论意义</h4><p>$物质\left\{\begin{array}{l}{古代朴素唯物主义：物质的具体形态}\\{近代形而上学唯物主义：原子}\\{现代辩证唯物主义：客观实在性}\end{array}\right.$</p>
<blockquote>
<p>“物质是标志客观实在的哲学范畴，这种客观实在是人通过感觉感知的，它不依赖于我们的感觉而存在，为我们的感觉所复写、摄影和反映。” ——列宁</p>
</blockquote>
<h4 id="2）物质的根本属性和物质运动的存在形式"><a href="#2）物质的根本属性和物质运动的存在形式" class="headerlink" title="2）物质的根本属性和物质运动的存在形式"></a>2）物质的根本属性和物质运动的存在形式</h4><p>物质的根本属性是<strong>运动</strong>。</p>
<p>运动定义：运动是标志一切事物和现象变化及其过程的哲学范畴。</p>
<p>物质和运动的关系：不可分割的。</p>
<ol>
<li>运动是物质的存在方式和根本属性，物质是运动着的物质，脱离运动的物质是不存在的，<br>设想不运动的物质，将导致形而上学。</li>
<li>物质是一切运动变化和发展过程的实在基础和承担者，世界上没有离开物质的运动，任何形式的运动都有它的物质载体，设想无物质的运动，将导致唯心主义。</li>
</ol>
<p>静止定义：静止是物质运动在一定条件下的稳定状态，包括空间位置和根本性质暂时未变这样两种运动的<strong>特殊状态</strong>。</p>
<p>运动和静止的关系：<strong>对立统一</strong>。</p>
<p>相互区别：运动是绝对的、无条件的。静止是相对的、有条件的。</p>
<p>相互联系：运动和静止相互依赖、相互渗透、相互包含“动中有静，静中有动”</p>
<h3 id="1-3-世界物质统一性原理及其意义"><a href="#1-3-世界物质统一性原理及其意义" class="headerlink" title="1.3 世界物质统一性原理及其意义"></a>1.3 世界物质统一性原理及其意义</h3>]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|机器学习</title>
    <url>/2019/06/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><strong>目前学习的机器学习知识点总结</strong><br><span id="more"></span></p>
<h1 id="Perceptron"><a href="#Perceptron" class="headerlink" title="Perceptron"></a>Perceptron</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>感知机(Perceptron)</strong> 由两层神经元组成。输入层接收外界输入信号后传递给输出层， 输出层是M-P 神经元，亦称”阔值逻辑单元” (threshold logic unit)。</p>
<h2 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h2><p><img src="/2019/06/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.png" alt="p"><br>可以看到，一个感知器有如下组成部分：</p>
<ul>
<li><strong>输入权值</strong> 一个感知器可以接收多个输入$\left(x_{1}, x_{2}, \ldots, x_{n} | x_{i} \in \mathfrak{R}\right)$，每个输入上有一个<strong>权值</strong>$w_{i} \in \Re$，此外还有一个<strong>偏置项</strong>$b \in \mathfrak{R}$，就是上图中的$w_{0}$。</li>
<li><strong>激活函数</strong> 感知器的激活函数可以有很多选择，比如我们可以选择下面这个<strong>阶跃函数</strong>$f$来作为激活函数：<script type="math/tex; mode=display">f(z)=\left\{\begin{array}{ll}{1} & {z>0} \\ {0} & {\text { otherwise }}\end{array}\right.</script></li>
<li><strong>输出</strong> 感知器的输出由下面这个公式来计算<script type="math/tex; mode=display">y=f(w \bullet x+b) \quad 公式1</script></li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong>感知器训练算法</strong>：将权重项和偏置项初始化，然后，利用下面的感知器规则迭代修改$w_{i}$和$b$，直到训练完成。</p>
<script type="math/tex; mode=display">\begin{array}{c}{w_{i} \leftarrow w_{i}+\Delta w_{i}} \\ {b \leftarrow b+\Delta b}\end{array}</script><p>其中</p>
<script type="math/tex; mode=display">\begin{aligned} \Delta w_{i} &=\eta(y-y_{'}) x_{i} \\ \Delta b &=\eta(y-y_{'}) \end{aligned}</script><p>$w_{i}$是与输入$x_{i}$对应的权重项，是$b$偏置项。$y$是训练样本的实际值。而$y_{‘}$是感知器的输出值，它是根据公式(1)计算得出。$\eta$是一个称为学习速率的常数，其作用是控制每一步调整权的幅度。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VectorOp</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现向量计算操作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dot</span>(<span class="params">x, y</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算两个向量x和y的内积</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 首先把x[x1,x2,x3...]和y[y1,y2,y3,...]按元素相乘</span></span><br><span class="line">        <span class="comment"># 变成[x1*y1, x2*y2, x3*y3]</span></span><br><span class="line">        <span class="comment"># 然后利用reduce求和</span></span><br><span class="line">        <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> a, b: a + b, VectorOp.element_multiply(x, y), <span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">element_multiply</span>(<span class="params">x, y</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将两个向量x和y按元素相乘</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 首先把x[x1,x2,x3...]和y[y1,y2,y3,...]打包在一起</span></span><br><span class="line">        <span class="comment"># 变成[(x1,y1),(x2,y2),(x3,y3),...]</span></span><br><span class="line">        <span class="comment"># 然后利用map函数计算[x1*y1, x2*y2, x3*y3]</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x_y: x_y[<span class="number">0</span>] * x_y[<span class="number">1</span>], <span class="built_in">zip</span>(x, y)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">element_add</span>(<span class="params">x, y</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将两个向量x和y按元素相加</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 首先把x[x1,x2,x3...]和y[y1,y2,y3,...]打包在一起</span></span><br><span class="line">        <span class="comment"># 变成[(x1,y1),(x2,y2),(x3,y3),...]</span></span><br><span class="line">        <span class="comment"># 然后利用map函数计算[x1+y1, x2+y2, x3+y3]</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x_y: x_y[<span class="number">0</span>] + x_y[<span class="number">1</span>], <span class="built_in">zip</span>(x, y)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">scala_multiply</span>(<span class="params">v, s</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将向量v中的每个元素和标量s相乘</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>(<span class="keyword">lambda</span> e: e * s, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perceptron</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, input_num, activator</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化感知器，设置输入参数的个数，以及激活函数。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.activator = activator</span><br><span class="line">        <span class="comment"># 权重向量初始化为0</span></span><br><span class="line">        self.weights = [<span class="number">0.0</span>] * input_num</span><br><span class="line">        <span class="comment"># 偏置项初始化为0</span></span><br><span class="line">        self.bias = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印学习到的权重、偏置项</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;weights\t:%s\nbias\t:%f\n&#x27;</span> % (self.weights, self.bias)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, input_vec</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        输入向量，输出感知器的计算结果</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 计算向量input_vec[x1,x2,x3...]和weights[w1,w2,w3,...]的内积</span></span><br><span class="line">        <span class="comment"># 然后加上bias</span></span><br><span class="line">        <span class="keyword">return</span> self.activator(VectorOp.dot(input_vec, self.weights) + self.bias)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">self, input_vecs, labels, iteration, rate</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        输入训练数据：一组向量、与每个向量对应的label；以及训练轮数、学习率</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iteration):</span><br><span class="line">            self._one_iteration(input_vecs, labels, rate)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_one_iteration</span>(<span class="params">self, input_vecs, labels, rate</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        一次迭代，把所有的训练数据过一遍</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 把输入和输出打包在一起，成为样本的列表[(input_vec, label), ...]</span></span><br><span class="line">        <span class="comment"># 而每个训练样本是(input_vec, label)</span></span><br><span class="line">        samples = <span class="built_in">zip</span>(input_vecs, labels)</span><br><span class="line">        <span class="comment"># 对每个样本，按照感知器规则更新权重</span></span><br><span class="line">        <span class="keyword">for</span> (input_vec, label) <span class="keyword">in</span> samples:</span><br><span class="line">            <span class="comment"># 计算感知器在当前权重下的输出</span></span><br><span class="line">            output = self.predict(input_vec)</span><br><span class="line">            <span class="comment"># 更新权重</span></span><br><span class="line">            self._update_weights(input_vec, output, label, rate)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_update_weights</span>(<span class="params">self, input_vec, output, label, rate</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        按照感知器规则更新权重</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 首先计算本次更新的delta</span></span><br><span class="line">        <span class="comment"># 然后把input_vec[x1,x2,x3,...]向量中的每个值乘上delta，得到每个权重更新</span></span><br><span class="line">        <span class="comment"># 最后再把权重更新按元素加到原先的weights[w1,w2,w3,...]上</span></span><br><span class="line">        delta = label - output</span><br><span class="line">        self.weights = VectorOp.element_add(</span><br><span class="line">            self.weights, VectorOp.scala_multiply(input_vec, rate * delta))</span><br><span class="line">        <span class="comment"># 更新bias</span></span><br><span class="line">        self.bias += rate * delta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义激活函数f</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<!-- # MLP -->
<!-- # SVM
# CNN
# KNN
# GAN
# 自编码器

****
# 参考资料
[1] 《机器学习》 周志华
[2]  [感知器](https://www.zybuluo.com/hanbingtao/note/433855)
[] 
[] 
[] 
[] 
[] 
[]  -->
]]></content>
      <tags>
        <tag>NOTE</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>English|学习总结</title>
    <url>/2019/10/02/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<p><strong>单词，短语，长难句。Day Day up</strong><br><span id="more"></span></p>
<h1 id="2019-10-1"><a href="#2019-10-1" class="headerlink" title="2019.10.1"></a>2019.10.1</h1><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><div class="table-container">
<table>
<thead>
<tr>
<th>词汇</th>
<th>词性</th>
<th>词义</th>
</tr>
</thead>
<tbody>
<tr>
<td>insightful</td>
<td>adj</td>
<td>富有洞察力的</td>
</tr>
<tr>
<td>provocative</td>
<td>adj</td>
<td>煽动性的</td>
</tr>
<tr>
<td>rear</td>
<td>v</td>
<td>养育</td>
</tr>
<tr>
<td>fulfilling</td>
<td>adj</td>
<td>令人心满意足的</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>例句:Nothing gets people talking like the suggestion that child rearing is anything less than a completely fulfilling,life-enriching experience.</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>词汇</th>
<th>词性</th>
<th>词义</th>
</tr>
</thead>
<tbody>
<tr>
<td>misable</td>
<td>adj</td>
<td>痛苦的</td>
</tr>
<tr>
<td>raise</td>
<td>v</td>
<td>养育</td>
</tr>
<tr>
<td>crushingly</td>
<td>adv</td>
<td>（强调不好的）及其</td>
</tr>
<tr>
<td>dampen</td>
<td>v</td>
<td>抑制，弄湿</td>
</tr>
<tr>
<td>gratification</td>
<td>n</td>
<td>喜悦</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>例句:The very things that in the moment dampen our moods can latter be sources of intense gratification and delight.</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>词汇</th>
<th>词性</th>
<th>词义</th>
</tr>
</thead>
<tbody>
<tr>
<td>newsstand</td>
<td>n</td>
<td>报摊</td>
</tr>
<tr>
<td>feature</td>
<td>v</td>
<td>特写</td>
</tr>
<tr>
<td>celebrity</td>
<td>n</td>
<td>名人</td>
</tr>
<tr>
<td>persistently</td>
<td>adv</td>
<td>持续地</td>
</tr>
<tr>
<td>celebrate</td>
<td>v</td>
<td>称赞</td>
</tr>
<tr>
<td>procreation</td>
<td>n</td>
<td>生育</td>
</tr>
<tr>
<td>provoke</td>
<td>v</td>
<td>激起，引起</td>
</tr>
<tr>
<td>misery</td>
<td>n</td>
<td>不幸</td>
</tr>
<tr>
<td>gaping</td>
<td>adj</td>
<td>张开</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>例句:Obviously their misery must be a direct result of the the gaping baby-size holes in their lives.</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>词汇</th>
<th>词性</th>
<th>词义</th>
</tr>
</thead>
<tbody>
<tr>
<td>dumb</td>
<td>adj</td>
<td>愚蠢的</td>
</tr>
<tr>
<td>glamorous</td>
<td>adj</td>
<td>令人向往的</td>
</tr>
<tr>
<td>subconscious</td>
<td>adj</td>
<td>下意识的</td>
</tr>
<tr>
<td>retrospect</td>
<td>n</td>
<td>回顾</td>
</tr>
<tr>
<td>permanent</td>
<td>adj</td>
<td>永久的</td>
</tr>
<tr>
<td>soothing</td>
<td>adj</td>
<td>使人宽心的</td>
</tr>
<tr>
<td>ambiguous</td>
<td>adj</td>
<td>含糊的</td>
</tr>
<tr>
<td>compensatory</td>
<td>adj</td>
<td>补偿的</td>
</tr>
<tr>
<td>misleading</td>
<td>adj</td>
<td>误导的</td>
</tr>
<tr>
<td>neglect</td>
<td>v/n</td>
<td>忽视</td>
</tr>
</tbody>
</table>
</div>
<h2 id="短语"><a href="#短语" class="headerlink" title="短语"></a>短语</h2><div class="table-container">
<table>
<thead>
<tr>
<th>短语</th>
<th>词义</th>
</tr>
</thead>
<tbody>
<tr>
<td>arouse much chatter</td>
<td>引起人们议论纷纷</td>
</tr>
<tr>
<td>less than</td>
<td>一点也不</td>
</tr>
<tr>
<td>it is wonder(that)…</td>
<td>这有什么奇怪的</td>
</tr>
<tr>
<td>be equivalent to sth/doing</td>
<td>等同于</td>
</tr>
<tr>
<td>be bothered with sth</td>
<td>因…而烦恼</td>
</tr>
<tr>
<td>lean on</td>
<td>依靠</td>
</tr>
<tr>
<td>in a small way</td>
<td>不明显</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2019-10-2"><a href="#2019-10-2" class="headerlink" title="2019.10.2"></a>2019.10.2</h1><div class="table-container">
<table>
<thead>
<tr>
<th>词汇</th>
<th>词性</th>
<th>词义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Philharmonic</td>
<td>n</td>
<td>爱乐乐团</td>
</tr>
<tr>
<td>favorable</td>
<td>adj</td>
<td>表扬的</td>
</tr>
<tr>
<td>casual</td>
<td>adj</td>
<td>随便的</td>
</tr>
<tr>
<td>contend</td>
<td>v</td>
<td>主张</td>
</tr>
</tbody>
</table>
</div>
<h1 id="2019-10-16"><a href="#2019-10-16" class="headerlink" title="2019.10.16"></a>2019.10.16</h1><div class="table-container">
<table>
<thead>
<tr>
<th>词汇</th>
<th>词性</th>
<th>词义</th>
<th>其他</th>
</tr>
</thead>
<tbody>
<tr>
<td>assume</td>
<td>v.</td>
<td>假设</td>
</tr>
<tr>
<td>account</td>
<td>n./v.</td>
<td>账户/认为</td>
<td>an agreed account of human rights(对人类权力的共同认识) account for(解释) on account(以赊欠的方式) on acount of(由于) on no account(绝不) on one’s own account(独自) take into account(考虑)</td>
</tr>
<tr>
<td>philosopher</td>
<td>n.</td>
<td>哲学家</td>
</tr>
<tr>
<td>argue</td>
<td>v.</td>
<td>主张，论证</td>
</tr>
<tr>
<td>contract</td>
<td>n./v.</td>
<td>契约/签订合同</td>
</tr>
<tr>
<td>entitlement</td>
<td>n.</td>
<td>权利</td>
</tr>
<tr>
<td>extreme</td>
<td>n./adj.</td>
<td>极端</td>
</tr>
<tr>
<td>outset</td>
<td>n.</td>
<td>开端</td>
</tr>
<tr>
<td>consideration</td>
<td>n.</td>
<td>关心，体贴</td>
</tr>
<tr>
<td>extend</td>
<td>v.</td>
<td>延长，给予</td>
</tr>
<tr>
<td>relevant</td>
<td>adj.</td>
<td>相关的</td>
</tr>
<tr>
<td>moral</td>
<td>adj.</td>
<td>道德上的</td>
</tr>
<tr>
<td>instinct</td>
<td>n.</td>
<td>本能，直觉</td>
</tr>
<tr>
<td>reasoning</td>
<td>n.</td>
<td>推理</td>
</tr>
</tbody>
</table>
</div>
<!-- 
## 单词
词汇|词性|词义
-|-|-


>例句:
## 短语
短语|词义
-|-
-->]]></content>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|《深入理解计算机系统》</title>
    <url>/2021/05/05/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p><strong>读书笔记</strong><br><span id="more"></span></p>
]]></content>
      <tags>
        <tag>CS</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|网络程序设计</title>
    <url>/2019/06/14/%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p><strong>网络程序设计简单的总结</strong><br><strong>ψ(｀∇´)ψ</strong><br><span id="more"></span></p>
<h1 id="Linux-编程基础"><a href="#Linux-编程基础" class="headerlink" title="Linux 编程基础"></a>Linux 编程基础</h1><h2 id="C语言编译"><a href="#C语言编译" class="headerlink" title="C语言编译"></a>C语言编译</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc hello.c –o hello </span><br></pre></td></tr></table></figure>
<h2 id="Linux常用网络调试命令"><a href="#Linux常用网络调试命令" class="headerlink" title="Linux常用网络调试命令"></a>Linux常用网络调试命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看网络配置（网卡）</span><br><span class="line">ifconfig</span><br><span class="line">查看所有网络连接状态</span><br><span class="line">nestat – a</span><br><span class="line">查看TCP协议网络连接状态</span><br><span class="line">netstat –t</span><br><span class="line">查看网络连接所属进程PID</span><br><span class="line">netstat -p</span><br><span class="line">检查网络是否可达</span><br><span class="line">ping 127.0.0.1 </span><br></pre></td></tr></table></figure>
<h2 id="Linux操作基础"><a href="#Linux操作基础" class="headerlink" title="Linux操作基础"></a>Linux操作基础</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls 显示当前目录中的内容 </span><br><span class="line">ls －l</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 切换目录</span><br><span class="line">cd /mnt/usb</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir 创建目录</span><br><span class="line">mkdir work</span><br><span class="line">rmdir 删除目录</span><br><span class="line">rmdir work</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp 复制文件</span><br><span class="line">cp prog1.c prog2.c</span><br><span class="line">cp prog1.c /mnt/usb</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm 删除文件或目录</span><br><span class="line">rm prog1.c</span><br><span class="line">rm *.*</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv 移动或改变文件名称</span><br><span class="line">mv prog1.c ..</span><br><span class="line">mv pro1.c prog2.c</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more命令</span><br><span class="line">ls –l|more 显示画面暂停</span><br><span class="line">more prog1.c 显示文本文件内容</span><br><span class="line">pwd 显示当前所在目录</span><br></pre></td></tr></table></figure>
<h1 id="基本socket函数"><a href="#基本socket函数" class="headerlink" title="基本socket函数"></a>基本socket函数</h1><h2 id="必须的头文件"><a href="#必须的头文件" class="headerlink" title="必须的头文件"></a>必须的头文件</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="创建网络端点"><a href="#创建网络端点" class="headerlink" title="创建网络端点"></a>创建网络端点</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sock;</span><br><span class="line"><span class="keyword">if</span>((sock=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))&lt;<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>int socket (int family, int type, int protocol)<br>功能：创建socket描述符<br>参数：（P34表2－1描述了可能的参数值）<br>family（协议簇）：AF_INET、AF_UNIX<br>type（类型）：SOCK_STREAM、SOCK_DGRAM、SOCK_RAW<br>protocol（协议）：默认为0<br>返回值：&gt;0－socket描述符， -1－失败， 系统全局变量errno为错误代码</p>
<h2 id="设置地址"><a href="#设置地址" class="headerlink" title="设置地址"></a>设置地址</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">bzero(&amp;srvaddr,<span class="keyword">sizeof</span>(srvaddr));</span><br><span class="line">addr.sin_family=AF_INET;</span><br><span class="line">addr.sin_port=htons(<span class="number">1234</span>);</span><br><span class="line"><span class="keyword">if</span>(inet_aton(<span class="string">&quot;127.0.0.1&quot;</span>,srvaddr.sin_addr.s_addr)==<span class="number">-1</span>)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;addr convert error\n&quot;</span>);</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TCP/IP协议的socket地址<br>常用地址形式（字符串）：“127.0.0.1”<br>地址转换函数:<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">inet_aton(<span class="keyword">const</span> <span class="keyword">char</span> *cp,struct in_addr *inp);</span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">inet_ntoa</span><span class="params">(struct in_addr in)</span></span>;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="绑定服务器地址和端口"><a href="#绑定服务器地址和端口" class="headerlink" title="绑定服务器地址和端口"></a>绑定服务器地址和端口</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( bind(sockfd,(struct sockaddr *)&amp;addr,<span class="keyword">sizeof</span>(struct sockaddr))==<span class="number">-1</span>)&#123;		</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;bind error\n&quot;</span>);		</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>int bind(int sockfd,struct sockaddr *myaddr,int addrlen);<br>功能：绑定本地地址和端口<br>参数：<br>sockfd－socket描述符<br>myaddr－自己的地址<br>addrlen－地址结构长度<br>返回值：<br>0－成功，-1－失败，errno为错误代码 </p>
</blockquote>
<h2 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( listen(sockfd,BACKLOG) ==<span class="number">-1</span>)&#123;	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;listen error\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>int listen(int sockfd,int backlog)<br>功能：监听本地地址和端口<br>参数：<br>sockfd－已绑定的socket描述符<br>backlog－以完成连接，等待接受的队列长度<br>返回值<br>0－成功，-1－失败，errno为错误代码</p>
</blockquote>
<h2 id="接受客户端连接"><a href="#接受客户端连接" class="headerlink" title="接受客户端连接"></a>接受客户端连接</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sin_size=<span class="keyword">sizeof</span>(struct sockaddr_in);	</span><br><span class="line"><span class="keyword">int</span> new_fd= accept(sockfd,(struct sockaddr *)&amp;clientaddr,&amp;sin_size);</span><br><span class="line"><span class="keyword">if</span>(( new_fd==<span class="number">-1</span>)&#123;		</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;accept errot\n&quot;</span>);	</span><br><span class="line">	<span class="keyword">continue</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>int accept(int sockfd,struct sockaddr *clientaddr,int addrlen);<br>功能：接受连接<br>参数：<br>sockfd－socket描述符<br>clientaddr－客户端地址<br>addrlen－地址结构长度<br>返回值:<br>0－成功，返回新的socket描述符标识已接受的连接<br>-1－失败，errno为错误代码</p>
</blockquote>
<h2 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h2><blockquote>
<p>int read(int fd,char *buf,int len);<br>功能：从socket读取数据<br>参数：<br>fd－socket描述符<br>buf－接收数据缓冲区<br>len－要读取数据大小<br>返回值<br>≥0－成功，-1－失败，errno为错误代码</p>
</blockquote>
<h2 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h2><blockquote>
<p>int write(int fd,char *buf,int len);<br>功能：从socket读取数据<br>参数：<br>fd－socket描述符<br>buf－发送数据缓冲区<br>len－要发送数据大小<br>返回值<br>≥0－成功，-1－失败，errno为错误代码</p>
</blockquote>
<h2 id="关闭socket"><a href="#关闭socket" class="headerlink" title="关闭socket"></a>关闭socket</h2><blockquote>
<p>int close(int sockfd)<br>功能：关闭socket<br>参数：<br>sockfd－socket描述符<br>返回值<br>0－成功，-1－失败，errno为错误代码<br>说明<br>调用close只是将对sockfd的引用减1，直到对sockfd的引用为0时才清除sockfd ，TCP协议将继续使用sockfd，直到所有数据发送完成 </p>
</blockquote>
<h2 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( connect(sockfd,(struct sockaddr *)&amp;srvaddr,<span class="keyword">sizeof</span>(struct sockaddr) )==<span class="number">-1</span>)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;connect error\n&quot;</span>);</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>int connect(int sockfd,struct sockaddr *servaddr,int addrlen)<br>功能：连接服务器<br>参数：<br>sockfd－socket描述符<br>servaddr－服务器地址<br>addrlen－地址结构长度<br>返回值：<br>0－成功，-1－失败，errno为错误代码</p>
</blockquote>
<h1 id="高级socket函数"><a href="#高级socket函数" class="headerlink" title="高级socket函数"></a>高级socket函数</h1><h2 id="域名访问"><a href="#域名访问" class="headerlink" title="域名访问"></a>域名访问</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">he</span>=</span>gethostbyname(“www.sina.com.cn”);</span><br><span class="line"><span class="keyword">if</span>(he!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;h_name:%s\n&quot;</span>,he-&gt;h_name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;h_length:%d\n&quot;</span>,he-&gt;h_length);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;h_addrtype:%d&quot;</span>,he-&gt;h_addrtype;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;he-&gt;h_aliases[i] !=<span class="literal">NULL</span>;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;h_aliases%d:%s\n&quot;</span>,i+<span class="number">1</span>,he-&gt;h_aliases[i]); </span><br><span class="line">	<span class="comment">//列出所有地址</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;he-&gt;h_addr_list[i]!=<span class="literal">NULL</span>;i++)&#123;</span><br><span class="line">		struct in_addr *addr;</span><br><span class="line">		addr=(struct in_addr *)he-&gt;h_addr_list[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;ip%d:%s\n&quot;</span>,(i+<span class="number">1</span>),inet_ntoa(*addr));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;gethostbyname error:%s\n&quot;</span>,hstrerror(h_errno));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>域名到IP的转换函数<br>struct hostent<em> gethostbyname(const char </em>name)<br>功能：查询域名对应的IP<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span>	 h_name;	<span class="comment">/*主机正式名称*/</span></span><br><span class="line">	<span class="keyword">char</span>	**h_aliases;	<span class="comment">/*别名列表，以NULL结束*/</span></span><br><span class="line">	<span class="keyword">int</span> 	h_addrtype;	<span class="comment">/*主机地址类型：AF_INET*/</span></span><br><span class="line">	<span class="keyword">int</span> 	h_length;	<span class="comment">/*主机地址长度：4字节32位*/</span></span><br><span class="line">	<span class="keyword">char</span> 	**h_addr_list;	<span class="comment">/*主机网络地址列表，以NULL结束*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> 	h_addr 	h_addr_list[0]; <span class="comment">//主机的第一个网络地址</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="recv和send"><a href="#recv和send" class="headerlink" title="recv和send"></a>recv和send</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> sockfd,<span class="keyword">void</span>* buf,<span class="keyword">int</span> len, <span class="keyword">int</span> flags)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> sockfd,<span class="keyword">void</span>* buf,<span class="keyword">int</span> len,<span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure>
<p>功能：通过参数控制读写数据<br>参数：<br>sockfd－socket描述符<br>buf－发送或接收数据缓冲区<br>len－发送或接收数据长度<br>flags－发送或接收数据的控制参数<br>返回值：≥0－成功，-1失败</p>
</blockquote>
<p><strong>控制参数说明</strong></p>
<blockquote>
<p>flags=0，相当于read和write函数<br>flags=MSG_DONTROUTE，发送数据不查找路由表，适用于局域网，或同一网段<br>flags=MSG_OOB，发送和接收带外数据<br>flags=MSG_PEEK，接收数据时不从缓冲区移走数据，其他进程调用read或recv仍然可以读到数据<br>flags=MSG_WAITALL，数据量不够时，读操作等待，不返回，但在收到、文件结束符、信号以及出错时，仍然会结束。</p>
<h2 id="高级socket函数-1"><a href="#高级socket函数-1" class="headerlink" title="高级socket函数"></a>高级socket函数</h2><p><img src="/2019/06/14/%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/1.png" alt="1"></p>
<h2 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h2><p><strong>多路复用函数select</strong><br>int select(int maxfd,fd_set <em>rdset,fd_set </em>wrest,fd_set <em>exset,struct timeval </em>timeout);<br>功能：检查多个文件描述符（socket描述符）是否就绪，当某一个描述符就绪（可读、可写或发生异常）时函数返回。可以实现输入输出多路复用<br>返回值：有描述符就绪则返回就绪的描述符个数；超时时间内没有描述符就绪返回0；执行失败返回-1。</p>
</blockquote>
<p><strong>参数：</strong></p>
<blockquote>
<p>maxfd－需要测试的描述符的最大值，实际测试的描述符从0－maxfd-1<br>rdset－需要测试是否可读的描述符集合（包括处于listen状态的socket接收到连接请求）<br>wrset－需要测试是否可写的描述符集合（包括以非阻塞方式调用connect是否成功）<br>exset－需要测试是否异常的描述符集合（包括接收带外数据的socket有带外数据到达）<br>timeout－指定测试超时的时间 </p>
</blockquote>
<p><strong>timeout参数</strong></p>
<blockquote>
<p>timeval结构<br>timeout=NULL，select将永远阻塞直到有一个描述符就绪，或者出现错误（接收到信号）。<br>timeout&gt;0，在timeout时间内如果有描述符就绪则返回，否则在timeout时间后返回0；如果将3个描述符集合都设定为NULL则select相当于sleep函数，只是时间可以精确到毫秒<br>timeout=0，select检查完描述符集合后立即返回 </p>
</blockquote>
<p><strong>设置描述符集合</strong></p>
<blockquote>
<p>FD_ZERO(fd_set <em>fdset)－清空描述符集合<br>FD_SET(int fd,fd_set </em>fdset)－将一个描述符添加到描述符集合<br>FD_CLR(int fd,fd_set <em>fdset)－将一个描述符从描述符集合中清除<br>FD_ISSET(int fd,fd_set </em>fdset)－检测一个描述符是否就绪<br>在设置描述符集合前应该先调用FD_ZERO将集合清空，每次调用select函数前应该重新设置这3个集合<br>三个集合中的描述符可以交叉 </p>
</blockquote>
<h1 id="socket选项"><a href="#socket选项" class="headerlink" title="socket选项"></a>socket选项</h1><p><strong>设置/获取socket选项函数</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getsockopt</span><span class="params">(<span class="keyword">int</span> sockfd,<span class="keyword">int</span> level,<span class="keyword">int</span> optname,<span class="keyword">void</span> *optval,sock_len *optlen)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setsockopt</span><span class="params">(<span class="keyword">int</span> sockfd,<span class="keyword">int</span> level,<span class="keyword">int</span> optname,<span class="keyword">void</span> *optval,sock_len optlen)</span></span>;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>功能：获取或设置socket选项<br>返回值： 0－成功，－1失败</p>
</blockquote>
<p><strong>参数：</strong></p>
<blockquote>
<p>sockfd－socket描述符<br>level－选项级别<br>SOL_SOCKET —通用socket选项<br>IPPROTO_IP—IP选项<br>IPPROTO_TCP—TCP选项<br>optname—选项名称<br>optval—选项值<br>optlen—选项值的长度/存放选项值长度的指针  </p>
</blockquote>
<p><strong>通用socket选项</strong></p>
<blockquote>
<p>SO_KEEPALIVE<br>设置该选项后，2小时内没有数据交换时，TCP协议将自动发送探测数据包，检查网络连接<br>SO_RCVBUF和SO_SNDBUF<br>设置发送和接收数据缓冲区的大小（在连接建立以前设置）<br>SO_RCVTIMEO和SO_SNDTIMEO<br>设置发送和接收超时，当指定时间内数据没有成功接收或发送，发送和接收函数将返回。<br>SO_REUSEADDR<br>快速重启服务器程序<br>启动服务器程序的多个实例（绑定本地IP地址的多个别名）</p>
</blockquote>
<p><strong>阻塞/非阻塞模式</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fcntl</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">int</span> cmd,…)</span></span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>功能：<br>设置socket为阻塞/非阻塞模式<br>设置/获取socket的所有者<br>参数：<br>fd－文件（socket）描述符<br>cmd－执行的操作<br>其他参数－根据cmd选择适当参数<br>返回值：≥0－成功，-1－失败</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作类型</th>
<th>参数</th>
<th>返回值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>F_GETFL</td>
<td>0</td>
<td>描述符标志</td>
<td>获得描述符标志</td>
</tr>
<tr>
<td>F_SETFL</td>
<td>O_NONBLOCK</td>
<td>成功0，否则-1</td>
<td>设置socket为非阻塞方式</td>
</tr>
<tr>
<td>F_GETOWN</td>
<td>int *</td>
<td>成功0，否则-1</td>
<td>获得socket的所有者</td>
</tr>
<tr>
<td>F_SETOWN</td>
<td>int *</td>
<td>成功0，否则-1</td>
<td>设置socket的所有者</td>
</tr>
</tbody>
</table>
</div>
<p>非阻塞方式<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fcntl(socket_fd,F_SETFL,fcntl(socket_fd,F_GETFL,<span class="number">0</span>)|O_NONBLOCK);</span><br></pre></td></tr></table></figure><br>阻塞方式<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fcntl(socket_fd,F_SETFL,fcntl(socket_fd,F_GETFL,<span class="number">0</span>)&amp;^O_NONBLOCK);</span><br></pre></td></tr></table></figure></p>
<p><strong>控制输入输出</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ioctl</span><span class="params">(<span class="keyword">int</span> fd,<span class="keyword">int</span> req,…)</span></span>;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>功能：控制输入输出<br>参数：<br>fd－文件（socket）描述符<br>req－执行的操作类型<br>第三个参数－总是指针类型，存储操作返回的数据或操作所需的数据<br>返回值：0－成功，-1－失败</p>
</blockquote>
<div class="table-container">
<table>
<thead>
<tr>
<th>操作类型</th>
<th>参数类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>SIOCATMARK</td>
<td>int*</td>
<td>是否到达带外标志</td>
</tr>
<tr>
<td>FIOASYNC</td>
<td>int*</td>
<td>异步输入/输出标志</td>
</tr>
<tr>
<td>FIONREAD</td>
<td>int*</td>
<td>缓冲区中有多少字节数据可读</td>
</tr>
</tbody>
</table>
</div>
<h1 id="UDP-Socket编程"><a href="#UDP-Socket编程" class="headerlink" title="UDP Socket编程"></a>UDP Socket编程</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>* <span class="title">saddrp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="comment">//创建socket</span></span><br><span class="line">     <span class="keyword">int</span> sockfd = socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">0</span> &gt; sockfd)</span><br><span class="line">     &#123;</span><br><span class="line">          perror(<span class="string">&quot;sockfd&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//准备地址</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span> =</span> &#123;&#125;;</span><br><span class="line">     addr.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">     addr.sin_port = htons(<span class="number">5577</span>);<span class="comment">//端口号</span></span><br><span class="line">     addr.sin_addr.s_addr = inet_addr(<span class="string">&quot;192.168.2.177&quot;</span>);<span class="comment">//我的ip地址</span></span><br><span class="line">     <span class="comment">//绑定</span></span><br><span class="line">     <span class="keyword">int</span> ret = bind(sockfd,(saddrp)&amp;addr,<span class="keyword">sizeof</span>(addr));</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</span><br><span class="line">     &#123;</span><br><span class="line">          perror(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">src_addr</span> =</span>&#123;&#125;;</span><br><span class="line">     <span class="keyword">socklen_t</span> addr_len = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">     <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">     &#123;</span><br><span class="line">          <span class="keyword">char</span> buf[<span class="number">255</span>] = &#123;&#125;;</span><br><span class="line">          <span class="comment">//接收数据和来源的ip地址</span></span><br><span class="line">          recvfrom(sockfd,buf,<span class="keyword">sizeof</span>(buf),<span class="number">0</span>,(saddrp)&amp;src_addr,&amp;addr_len);</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Recv:%s\n&quot;</span>,buf);</span><br><span class="line">          <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(buf,<span class="string">&quot;q&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">          <span class="comment">//发送数据给目标地址</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Please input the return value:&quot;</span>);</span><br><span class="line">          gets(buf);</span><br><span class="line">          sendto(sockfd,buf,<span class="built_in">strlen</span>(buf)+<span class="number">1</span>,<span class="number">0</span>,(saddrp)&amp;src_addr,addr_len);</span><br><span class="line">          <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(buf,<span class="string">&quot;q&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="comment">//关闭socket对象</span></span><br><span class="line">     close(sockfd);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="原始socket编程"><a href="#原始socket编程" class="headerlink" title="原始socket编程"></a>原始socket编程</h1><p><strong>创建原始socket</strong><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span> <span class="params">(<span class="keyword">int</span> family, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>参数：<br>family－AF_INET<br>type－SOCK_RAW<br>protocol<br>IPPROTO_ICMP－ICMP数据包<br>IPPROTO_IGMP－IGMP数据包<br>IPPROTO_IP－IP数据包<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">send_icmp</span><span class="params">(<span class="keyword">int</span> sockfd,sockaddr_in send_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">short</span> <span class="keyword">int</span> seq=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">char</span> buf[<span class="number">8</span>+<span class="number">8</span>];</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">icmphdr</span> *<span class="title">icmp</span>=</span>(struct icmphdr *)buf;</span><br><span class="line">     icmp-&gt;type=ICMP_ECHO;</span><br><span class="line">     icmp-&gt;code=<span class="number">0</span>;</span><br><span class="line">     icmp-&gt;checksum=CHECK_SUM;</span><br><span class="line">     icmp-&gt;un.echo.id=getpid();</span><br><span class="line">     icmp-&gt;un.echo.sequence=seq++;</span><br><span class="line">     <span class="keyword">int</span> len=send(sockfd,buf,buflen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recv_icmp</span><span class="params">(<span class="keyword">int</span> sockfd,sockaddr_in send_addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">char</span> buf[<span class="number">256</span>];</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">icmphdr</span> *<span class="title">icmp</span>;</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">ip</span> *<span class="title">ip</span>;</span></span><br><span class="line">     <span class="keyword">int</span> ipheadlen;</span><br><span class="line">     <span class="keyword">int</span> icmplen;</span><br><span class="line">     <span class="keyword">int</span> n=recvfrom(sockfd,buf,<span class="keyword">sizeof</span>(buf),<span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">     <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;recv error&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     ip=(struct ip *)buf;	</span><br><span class="line">     ipheadlen=ip-&gt;ip_hl&lt;&lt;<span class="number">2</span>;</span><br><span class="line">     icmplen=n-ipheadlen;</span><br><span class="line">     icmp=(struct icmphdr *)(buf+ipheadlen);</span><br><span class="line">     <span class="keyword">if</span>(icmp-&gt;type==ICMP_ECHOREPLY)</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;recv from &quot;</span>&lt;&lt;inet_ntoa(send_addr.sin_addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      <tags>
        <tag>Socket</tag>
        <tag>Linux</tag>
        <tag>NOTE</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|计算机组织与体系结构</title>
    <url>/2019/09/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/</url>
    <content><![CDATA[<p><strong>计组知识点的总结笔记</strong><br><span id="more"></span></p>
<h1 id="（一）计算机系统概论"><a href="#（一）计算机系统概论" class="headerlink" title="（一）计算机系统概论"></a>（一）计算机系统概论</h1><h2 id="1-复习内容"><a href="#1-复习内容" class="headerlink" title="1.复习内容"></a>1.复习内容</h2><p>计算机的基本组成，冯.诺依曼计算机原理，计算机系统的层次结构，计算机的分类及性能描述，计算机的发展历程</p>
<h2 id="2-具体要求"><a href="#2-具体要求" class="headerlink" title="2.具体要求"></a>2.具体要求</h2><h3 id="计算机的基本组成"><a href="#计算机的基本组成" class="headerlink" title="计算机的基本组成"></a>计算机的基本组成</h3><h4 id="硬件组成"><a href="#硬件组成" class="headerlink" title="硬件组成"></a>硬件组成</h4><p><img src="/2019/09/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/1.png" alt="1"></p>
<ul>
<li>运算器：主要功能是进行加、减、乘、除等算术运算,还可进行逻辑运算</li>
<li>存储器：目前采用半导体器件来担当此任务。通常，在存储器中保存一个数的16个触发器,称为一个存储单元。存储器是由许多存储单元组成。每个存储单元的编号,称为地址。向存储器中存数或者从存储器中取数，都要按给定的地址来寻找所选的存储单元。</li>
<li>控制器：从内存中取出解题步骤加以分析,然后执行某种操作。</li>
<li>计算机的输入/输出设备通常称为外围设备。适配器的作用相当与一个转换器。它可以保证外围设备用计算机系统特性所要求的形式发送或接受信息。  <h4 id="软件组成"><a href="#软件组成" class="headerlink" title="软件组成"></a>软件组成</h4>计算机软件一般分为两大类：一类叫系统程序,一类叫应用程序。<br>系统程序用来简化程序设计,简化使用方法,提高计算机的使用效率,发挥和扩大计算机的功能及用途。<br>应用程序是用户利用计算机来解决某些问题所编制的程序。</li>
</ul>
<h3 id="冯-诺依曼计算机工作原理"><a href="#冯-诺依曼计算机工作原理" class="headerlink" title="冯.诺依曼计算机工作原理"></a>冯.诺依曼计算机工作原理</h3><h4 id="冯-诺依曼计算机结构及工作过程"><a href="#冯-诺依曼计算机结构及工作过程" class="headerlink" title="冯.诺依曼计算机结构及工作过程"></a>冯.诺依曼计算机结构及工作过程</h4><p><img src="/2019/09/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/2.png" alt="2"></p>
<h4 id="冯-诺依曼计算机特点"><a href="#冯-诺依曼计算机特点" class="headerlink" title="冯.诺依曼计算机特点"></a>冯.诺依曼计算机特点</h4><p><img src="/2019/09/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/3.png" alt="3"></p>
<h3 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h3><h4 id="层次结构图"><a href="#层次结构图" class="headerlink" title="层次结构图"></a>层次结构图</h4><p><img src="/2019/09/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90/4.png" alt="4"></p>
<h4 id="各层的含义和界面定义"><a href="#各层的含义和界面定义" class="headerlink" title="各层的含义和界面定义"></a>各层的含义和界面定义</h4><h4 id="计算机体系结构、组成和实现定义"><a href="#计算机体系结构、组成和实现定义" class="headerlink" title="计算机体系结构、组成和实现定义"></a>计算机体系结构、组成和实现定义</h4><ul>
<li>系统结构:由程序员所看到的计算机系统的属性，即概念性结构及功能特性。</li>
<li>计算机组成:计算机系统的逻辑实现，包括最低层内部算法、数据流、控制流的逻辑实现</li>
<li>计算机实现 :计算机实现就是指计算机组成的物理实现。</li>
</ul>
<h3 id="计算机的分类及性能描述"><a href="#计算机的分类及性能描述" class="headerlink" title="计算机的分类及性能描述"></a>计算机的分类及性能描述</h3><h4 id="Flynn分类法"><a href="#Flynn分类法" class="headerlink" title="Flynn分类法"></a>Flynn分类法</h4><h4 id="Amdahl定律和应用"><a href="#Amdahl定律和应用" class="headerlink" title="Amdahl定律和应用"></a>Amdahl定律和应用</h4><h4 id="吞吐量、响应时间"><a href="#吞吐量、响应时间" class="headerlink" title="吞吐量、响应时间"></a>吞吐量、响应时间</h4><h4 id="CPU时钟周期、主频、CPI、CPU执行时间"><a href="#CPU时钟周期、主频、CPI、CPU执行时间" class="headerlink" title="CPU时钟周期、主频、CPI、CPU执行时间"></a>CPU时钟周期、主频、CPI、CPU执行时间</h4><h4 id="MIPS、MFLOPS"><a href="#MIPS、MFLOPS" class="headerlink" title="MIPS、MFLOPS"></a>MIPS、MFLOPS</h4>]]></content>
      <tags>
        <tag>CS</tag>
        <tag>NOTE</tag>
        <tag>计组</tag>
      </tags>
  </entry>
  <entry>
    <title>Math|距离计算</title>
    <url>/2019/06/28/%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<p><strong>机器学习常用距离计算总结</strong><br><span id="more"></span></p>
<h1 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离"></a>曼哈顿距离</h1><p><a href="https://baike.baidu.com/item/%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB">曼哈顿距离</a>（Manhattan Distance）又称计程车几何距离或方格线距离，是由十九世纪的赫尔曼·闵可夫斯基所创词汇 ，为欧几里得几何度量空间的几何学之用语，用以标明两个点上在标准坐标系上的绝对轴距之总和。曼哈顿距离的正式意义为L1-距离或城市区块距离，也就是在欧几里得空间的固定直角坐标系上两点所形成的线段对轴产生的投影的距离总和。曼哈顿距离公式为</p>
<script type="math/tex; mode=display">d=\sum_{i=1}^n|x_i-y_i|</script><h1 id="欧几里得距离"><a href="#欧几里得距离" class="headerlink" title="欧几里得距离"></a>欧几里得距离</h1><p><a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E5%BA%A6%E9%87%8F/1274107?fromtitle=%E6%AC%A7%E6%B0%8F%E8%B7%9D%E7%A6%BB&amp;fromid=1798948">欧几里得度量</a>（Euclidean Distance）也称欧氏距离： 在数学中，欧几里得距离或欧几里得度量是欧几里得空间中两点间“普通”（即直线）距离。在欧几里得空间中，点$x=\left(x_{1}, x_{2}, \ldots, x_{n}\right)$和$y=\left(y_{1}, y_{2}, \ldots, y_{n}\right)$之间的欧氏距离为:</p>
<script type="math/tex; mode=display">d=\sqrt{\sum_{i=1}^{n}\left(x_{i}-y_{i}\right)^{2}}</script><h1 id="切比雪夫距离"><a href="#切比雪夫距离" class="headerlink" title="切比雪夫距离"></a>切比雪夫距离</h1><p>数学上，<a href="https://baike.baidu.com/item/%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E8%B7%9D%E7%A6%BB">切比雪夫距离</a>（Chebyshev distance）或是$L_{\infty}$度量是向量空间中的一种度量，二个点之间的距离定义为其各座标数值差的最大值。以p(x1,y1)和q(x2,y2)二点为例，其切比雪夫距离为：</p>
<script type="math/tex; mode=display">D_{\text {Chebyshev}}(p, q)=\max \left(\left|x_{2}-x_{1}\right|,\left|y_{2}-y_{1}\right|\right)</script><p>一般形式为：</p>
<script type="math/tex; mode=display">D_{\text { Chebyshev }}(p, q)=\max _{i}\left(\left|p_{i}-q_{i}\right|\right)=\lim _{k \rightarrow \infty}\left(\sum_{i=1}^{n}\left|p_{i}-q_{i}\right|^{k}\right)^{1 / k}</script><h1 id="闵可夫斯基距离"><a href="#闵可夫斯基距离" class="headerlink" title="闵可夫斯基距离"></a>闵可夫斯基距离</h1><p><a href="https://baike.baidu.com/item/%E6%98%8E%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA%E8%B7%9D%E7%A6%BB/10515232">闵可夫斯基距离</a>或闵氏距离（Minkowski Distance）：以俄罗斯数学家闵可夫斯基命名的距离；是欧式距离的推广，闵氏距离不是一种距离，而是一组距离的定义。其定义如下：</p>
<script type="math/tex; mode=display">d=\sqrt[p]{\sum_{i=1}^{n}\left|x_{i}-y_{i}\right|^{p}}</script><p>从上面公式可以看出：<br>当$p=1$时，就是曼哈顿距离<br>当$p=2$时，就是欧氏距离<br>当$p \rightarrow \infty$时，就是切比雪夫距离</p>
<h1 id="马氏距离"><a href="#马氏距离" class="headerlink" title="马氏距离"></a>马氏距离</h1><p><a href="https://baike.baidu.com/item/%E9%A9%AC%E6%B0%8F%E8%B7%9D%E7%A6%BB">马氏距离</a>(Mahalanobis distance)： 由印度统计学家马哈拉诺比斯提出，表示数据的协方差距离。它是一种有效的计算两个未知样本集的相似度的方法。与欧氏距离不同的是它考虑到各种特性之间的联系（例如：一条关于身高的信息会带来一条关于体重的信息，因为两者是有关联的）并且是尺度无关的(scale-invariant)，即独立于测量尺度，如果协方差矩阵为单位矩阵，马氏距离就简化为欧式距离，如果协方差矩阵为对角阵，其也可称为正规化的马氏距离。 计算公式如下：</p>
<script type="math/tex; mode=display">D_{M}(x)=\sqrt{(x-\mu)^{T} \Sigma^{-1}(x-\mu)}</script><p>马氏距离也可以定义为两个服从同一分布并且其协方差矩阵为$\Sigma$的随机变量$\vec{x}$与$\vec{y}$的差异程度：</p>
<script type="math/tex; mode=display">d(\vec{x}, \vec{y})=\sqrt{(\vec{x}-\vec{y})^{T} \Sigma^{-1}(\vec{x}-\vec{y})}</script><h1 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h1><p>在信息论中，两个等长字符串之间的<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/475174?fr=aladdin">汉明距离</a>（Hamming distance）是两个字符串对应位置的不同字符的个数。换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数。</p>
<blockquote>
<p>1011101 与 1001001 之间的汉明距离是 2。<br>2143896 与 2233796 之间的汉明距离是 3。<br>“toned” 与 “roses” 之间的汉明距离是 3。</p>
</blockquote>
<h1 id="余弦相似度"><a href="#余弦相似度" class="headerlink" title="余弦相似度"></a>余弦相似度</h1><p><a href="https://baike.baidu.com/item/%E4%BD%99%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6/17509249?fr=aladdin">余弦相似度</a>通过测量两个向量的夹角的余弦值来度量它们之间的相似性。0度角的余弦值是1，而其他任何角度的余弦值都不大于1；并且其最小值是-1。从而两个向量之间的角度的余弦值确定两个向量是否大致指向相同的方向。两个向量有相同的指向时，余弦相似度的值为1；两个向量夹角为90°时，余弦相似度的值为0；两个向量指向完全相反的方向时，余弦相似度的值为-1。这结果是与向量的长度无关的，仅仅与向量的指向方向相关。余弦相似度通常用于正空间，因此给出的值为0到1之间。给定两个属性向量，A和B，其余弦相似性θ由点积和向量长度给出，如下所示：</p>
<script type="math/tex; mode=display">\cos \theta=\frac{A \cdot B}{\|A\|\|B\|}=\frac{\sum_{i=1}^{n} A_{i} \times B_{i}}{\sqrt{\sum_{i=1}^{n}\left(A_{i}\right)^{2}} \times \sqrt{\sum_{i=1}^{n}\left(B_{i}\right)^{2}}}</script><h1 id="杰卡德距离"><a href="#杰卡德距离" class="headerlink" title="杰卡德距离"></a>杰卡德距离</h1><p><a href="https://baike.baidu.com/item/%E6%9D%B0%E5%8D%A1%E5%BE%B7%E8%B7%9D%E7%A6%BB/15416212?fr=aladdin">杰卡德距离</a>(Jaccard Distance) ：它是杰卡德相似系数的补集，被定义为1减去Jaccard相似系数。而杰卡德相似系数(Jaccard similarity coefficient)，也称杰卡德指数(Jaccard Index)，是用来衡量两个集合相似度的一种指标。<br>Jaccard相似指数用来度量两个集合之间的相似性，它被定义为两个集合交集的元素个数除以并集的元素个数。</p>
<script type="math/tex; mode=display">J(A, B)=\frac{|A \cap B|}{|A \cup B|}</script><p>杰卡德距离如下：</p>
<script type="math/tex; mode=display">d_{J}(A, B)=1-J(A, B)=\frac{|A \cup B|-|A \cap B|}{|A \cup B|}</script><p>性质：<br>1）若$A、B$两个集合都为空，则$J(A,B)=1$<br>2）$0 \leq J(A, B) \leq 1$</p>
<h1 id="皮尔森相关系数"><a href="#皮尔森相关系数" class="headerlink" title="皮尔森相关系数"></a>皮尔森相关系数</h1><p><a href="https://baike.baidu.com/item/%E7%9A%AE%E5%B0%94%E6%A3%AE%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/4222137?fr=aladdin">皮尔森相关系数</a>（Pearson correlation coefficient）：也称皮尔森积矩相关系数(Pearson product-moment correlation coefficient) ，是一种线性相关系数。皮尔森相关系数是用来反映两个变量线性相关程度的统计量。相关系数用r表示，其中n为样本量，分别为两个变量的观测值和均值。r描述的是两个变量间线性相关强弱的程度。r的绝对值越大表明相关性越强。<br>计算公式：</p>
<script type="math/tex; mode=display">
r=\frac{\sum_{i=1}^{n}\left(X_{i}-\overline{x}\right)\left(Y_{i}-\overline{y}\right)}{\sqrt{\sum_{i=1}^{n}\left(X_{i}-\overline{x}\right)^{2}} \sqrt{\sum_{i=1}^{n}\left(Y_{i}-\overline{y}\right)^{2}}}</script><p>分子是两个集合的交集大小，分母是两个集合大小的几何平均值。是余弦相似性的一种形式</p>
<h1 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h1><p><a href="https://baike.baidu.com/item/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/8010193?fr=aladdin">编辑距离</a>（Edit Distance）:又称Levenshtein距离，是指两个字串之间，由一个转成另一个所需的最少编辑操作次数。许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。一般来说，编辑距离越小，两个串的相似度越大。俄罗斯科学家Vladimir Levenshtein在1965年提出这个概念。编辑距离越小的两个字符串越相似，当编辑距离为0时，两字符串相等。</p>
<script type="math/tex; mode=display">f(n) = \begin{cases}max(i,j) & \text{if min(i,j)=0} \\ min{\begin{cases} lev_{a,b}(i-1,j)+1 \\ lev_{a,b}(i,j-1)+1 \\ lev_{a,b}(i-1,j-1)+1_{(a_i \neq b_j)} \end{cases}} & \text{otherwise.}\end{cases}</script><h1 id="K-L散度"><a href="#K-L散度" class="headerlink" title="K-L散度"></a>K-L散度</h1><p><a href="https://baike.baidu.com/item/%E7%9B%B8%E5%AF%B9%E7%86%B5/4233536?fr=aladdin">K-L散度</a>即相对熵；是衡量两个分布(P、Q)之间的距离；越小越相似。<br>计算公式：</p>
<script type="math/tex; mode=display">D(P||Q)=\sum_{i=1}^nP(i)log{P(i) \over Q(i)}</script><hr>
<p>参考博客：</p>
<p>[1] <a href="https://www.iteblog.com/archives/2317.html">机器学习中常用的距离公式</a></p>
<p>[2] <a href="https://www.jianshu.com/p/185abcc8b166">常用的相似性度量算法</a></p>
<p>[3] <a href="https://zhuanlan.zhihu.com/p/27305237">机器学习和统计学中常见的距离和相似度度量</a></p>
<p>[4] <a href="https://my.oschina.net/hunglish/blog/787596">几种距离度量方法比较</a></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|降维算法PCA和LDA的实现及总结</title>
    <url>/2019/05/19/%E9%99%8D%E7%BB%B4/</url>
    <content><![CDATA[<p><strong>以Iris数据集为例，分别实现PCA和LDA降维</strong><br><span id="more"></span></p>
<h1 id="PCA"><a href="#PCA" class="headerlink" title="PCA"></a>PCA</h1><h2 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h2><p>主成分分析（Principal Component Analysis，PCA）是一种常用的线性降维数据分析方法，其实质是在能尽可能好的代表原特征的情况下，将原特征进行线性变换、映射至低纬度空间中。</p>
<blockquote>
<p>至于更详细的的可以看下面的<br><a href="https://blog.csdn.net/qq_16137569/article/details/82142668">PCA原理小结</a><br><a href="https://blog.csdn.net/a8039974/article/details/81285238">PCA(主成分分析)详解</a><br><a href="https://blog.csdn.net/zhongkelee/article/details/44064401">主成分分析（PCA）原理详解</a><br><a href="https://blog.csdn.net/Eastmount/article/details/53285192">PCA降维操作</a></p>
</blockquote>
<h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>首先将数据做中心化处理<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">meanVal = np.mean(X, axis=<span class="number">0</span>)</span><br><span class="line">W = X - meanVal</span><br></pre></td></tr></table></figure><br>这里说一下，中心化就是使得样本矩阵的中心回归到坐标系的原点，看下图应该比较好理解。也可以点<a href="https://www.zhihu.com/question/37069477/answer/132736027">这里</a>更详细。<br><img src="/2019/05/19/%E9%99%8D%E7%BB%B4/1.jpg" alt="zx"></p>
<p>计算中心化后数据的协方差矩阵<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">covMat = np.cov(W, rowvar=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br>计算协方差矩阵的特征值和特征向量<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eigVals, eigVects = np.linalg.eig(np.mat(covMat))</span><br></pre></td></tr></table></figure><br>找出特征值最大的k个特征所对应的特征向量，并组成向量T<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">E = np.argsort(eigVals)</span><br><span class="line">k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">T = eigVects[:, k_E]</span><br></pre></td></tr></table></figure><br>Y=W*T即为降维到k维后的数据<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Y = W * T</span><br></pre></td></tr></table></figure></p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>PCA算法<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyPca</span>(<span class="params">X,k</span>):</span></span><br><span class="line"></span><br><span class="line">    meanVal = np.mean(X, axis=<span class="number">0</span>)</span><br><span class="line">    W = X - meanVal</span><br><span class="line"></span><br><span class="line">    covMat = np.cov(W, rowvar=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    eigVals, eigVects = np.linalg.eig(np.mat(covMat))</span><br><span class="line"></span><br><span class="line">    E = np.argsort(eigVals)</span><br><span class="line">    k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">    T = eigVects[:, k_E]</span><br><span class="line"></span><br><span class="line">    Y = W * T</span><br><span class="line">    <span class="keyword">return</span> Y</span><br></pre></td></tr></table></figure><br>带入Iris数据集<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = load_iris()</span><br><span class="line">y = data.target <span class="comment">#标签</span></span><br><span class="line">X = data.data</span><br></pre></td></tr></table></figure><br>带入数据，输出结果<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reduced_X = np.array(MyPca(X, <span class="number">2</span>))</span><br><span class="line">show2(reduced_X)</span><br></pre></td></tr></table></figure><br><img src="/2019/05/19/%E9%99%8D%E7%BB%B4/3.png" alt="pca"></p>
<h1 id="LDA"><a href="#LDA" class="headerlink" title="LDA"></a>LDA</h1><h2 id="算法原理-1"><a href="#算法原理-1" class="headerlink" title="算法原理"></a>算法原理</h2><p>线性判别分析(linear discriminant analysis，LDA)是是一种监督学习的降维技术，投影后希望类内方差最小，类间方差最大，即每一种类别数据的投影点尽可能的接近，而不同类别的数据的类别中心之间的距离尽可能的大。</p>
<blockquote>
<p>这里推荐几篇文章，有更详细的数学推导<br><a href="https://www.cnblogs.com/jerrylead/archive/2011/04/21/2024384.html">线性判别分析（Linear Discriminant Analysis）（一）</a><br><a href="https://www.cnblogs.com/jerrylead/archive/2011/04/21/2024389.html">线性判别分析（Linear Discriminant Analysis）（二）</a></p>
</blockquote>
<h2 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h2><p>首先将数据根据标签分类<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yi = <span class="built_in">set</span>(y)</span><br><span class="line">xi = np.array([X[np.where(y == i)] <span class="keyword">for</span> i <span class="keyword">in</span> yi])</span><br></pre></td></tr></table></figure><br>计算所有样本均值$\mu=\frac{1}{m}\sum\limits_{i=1}^m$和各类样本均值$\mu_i=\frac{1}{n_i}\sum\limits_{x\in x_i}x$<br>其中$m$表示总样本数，$n_i$表示第i类的样本数。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">u = np.array([np.mean(X, axis=<span class="number">0</span>)])</span><br><span class="line">ui = np.array([np.mean(xi[i], axis=<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(xi.shape[<span class="number">0</span>])])</span><br></pre></td></tr></table></figure><br>计算类内散度矩阵$S_w=\sum\limits_{i=1}^c\sum\limits_{x\in x_i}(x-\mu_i)(x-\mu_i)^T$<br>及类间散度矩阵$S_b=\sum\limits_{i=1}^cn_i(\mu_i-\mu)(\mu_i-\mu)^T$<br>其中$c$表示类别数。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Sw = <span class="built_in">sum</span>(np.dot((xi[i] - ui[i]).T, (xi[i] - ui[i])) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br><span class="line">Sb = <span class="built_in">sum</span>(<span class="built_in">len</span>(xi[i]) * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u).T * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br></pre></td></tr></table></figure><br>计算$S_w^{-1}S_b$(由于$S_b$的秩最大为$c-1$，所以LDA最大只能降到$c-1$的维度)<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S=np.linalg.inv(Sw).dot(Sb)</span><br><span class="line">r=np.linalg.matrix_rank(S)</span><br><span class="line"><span class="keyword">if</span>(k&gt;r):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;k_max=&quot;</span>,r)</span><br><span class="line">    k=r</span><br></pre></td></tr></table></figure><br>找出特征值最大的k个特征所对应的特征向量，并组成向量$W$，$Y=W*X$即为降维到k维后的数据<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eigVals, eigVects = np.linalg.eig(S)</span><br><span class="line">E = np.argsort(eigVals)</span><br><span class="line">k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">W = eigVects[:, k_E]</span><br><span class="line">Y=np.dot(X, W)</span><br></pre></td></tr></table></figure></p>
<h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p>LDA算法<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyLDA</span>(<span class="params">X,y,k</span>):</span></span><br><span class="line">    yi = <span class="built_in">set</span>(y)</span><br><span class="line">    xi = np.array([X[np.where(y == i)] <span class="keyword">for</span> i <span class="keyword">in</span> yi])</span><br><span class="line"></span><br><span class="line">    u = np.array([np.mean(X, axis=<span class="number">0</span>)])</span><br><span class="line">    ui = np.array([np.mean(xi[i], axis=<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(xi.shape[<span class="number">0</span>])])</span><br><span class="line"></span><br><span class="line">    Sw = <span class="built_in">sum</span>(np.dot((xi[i] - ui[i]).T, (xi[i] - ui[i]))</span><br><span class="line">             <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br><span class="line">    Sb = <span class="built_in">sum</span>(<span class="built_in">len</span>(xi[i]) * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u).T * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u)</span><br><span class="line">             <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br><span class="line"></span><br><span class="line">    S=np.linalg.inv(Sw).dot(Sb)</span><br><span class="line">    r=np.linalg.matrix_rank(S)</span><br><span class="line">    <span class="keyword">if</span>(k&gt;r):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;k_max=&quot;</span>,r)</span><br><span class="line">        k=r</span><br><span class="line"></span><br><span class="line">    eigVals, eigVects = np.linalg.eig(S)</span><br><span class="line">    E = np.argsort(eigVals)</span><br><span class="line">    k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">    W = eigVects[:, k_E]</span><br><span class="line"></span><br><span class="line">    Y=np.dot(X, W)</span><br><span class="line">    <span class="keyword">return</span> Y</span><br></pre></td></tr></table></figure><br>带入数据，输出结果<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LDA_2D = np.array(MyLDA(X,y,<span class="number">2</span>))</span><br><span class="line">show2(LDA_2D)</span><br></pre></td></tr></table></figure><br><img src="/2019/05/19/%E9%99%8D%E7%BB%B4/4.png" alt="lda"></p>
<p>这样就将数据降到二维，但可能有人会疑惑，怎么知道降维后的信息量变化了多少呢？可以用这样的计算方法: $\eta_k=\frac{\sum_{j=1}^k\lambda_j}{\sum_{j=1}^k\lambda_j}$来表示降维后剩余的信息量</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总的来说，PCA和LDA的实现很简单，但是基本原理和推导需要扎实的数学基础，尤其是LDA中，尤其要注意矩阵的秩对结果的影响。PCA和LDA虽然都用到数据降维的思想，但是两者有着很大的不同，首先监督方式不一样，LDA是有监督的降维方法，而PCA是无监督的降维方法；再者目的也不一样，PCA是为了去除原始数据集中冗余的维度，让投影子空间的各个维度的方差尽可能大。而LDA是通过数据降维使得原始数据中不同的类别尽可能区分开来。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyPCA</span>(<span class="params">X,k</span>):</span></span><br><span class="line"></span><br><span class="line">    meanVal = np.mean(X, axis=<span class="number">0</span>)</span><br><span class="line">    W = X - meanVal</span><br><span class="line"></span><br><span class="line">    covMat = np.cov(W, rowvar=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    eigVals, eigVects = np.linalg.eig(np.mat(covMat))</span><br><span class="line"></span><br><span class="line">    E = np.argsort(eigVals)</span><br><span class="line">    k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">    T = eigVects[:, k_E]</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">sum</span>(eigVals[k_E])/<span class="built_in">sum</span>(eigVals)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;降到&quot;</span>,k,<span class="string">&quot;维后保留的信息量是原来的&quot;</span>,n * <span class="number">100.0</span>, <span class="string">&quot;%&quot;</span>)</span><br><span class="line"></span><br><span class="line">    Y = W * T</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyLDA</span>(<span class="params">X,y,k</span>):</span></span><br><span class="line">    yi = <span class="built_in">set</span>(y)</span><br><span class="line">    xi = np.array([X[np.where(y == i)] <span class="keyword">for</span> i <span class="keyword">in</span> yi])</span><br><span class="line"></span><br><span class="line">    u = np.array([np.mean(X, axis=<span class="number">0</span>)])</span><br><span class="line">    ui = np.array([np.mean(xi[i], axis=<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(xi.shape[<span class="number">0</span>])])</span><br><span class="line"></span><br><span class="line">    Sw = <span class="built_in">sum</span>(np.dot((xi[i] - ui[i]).T, (xi[i] - ui[i]))</span><br><span class="line">             <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br><span class="line">    Sb = <span class="built_in">sum</span>(<span class="built_in">len</span>(xi[i]) * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u).T * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u)</span><br><span class="line">             <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br><span class="line"></span><br><span class="line">    S=np.linalg.inv(Sw).dot(Sb)</span><br><span class="line">    r=np.linalg.matrix_rank(S)</span><br><span class="line">    <span class="keyword">if</span>(k&gt;r):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;k_max=&quot;</span>,r)</span><br><span class="line">        k=r</span><br><span class="line"></span><br><span class="line">    eigVals, eigVects = np.linalg.eig(S)</span><br><span class="line">    E = np.argsort(eigVals)</span><br><span class="line">    k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">    W = eigVects[:, k_E]</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">sum</span>(eigVals[k_E]) / <span class="built_in">sum</span>(eigVals)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;降到&quot;</span>, k, <span class="string">&quot;维后保留的信息量是原来的&quot;</span>, n * <span class="number">100.0</span>, <span class="string">&quot;%&quot;</span>)</span><br><span class="line"></span><br><span class="line">    Y=np.dot(X, W)</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show2</span>(<span class="params">reduced_X</span>):</span></span><br><span class="line">    red_x, red_y = [], []</span><br><span class="line">    blue_x, blue_y = [], []</span><br><span class="line">    green_x, green_y = [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(reduced_X)):</span><br><span class="line">        <span class="keyword">if</span> y[i] == <span class="number">0</span>:</span><br><span class="line">            red_x.append(reduced_X[i][<span class="number">0</span>])</span><br><span class="line">            red_y.append(reduced_X[i][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span> y[i] == <span class="number">1</span>:</span><br><span class="line">            blue_x.append(reduced_X[i][<span class="number">0</span>])</span><br><span class="line">            blue_y.append(reduced_X[i][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            green_x.append(reduced_X[i][<span class="number">0</span>])</span><br><span class="line">            green_y.append(reduced_X[i][<span class="number">1</span>])</span><br><span class="line">    plt.scatter(red_x, red_y, c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    plt.scatter(blue_x, blue_y, c=<span class="string">&#x27;b&#x27;</span>, marker=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    plt.scatter(green_x, green_y, c=<span class="string">&#x27;g&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show3</span>(<span class="params">X</span>):</span></span><br><span class="line">    red_x, red_y, red_z = [], [], []</span><br><span class="line">    blue_x, blue_y, blue_z = [], [], []</span><br><span class="line">    green_x, green_y, green_z = [], [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X)):</span><br><span class="line">        <span class="keyword">if</span> y[i] == <span class="number">0</span>:</span><br><span class="line">            red_x.append(X[i][<span class="number">0</span>])</span><br><span class="line">            red_y.append(X[i][<span class="number">1</span>])</span><br><span class="line">            red_z.append(X[i][<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">elif</span> y[i] == <span class="number">1</span>:</span><br><span class="line">            blue_x.append(X[i][<span class="number">0</span>])</span><br><span class="line">            blue_y.append(X[i][<span class="number">1</span>])</span><br><span class="line">            blue_z.append(X[i][<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            green_x.append(X[i][<span class="number">0</span>])</span><br><span class="line">            green_y.append(X[i][<span class="number">1</span>])</span><br><span class="line">            green_z.append(X[i][<span class="number">2</span>])</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = fig.gca(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">    ax.scatter(red_x, red_y, red_z, c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    ax.scatter(blue_x, blue_y, blue_z, c=<span class="string">&#x27;b&#x27;</span>, marker=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    ax.scatter(green_x, green_y, green_z, c=<span class="string">&#x27;g&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = load_iris()</span><br><span class="line">    y = data.target</span><br><span class="line">    X = data.data</span><br><span class="line"></span><br><span class="line">    <span class="comment">#PCA</span></span><br><span class="line">    <span class="comment">#降到2维</span></span><br><span class="line">    PCA_2D = np.array(MyPCA(X, <span class="number">2</span>))</span><br><span class="line">    show2(PCA_2D)</span><br><span class="line">    <span class="comment"># 降到3维</span></span><br><span class="line">    PCA_3D = np.array(MyPCA(X, <span class="number">3</span>))</span><br><span class="line">    show3(PCA_3D)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#LDA</span></span><br><span class="line">    <span class="comment"># 降到2维</span></span><br><span class="line">    LDA_2D = np.array(MyLDA(X,y,<span class="number">2</span>))</span><br><span class="line">    show2(LDA_2D)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p><strong>如有错误，欢迎指正；如果有更好的，欢迎分享。</strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>PCA</tag>
        <tag>LDA</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|人工智能</title>
    <url>/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    <content><![CDATA[<p><strong>人工智能简单的笔记</strong><br><strong>ψ(｀∇´)ψ</strong><br><span id="more"></span></p>
<h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><h2 id="什么是人工智能？"><a href="#什么是人工智能？" class="headerlink" title="什么是人工智能？"></a>什么是人工智能？</h2><ol>
<li><strong>智能机器</strong>：<br>能够在各类环境中自主地或交互地执行各种拟人任务的机器。</li>
<li><strong>人工智能(学科)</strong>：<br>人工智能(学科)是计算机科学中涉及研究、设计和应用智能机器的一个分支。它的近期主要目标在于研究用机器来模仿和执行人脑的某些智力功能，并开发相关理论和技术。</li>
<li><strong>人工智能(能力)</strong>：<br>人工智能(能力)是智能机器所执行的通常与人类智能有关的智能行为，如判断、推理、证明、识别、感知、理解、通信、设计、思考、规划、学习和问题求解等思维活动。<h2 id="人工智能有哪些学派？"><a href="#人工智能有哪些学派？" class="headerlink" title="人工智能有哪些学派？"></a>人工智能有哪些学派？</h2><strong>符号主义</strong>：以知识的符号表达为基础，通过推理进行问题求解<br><strong>连接主义</strong>：认为人的思维基元是神经元，而不是符号处理过程<br><strong>行为主义</strong>：主张从行为方面模拟、延伸、扩展人的智能，认为“智能”可以不需要“知识”</li>
</ol>
<h1 id="第二章-知识表示方法"><a href="#第二章-知识表示方法" class="headerlink" title="第二章 知识表示方法"></a>第二章 知识表示方法</h1><h2 id="什么是知识"><a href="#什么是知识" class="headerlink" title="什么是知识"></a>什么是知识</h2><ol>
<li>数据与信息：<br>数据是信息的载体和表示；信息是数据的语义。</li>
<li>知识：<br>一般来说，把有关信息关联在一起所形成的信息结构称为知识。<h2 id="一些重要的等价式"><a href="#一些重要的等价式" class="headerlink" title="一些重要的等价式"></a>一些重要的等价式</h2><img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.png" alt="1"><h2 id="一些重要的永真蕴含式"><a href="#一些重要的永真蕴含式" class="headerlink" title="一些重要的永真蕴含式"></a>一些重要的永真蕴含式</h2><img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.png" width="80%" height="60%" div align="center/"><h2 id="状态空间的搜索策略"><a href="#状态空间的搜索策略" class="headerlink" title="状态空间的搜索策略"></a>状态空间的搜索策略</h2><img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.png" alt="1"><h3 id="搜索策略"><a href="#搜索策略" class="headerlink" title="搜索策略"></a>搜索策略</h3></li>
</ol>
<ul>
<li>广度优先搜索按照“先扩展出的节点先被考察”的原则进行搜索；</li>
<li>深度优先搜索按照“后扩展出的节点先被考察”的原则进行搜索；</li>
<li>有界深度优先搜索的原则与深度优先搜索相同，但是它规定了深度限界，使搜索不得无限制地向纵深方向发展；</li>
<li>代价树的广度优先搜索按照“哪个节点到根节点的代价小就先考察哪个节点”的原则进行搜索；</li>
<li>代价树的深度优先搜索按照“当前节点的哪个子节点到其父节点的代价小就先考察哪个子节点”的原则进行搜索；</li>
<li>局部择优搜索按照“当前节点的哪个子节点到目标节点的估计代价小就先考察哪个子节点”的原则进行搜索；</li>
<li>全局择优搜索按照“哪个节点到目标节点的估计代价小就先考察哪个节点”的原则进行搜索</li>
</ul>
<p>以重排九宫为例</p>
<h2 id="盲目搜索"><a href="#盲目搜索" class="headerlink" title="盲目搜索"></a>盲目搜索</h2><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><p><img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.png" alt="4"></p>
<blockquote>
<p>优点：<br>    只要问题有解，用广度优先搜索总可以得到解，而且得到的是路径最短的解。<br>缺点：<br>    广度优先搜索盲目性较大，当目标节点距初始节点较远时将会产生许多无用节点，搜索效率低。</p>
</blockquote>
<h3 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h3><p><img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.png" alt="5"></p>
<blockquote>
<p>1.在深度优先搜索中，搜索一旦进入某个分支，就将沿着该分支一直向下搜索。如果目标节点恰好在此分支上，则可较快地得到解。但是，如果目标节点不在此分支上，而该分支又是一个无穷分支，则就不可能得到解。所以深度优先搜索是不完备的，即使问题有解，它也不一定能求得解。<br>2.用深度优先求得的解，不一定是路径最短的解。<br>3.本质：以初始节点为根节点，在状态空间图中按照深度优先的原则，生成一棵搜索树。</p>
</blockquote>
<h3 id="有界深度优先搜索"><a href="#有界深度优先搜索" class="headerlink" title="有界深度优先搜索"></a>有界深度优先搜索</h3><p><img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.png" alt="6"></p>
<blockquote>
<p>1.如果问题有解，且其路径长度≤dm，则上述搜索过程一定能求得解。但是，若解的路径长度&gt;dm,则上述搜索过程就得不到解。这说明在有界深度优先搜索中，深度界限的选择是很重要的。<br>2.要恰当地给出dm的值是比较困难的。即使能求出解，它也不一定是最优解。</p>
</blockquote>
<h3 id="代价树"><a href="#代价树" class="headerlink" title="代价树"></a>代价树</h3><p>上标有代价(或费用)的树称为代价树。</p>
<p>用g(x)表示从初始节点S0到节点x的代价，用c(x1,x2)表示从父节点x1到子节点x2的代价，则有：</p>
<script type="math/tex; mode=display">g(x_2)=g(x_1)+c(x_1,x_2)</script><h3 id="代价树的广度优先搜索"><a href="#代价树的广度优先搜索" class="headerlink" title="代价树的广度优先搜索"></a>代价树的广度优先搜索</h3><p><strong>搜索过程</strong></p>
<ol>
<li>把初始节点S0放入OPEN表，令g(S0)=0。</li>
<li>如果OPEN表为空，则问题无解，退出。</li>
<li>把OPEN表的第一个节点（记为节点n）取出放入CLOSE表。</li>
<li>考察节点n是否为目标节点。若是，则求得了问题的解，退出。</li>
<li>若节点n不可扩展，则转第2步。</li>
<li>扩展节点n，为每一个子节点都配置指向父节点的指针，并将各子节点放入OPEN表中；计算各子节点的代价，按各节点的代价对OPEN表中的全部节点进行排序(按从小到大的顺序)，然后转第2步</li>
</ol>
<h3 id="代价树的深度优先搜索"><a href="#代价树的深度优先搜索" class="headerlink" title="代价树的深度优先搜索"></a>代价树的深度优先搜索</h3><p><strong>搜索过程</strong></p>
<ol>
<li>把初始节点S0放入OPEN表，令g(S0)=0。</li>
<li>如果OPEN表为空，则问题无解，退出。</li>
<li>把OPEN表的第一个节点（记为节点n）取出放入CLOSE表。</li>
<li>考察节点n是否为目标节点。若是，则求得了问题的解，退出。</li>
<li>若节点n不可扩展，则转第2步。</li>
<li>扩展节点n，将其子节点按“边”代价从小到大的顺序放到OPEN表中的首部，并为每一个子节点都配置指向父节点的指针，然后转第2步。<blockquote>
<p>代价树的深度优先搜索是不完备的。</p>
</blockquote>
</li>
</ol>
<h2 id="启发式搜索"><a href="#启发式搜索" class="headerlink" title="启发式搜索"></a>启发式搜索</h2><p>盲目搜索具有较大的盲目性，产生的无用节点较多，效率不高。</p>
<p>启发式搜索采用问题自身的特性信息，以指导搜索朝着最有希望的方向前进。这种搜索针对性较强，因而效率较高</p>
<h3 id="启发性信息与估价函数"><a href="#启发性信息与估价函数" class="headerlink" title="启发性信息与估价函数"></a>启发性信息与估价函数</h3><p>可用于指导搜索过程，且与具体问题有关的信息称为启发性信息。<br>用于评估节点重要性的函数称为估价函数。其一般形式为：</p>
<script type="math/tex; mode=display">f(x) = g(x)+h(x)</script><blockquote>
<p>其中g(x)表示从初始节点S0到节点x的代价；h(x)是从节点x到目标节点Sg的最优路径的代价的估计，它体现了问题的启发性信息，称为启发函数。 f(x) 决定节点在OPEN表中的次序。<br>g(x) 指出了搜索的横向趋势，有利于搜索的完备性，但影响搜索的效率。<br>h(x)指出了搜索的纵向趋势，有利于提高搜索的效率，但影响搜索的完备性。</p>
</blockquote>
<h3 id="局部择优搜索"><a href="#局部择优搜索" class="headerlink" title="局部择优搜索"></a>局部择优搜索</h3><p>局部择优搜索是一种启发式搜索方法，是对深度优先搜索方法的一种改进。<br>基本思想：当一个节点被扩展以后，按f(x)对每一个子节点计算估价值，并选择最小者作为下一个要考察的节点。</p>
<p><strong>搜索过程</strong></p>
<ol>
<li>把初始节点S0放入OPEN表，计算f(S0)。</li>
<li>如果OPEN表为空，则问题无解，退出。</li>
<li>把OPEN表的第一个节点（记为节点n）取出放入CLOSE表。</li>
<li>考察节点n是否为目标节点。若是，则求得了问题的解，退出。</li>
<li>若节点n不可扩展，则转第2步。</li>
<li>扩展节点n，用估价函数f(x)计算每个子节点的估价值，并按估价值从小到大的顺序放到OPEN表中的首部，并为每一个子节点都配置指向父节点的指针，然后转第2步。</li>
</ol>
<blockquote>
<p>在局部择优搜索中，若令f(x) = g(x)，则局部择优搜索就成为代价树的深度优先搜索。<br>在局部择优搜索中，若令f(x) =d(x)，这里d(x) 表示节点x的深度，则局部择优搜索就成为深度优先搜索。<br>因此：深度优先搜索、代价树的深度优先搜索均为局部择优搜索的特例</p>
</blockquote>
<h3 id="全局择优搜索"><a href="#全局择优搜索" class="headerlink" title="全局择优搜索"></a>全局择优搜索</h3><p>每当要选择下一个节点进行考察时，全局择优搜索每次总是从OPEN表的全体节点中选择一个估价值最小的节点。<br><strong>搜索过程</strong></p>
<ol>
<li>把初始节点S0放入OPEN表，计算f(S0)。</li>
<li>如果OPEN表为空，则问题无解，退出。</li>
<li>把OPEN表的第一个节点（记为节点n）取出放入CLOSE表。</li>
<li>考察节点n是否为目标节点。若是，则求得了问题的解，退出。</li>
<li>若节点n不可扩展，则转第2步。</li>
<li>扩展节点n，用估价函数f(x)计算每个子节点的估价值，并为每一个子节点都配置指向父节点的指针。把这些子节点都送入OPEN表中，然后对OPEN表中的全部节点按估价值从小至大的顺序进行排序，然后转第2步。</li>
</ol>
<blockquote>
<p>在全局择优搜索中，若令f(x) = g(x)，则它就成为代价树的广度优先搜索。<br>在全局择优搜索中，若令f(x) =d(x)，这里d(x) 表示节点x的深度，则它就成为广度优先搜索。<br>因此：广度优先搜索、代价树的广度优先搜索是全局择优搜索的两个特例。</p>
</blockquote>
<p><strong>例子</strong><br>设估价函数为 f(x)=d(x)+h(x)，其中，d(x)表示节点x的深度，h(x)表示节点x的格局与目标节点格局不相同的牌数。<br><img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.png" alt="7"></p>
<h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="变量代换"><a href="#变量代换" class="headerlink" title="变量代换"></a>变量代换</h2><p>代换是一个形如$\{t_1/x_1,t_2/x_2,…,t_n/x_n\}$的有限集合。<br>其中$t_1,t_2,…,t_n$是项（常量、变量、函数）;$x_1,x_2,…,x_n$是（某一公式中）互不相同的变元；<br>$t_i/x_i$表示用$t_i$代换$x_i$<br>不允许$t_i$与$x_i$相同，也不允许变元$x_i$循环地出现在另一个$t_j$中。</p>
<blockquote>
<p>例如：<br>{a/x,f(b)/y,w/z}是一个代换<br>{g(y)/x,f(x)/y}不是代换<br>{g(a)/x,f(x)/y}是代换</p>
</blockquote>
<h2 id="代换的复合"><a href="#代换的复合" class="headerlink" title="代换的复合"></a>代换的复合</h2><p>定义 设<br>$\theta=\{t_1/x_1,t_2/x_2,\cdots,t_n/x_n\}$<br>$\lambda=\{u_1/y_1,u_2/y_2,\cdots,u_m/y_m\}$<br>是两个代换<br>则这两个代换的复合也是一个代换，它是从</p>
<script type="math/tex; mode=display">\{t_1\lambda/x_1,t_2\lambda/x_2,\cdots,t_n\lambda/x_n,u_1/y_1,u_2/y_2,\cdots,u_m/y_m\}</script><p>中删去如下两种元素：<br>$t_i\lambda/x_i \quad 当t_i\lambda=x_i$<br>$u_i/y_i \quad 当y_i\in\{x_1,x_2,\cdots,x_n\}$<br>后剩下的元素所构成的集合，记为θ°λ</p>
<blockquote>
<p>(1) $t_i\lambda$表示对$t_i$运用λ进行代换。<br>(2)θ°λ就是对一个公式F先运用θ进行代换，然后再运用λ进行代换：F(θ°λ)=（F θ）λ</p>
</blockquote>
<h2 id="最一般合一"><a href="#最一般合一" class="headerlink" title="最一般合一"></a>最一般合一</h2><ul>
<li>F={P(a,x,f(g(y))),P(z,f(z),f(u))}</li>
<li>求其最一般合一的过程：</li>
<li>令F0=F, σ0=ε。 F0中有两个表达式，所以σ0不是最一般合一。<br>差异集：D0={a,z}。代换： {a/z}<br>F1= F0 {a/z}={P(a,x,f(g(y))),P(a,f(a),f(u))} 。<br>σ1=σ0°{a/z}={a/z}<br>D1={x,f(a)} 。代换： {f(a)/x}<br>F2=F1{f(a)/x}={P(a,f(a),f(g(y))),P(a,f(a),f(u))} 。<br>σ2=σ1°{f(a)/x}={a/z,f(a)/x}<br>D2={g(y),u} 。代换： {g(y)/u}<br>F3=F2{g(y)/u}={P(a,f(a),f(g(y))),P(a,f(a),f(g(y)))} 。<br>σ3=σ2°{g(y)/u}={a/z,f(a)/x,g(y)/u} </li>
</ul>
<h2 id="子句集"><a href="#子句集" class="headerlink" title="子句集"></a>子句集</h2><p>定义： 任何文字的析取式称为子句<br>(1) 合取范式：C1 ∧C2 ∧C3… ∧Cn<br>(2) 子句集:     S= {C1 ,C2 ,C3… ,Cn}<br>(3)任何谓词公式F都可通过等价关系及推理规则化为相应的子句集S</p>
<h3 id="把谓词公式化成子句集"><a href="#把谓词公式化成子句集" class="headerlink" title="把谓词公式化成子句集"></a>把谓词公式化成子句集</h3><ol>
<li>利用等价关系消去“→”和“↔”<br>例如公式<br>$(\forall x)((\forall y) P(x, y) \rightarrow \neg(\forall y)(Q(x, y) \rightarrow R(x, y)))$<br>可等价变换成<br>$(\forall x)(\neg(\forall y) P(x, y) \vee \neg(\forall y)(\neg Q(x, y) \vee R(x, y)))$</li>
<li>利用等价关系把“¬”移到紧靠谓词的位置上<br>上式经等价变换后<br>$(\forall x)((\exists y) \neg P(x, y) \vee(\exists y)(Q(x, y) \wedge \neg R(x, y)))$</li>
<li>重新命名变元，使不同量词约束的变元有不同的名字<br>上式经变换后<br>$(\forall x)((\exists y) \neg P(x, y) \vee(\exists z)(Q(x, z) \wedge \neg R(x, z)))$</li>
<li>消去存在量词<br>a.存在量词前面没有全称量词时，则只要用一个新的个体常量替换受该量词约束的变元。<br>b.存在量词前面有一个或者多个全称量词时，要用函数f(x1,x2,…,xn)替换受该存在量词约束的变元。<br>上式中存在量词($\exists y$)及($\exists z$)都位于($\forall x$)的后面，所以需要用函数替换，设替换y和z的函数分别是f(x)和g(x)，则替换后得到<br>$(\forall x)(\neg P(x, f(x)) \vee(Q(x, g(x)) \wedge \neg R(x, g(x))))$</li>
<li>把全称量词全部移到公式的左边<br>$(\forall x)(\neg P(x, f(x)) \vee(Q(x, g(x)) \wedge \neg R(x, g(x))))$</li>
<li>利用等价关系把公式化为Skolem标准形<br>$P \vee(Q \wedge R) \Leftrightarrow(P \vee Q) \wedge(P \vee R)$<br>Skolem标准形的一般形式是<br>$\left(\forall x_{1}\right)\left(\forall x_{2}\right) \cdots\left(\forall x_{n}\right) M$<br>其中，M是子句的合取式，称为Skolem标准形的母式。<br>上式化为Skolem标准形后得到<br>$(\forall x)((\neg P(x, f(x)) \vee Q(x, g(x))) \wedge(\neg P(x, f(x)) \vee \neg R(x, g(x))))$</li>
<li>消去全称量词</li>
<li>对变元更名，使不同子句中的变元不同名<br>$(\neg P(x, f(x)) \vee Q(x, g(x))) \wedge(\neg P(y, f(y)) \vee \neg R(y, g(y)))$</li>
<li>消去合取词，就得到子句集<br>$\neg P(x, f(x)) \vee Q(x, g(x))$<br>$\neg P(y, f(y)) \vee \neg R(y, g(y))$</li>
</ol>
<h2 id="海伯伦理论（Herbrand）"><a href="#海伯伦理论（Herbrand）" class="headerlink" title="海伯伦理论（Herbrand）"></a>海伯伦理论（Herbrand）</h2><p>为了判断子句集的不可满足性，需要对所有可能论域上的所有解释进行判定。只有当子句集对任何非空个体域上的任何一个解释都是不可满足的时候，才可断定该子句集是不可满足的。</p>
<h2 id="鲁滨逊归结原理"><a href="#鲁滨逊归结原理" class="headerlink" title="鲁滨逊归结原理"></a>鲁滨逊归结原理</h2><h3 id="子句集S的不可满足性："><a href="#子句集S的不可满足性：" class="headerlink" title="子句集S的不可满足性："></a>子句集S的不可满足性：</h3><p>对于任意论域中的任意一个解释，S中的子句不能同时取得真值T。一旦S中包含空子句，则S必不可满足。    </p>
<h3 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h3><p>检查子句集S中是否包含空子句。若包含，则S不可满足；若不包含，就在子句集中选择合适的子句进行归结，一旦通过归结能推出空子句，就说明子句集S是不可满足的。</p>
<h2 id="归结反演的步骤"><a href="#归结反演的步骤" class="headerlink" title="归结反演的步骤"></a>归结反演的步骤</h2><p>设F为已知前提的公式集，Q为目标公式(结论)，用归结反演证明Q为真的步骤是：</p>
<ol>
<li>否定Q，得到¬Q；</li>
<li>把¬Q并入到公式集F中，得到{F, ¬Q};</li>
<li>把公式集{F, ¬Q}化为子句集S；</li>
<li>应用归结原理对子句集S中的子句进行归结，并把每次归结得到的归结式都并入S中。如此反复进行，若出现了空子句，则停止归结，此时就证明了Q为真。</li>
</ol>
<h2 id="应用归结原理求取问题的答案"><a href="#应用归结原理求取问题的答案" class="headerlink" title="应用归结原理求取问题的答案"></a>应用归结原理求取问题的答案</h2><h3 id="求解的步骤："><a href="#求解的步骤：" class="headerlink" title="求解的步骤："></a>求解的步骤：</h3><ol>
<li>把已知前提用谓词公式表示出来，并且化为相应的子句集。设该子句集的名字为S。</li>
<li>把待求解的问题也用谓词公式表示出来，然后把它否定并与谓词Answer构成析取式。Answer是一个为了求解问题而专设的谓词，其变元须与问题公式的变元完全一致。</li>
<li>把此析取式化为子句集，并且把该子句集并入到子句集S中，得到子句集S’。</li>
<li>对S’应用归结原理进行归结。</li>
<li>若得到归结式Answer，则答案就在Answer中。</li>
</ol>
<h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><h2 id="可信度方法"><a href="#可信度方法" class="headerlink" title="可信度方法"></a>可信度方法</h2><p><strong>概念</strong></p>
<ul>
<li>根据经验对一个事物和现象为真的相信程度称为可信度。</li>
<li>在可信度方法中，由专家给出规则或知识的可信度，从而可避免对先验概率、条件概率的要求。</li>
<li>可信度方法首先在专家系统MYCIN中得到了成功的应用。</li>
</ul>
<h2 id="C-F模型"><a href="#C-F模型" class="headerlink" title="C-F模型"></a>C-F模型</h2><h3 id="组合证据不确定性的算法"><a href="#组合证据不确定性的算法" class="headerlink" title="组合证据不确定性的算法"></a>组合证据不确定性的算法</h3><p>可采用最大最小法。<br>若$\mathrm{E}=\mathrm{E}_{1} \text { AND } \mathrm{E}_{2} \text { AND } \ldots \text { AND } \mathrm{E}_{\mathrm{n}}$，则</p>
<script type="math/tex; mode=display">\mathrm{CF}(\mathrm{E})=\min \left\{\mathrm{CF}\left(\mathrm{E}_{1}\right), \mathrm{CF}\left(\mathrm{E}_{2}\right), \ldots, \mathrm{CF}\left(\mathrm{E}_{n}\right)\right\}</script><p>若$\mathrm{E}=\mathrm{E}_{1} \text { OR } \mathrm{E}_{2} \text { OR } \ldots \text { OR } \mathrm{E}_{\mathrm{n}}$，则</p>
<script type="math/tex; mode=display">\mathrm{CF}(\mathrm{E})=\max \left\{\mathrm{CF}\left(\mathrm{E}_{1}\right), \mathrm{CF}\left(\mathrm{E}_{2}\right), \ldots, \mathrm{CF}\left(\mathrm{E}_{\mathrm{n}}\right)\right\}</script><h3 id="结论不确定性的合成算法"><a href="#结论不确定性的合成算法" class="headerlink" title="结论不确定性的合成算法"></a>结论不确定性的合成算法</h3><p>若由多条不同知识推出了相同的结论，但可信度不同，则用合成算法求出综合可信度。<br>设有如下知识：<br>IF $\quad \mathrm{E}_{1} \quad$ THEN $\quad \mathrm{H} \quad\left(\mathrm{CF}\left(\mathrm{H}, \mathrm{E}_{1}\right)\right)$<br>IF $\quad \mathrm{E}_{2} \quad$ THEN $\quad \mathrm{H} \quad\left(\mathrm{CF}\left(\mathrm{H}, \mathrm{E}_{2}\right)\right)$<br>则结论H的综合可信度分如下两步算出：<br>首先分别对每一条知识求出$CF(H)$: 计算$CF_1(H)$,$CF_2(H)$<br>然后用下述公式求出E1与E2对H的综合可信度$CF_{12}(H)$:</p>
<script type="math/tex; mode=display">P(H | S)=\left\{\begin{array}{ll}{C F_{1}(H)+C F_{2}(H)-C F_{1}(H) \times C F_{2}(H), C F_{1}(H) \geq 0, C F_{2}(H) \geq 0}\\ {C F_{1}(H)+C F_{2}(H)+C F_{1}(H) \times C F_{2}(H), C F_{1}(H)<0, C F_{2}(H)<0}\\{\frac{C F_{1}(H)+C F_{2}(H)}{1-\min \left\{\left|C F_{1}(H)\right|, C F_{2}(H) |\right\}} \qquad, C F_{1}(H) \times C F_{2}(H)<0}\end{array}\right.</script><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例 设有如下一组知识：</span><br><span class="line">R1: IF	E1	THEN		H	(0.8)</span><br><span class="line">R2: IF	E2	THEN		H	(0.6)</span><br><span class="line">R3: IF	E3	THEN		H	(-0.5)</span><br><span class="line">R4: IF	E4 AND (E5 OR E6)	THEN		E1	(0.7)</span><br><span class="line">R5: IF	E7 AND E8 THEN		E3	(0.9)</span><br><span class="line">已知：CF(E2)=0.8, CF(E4)=0.5, CF(E5)=0.6</span><br><span class="line">		CF(E6)=0.7, CF(E7)=0.6, CF(E8)=0.9</span><br><span class="line">求：CF(H)=？</span><br><span class="line">解：由R4得到：</span><br><span class="line">CF(E1)=0.7×max&#123;0,CF[E4 AND (E5 OR E6)]&#125;</span><br><span class="line">	   =0.7×max&#123;0,min&#123;CF(E4),CF(E5 OR E6)&#125;&#125;</span><br><span class="line">	   =0.35</span><br><span class="line">由R5得到：</span><br><span class="line">CF(E3)=0.9×max&#123;0,CF[E7 AND E8]&#125;</span><br><span class="line">	   =0.54</span><br><span class="line">由R1得到：</span><br><span class="line">CF1(H)=0.8×max&#123;0,CF(E1)&#125;=0.28</span><br><span class="line">由R2得到：</span><br><span class="line">CF2(H)=0.6×max&#123;0,CF(E2)&#125;=0.48</span><br><span class="line">由R3得到：</span><br><span class="line">CF3(H)=-0.5×max&#123;0,CF(E3)&#125;=-0.27</span><br><span class="line">根据结论不确定性的合成算法：</span><br><span class="line">CF12(H)=CF1(H)+CF2(H)-CF1(H)×CF2(H)=0.63</span><br><span class="line">CF123(H)=[CF12(H)+CF3(H)]/[1-min&#123;|CF12(H)|,|CF3(H)|&#125;]</span><br><span class="line">		  =0.49</span><br><span class="line">即最终的综合可信度为CF(H)=0.49。</span><br></pre></td></tr></table></figure>
<h3 id="加权的不确定性推理"><a href="#加权的不确定性推理" class="headerlink" title="加权的不确定性推理"></a>加权的不确定性推理</h3><p>若有$CF(E_1)，CF(E_2)，…，CF(E_n)$，则组合证据的可信度为：</p>
<script type="math/tex; mode=display">C F(E)=\sum_{i=1}^{n}\left(\omega_{i} \times C F\left(E_{i}\right)\right)</script><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例设有如下知识：</span><br><span class="line">R1: IF E1(0.6) AND E2(0.4) THEN E6(0.8,0.75)</span><br><span class="line">R2: IF E3(0.5) AND E4(0.3) AND E5(0.2) </span><br><span class="line">	 THEN E7(0.7,0.6)</span><br><span class="line">R3: IF E6(0.7) AND E7(0.3) THEN H(0.75,0.6)</span><br><span class="line">已知：CF(E1)=0.9, CF(E2)=0.8, CF(E3)=0.7,</span><br><span class="line">		CF(E4)=0.6, CF(E5)=0.5</span><br><span class="line">求：CF(H)=?</span><br><span class="line">解：由R1得到：</span><br><span class="line">CF(E1(0.6) AND E2(0.4))=0.86&gt;λ1=0.75</span><br><span class="line">∴R1可被应用。</span><br><span class="line">由R2得到：</span><br><span class="line">CF(E3(0.5) AND E4(0.3) AND E5(0.2))＝0.63&gt;λ2 =0.6</span><br><span class="line">∴R2可被应用。</span><br><span class="line">∵0.86&gt;0.63 </span><br><span class="line">∴R1先被应用。</span><br><span class="line">由R1得到：CF(E6)=0.69</span><br><span class="line">由R2得到：CF(E7)=0.44</span><br><span class="line">由R3得到：</span><br><span class="line">CF(E6(0.7) AND E7(0.3))=0.615&gt;λ3 =0.6</span><br><span class="line">∴R3可被应用,得到：</span><br><span class="line">CF(H)=0.46</span><br><span class="line">即最终得到的结论H可信度为0.46</span><br></pre></td></tr></table></figure>
<h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><h2 id="扎德法推理"><a href="#扎德法推理" class="headerlink" title="扎德法推理"></a>扎德法推理</h2><p>扎德提出了两种方法：一种称为条件命题的极大极小规则；另一种称为条件命题的算术规则，由它们获得的模糊关系分别记为$R_m$和$R_a$。<br>设$A \in F(U), B \in F(V)$，其表示分别为</p>
<script type="math/tex; mode=display">A=\int_{U} \mu_{A}(u) / u \quad, B=\int_{V} \mu_{B}(u) / u</script><p>用$x, \cup, \cap, \neg, \oplus$分别表示模糊集的笛卡儿乘积、并、交、补及有界和运算，则扎德把$R_m$和$R_a$分别定义为：<br>$R_{m}=(A \times B) \cup(\neg A \times V)=\int_{U \times V}\left(\mu_{A}(u) \wedge \mu_{B}(v)\right) \vee\left(1-\mu_{A}(u)\right) /(u, v)$<br>$R_{a}=(\neg A \times V) \oplus(U \times B)=\int_{U \times V} 1 \wedge\left(1-\mu_{A}(u)+\mu_{B}(v)\right) /(u, v)$</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>例 设$\mathbf{U}=\mathbf{V}=\{1,2,3,4,5\}, \mathbf{A}=\mathbf{1} / 1+0.5 / 2, \mathbf{B}=0.4 / 3+0.6 / 4+1 / 5$<br>并设模糊知识及模糊证据分别为：</p>
<script type="math/tex; mode=display">\text { IF }x \text { is A THEN } y \text { is } B \quad x \text { is } A^{\prime}</script><p>其中，$ A^{\prime}$的模糊集为：$\mathbf{A}^{\prime}=\mathbf{1} / \mathbf{1}+\mathbf{0} .4 / 2+\mathbf{0} .2 / 3$<br>则由模糊知识可分别得到$R_m$和$R_a$：<br>$R_{m}=\left[\begin{array}{ccccc}{0} &amp; {0} &amp; {0.4} &amp; {0.6} &amp; {1} \\ {0.5} &amp; {0.5} &amp; {0.5} &amp; {0.5} &amp; {0.5} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1}\end{array}\right], R_{a}=\left[\begin{array}{ccccc}{0} &amp; {0} &amp; {0.4} &amp; {0.6} &amp; {1} \\ {0.5} &amp; {0.5} &amp; {0.9} &amp; {1} &amp; {1} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1}\end{array}\right]$<br>则<br>$\mathbf{B}_{\mathrm{m}}^{\prime}=\mathbf{A}^{\prime} \circ \mathbf{R}_{\mathrm{m}}=\{0.4,0.4,0.4,0.6,1\}$<br>$\mathbf{B}_{\mathrm{a}}^{\prime}=\mathbf{A}^{\prime} \circ \mathbf{R}_{\mathrm{a}}=\{0.4,0.4,0.4,0.6,1\}$</p>
]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|数据结构</title>
    <url>/2019/08/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><strong>数据结构复习笔记</strong><br><span id="more"></span></p>
<h1 id="第1章-基本概念"><a href="#第1章-基本概念" class="headerlink" title="第1章 基本概念"></a>第1章 基本概念</h1><p><strong>数据结构</strong>是指相互之间存在一种或多种<strong>特定关系</strong>的<strong>数据元素集合</strong><br>（结构指的是数据元素相互之间的关系）</p>
<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><ol>
<li>对客观事物的符号描述，能输入到计算机中并被计算机程序处理的符号的总称；</li>
<li>能被计算机识别、存储和加工处理的信息的载体</li>
</ol>
<h3 id="数据元素"><a href="#数据元素" class="headerlink" title="数据元素"></a>数据元素</h3><p>数据元素是组成数据的基本单位, 是数据集合的个体，在计算机中通常作为一个整体进行考虑和处理。 </p>
<h3 id="数据项"><a href="#数据项" class="headerlink" title="数据项"></a>数据项</h3><p>一个数据元素可由若干个数据项组成，数据项是数据的不可分割的最小单位。</p>
<blockquote>
<p>例：一条书目信息是由书名、作者名、分类等多个数据项组成的</p>
</blockquote>
<h2 id="1-1-数据的逻辑结构"><a href="#1-1-数据的逻辑结构" class="headerlink" title="1.1 数据的逻辑结构"></a>1.1 数据的逻辑结构</h2><p>数据元素之间的关系。逻辑结构可看作是从具体问题抽象出来的数学模型</p>
<h3 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h3><p>所谓线性结构,该结构中的结点之间存在一对一的关系。<strong>其特点</strong>开始结点和终端结点都是惟一的,除了开始结点和终端结点以外,其余结点都有且仅有一个前驱结点,有且仅有一个后继结点。</p>
<blockquote>
<p>顺序表就是典型的线性结构。</p>
</blockquote>
<h3 id="非线性结构"><a href="#非线性结构" class="headerlink" title="非线性结构"></a>非线性结构</h3><p>所谓非线性结构,该结构中的结点之间存在一对多或多对多的关系。它又可以细分为树形结构和图形结构两类。</p>
<h4 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h4><p>该结构中的结点之间存在一对多的关系。其特点是每个结点最多只有一个前驱,但可以有多个后继,可以有多个终端结点。非线性结构树形结构简称为树。</p>
<h4 id="图形结构"><a href="#图形结构" class="headerlink" title="图形结构"></a>图形结构</h4><p>该结构中的结点之间存在多对多的关系。其特点是每个结点的前驱和后继的个数都可以是任意的。因此,可能没有开始结点和终端结点,也可能有多个开始结点、多个终端结点。图形结构简称为图。</p>
<h2 id="1-2-数据的物理结构"><a href="#1-2-数据的物理结构" class="headerlink" title="1.2 数据的物理结构"></a>1.2 数据的物理结构</h2><p>又称为<strong>存储结构</strong>，在计算机中的存储映象，是逻辑结构在计算机中的实现，它包括数据元素的表示和关系的表示。</p>
<blockquote>
<p>四种常用的存储方法：顺序存储，链式存储，索引存储，散列存储。</p>
</blockquote>
<h2 id="1-3-算法"><a href="#1-3-算法" class="headerlink" title="1.3 算法"></a>1.3 算法</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>有穷性，确定性，输入，输出，可行性。</p>
<h3 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h3><p>正确性，可读性，健壮性，高效率与低存储量需求</p>
<h1 id="第2章-线性表"><a href="#第2章-线性表" class="headerlink" title="第2章 线性表"></a>第2章 线性表</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><p>线性表是具有相同特性数据元素的一个有限序列。</p>
<h2 id="2-2-逻辑特性"><a href="#2-2-逻辑特性" class="headerlink" title="2.2 逻辑特性"></a>2.2 逻辑特性</h2><p>一个表头，一个表尾。表头无前驱，表尾无后继。中间元素只有一个直接前驱和一个直接后继。</p>
<h2 id="2-3-存储结构"><a href="#2-3-存储结构" class="headerlink" title="2.3 存储结构"></a>2.3 存储结构</h2><p>分为顺序结构（顺序表）和链式结构（链表）。<br>顺序表有随机访问特性，占用连续的存储空间，空间利用率高。<br>链表进行插入操作无须移动元素。</p>
<h3 id="2-3-1-顺序表"><a href="#2-3-1-顺序表" class="headerlink" title="2.3.1 顺序表"></a>2.3.1 顺序表</h3><p>1 定义结构体<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[max];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;Sqlist;</span><br></pre></td></tr></table></figure><br>2 查找<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(Sqlist L,<span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(e==L.data[i])</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3 插入<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Sqlist &amp;L,<span class="keyword">int</span> p,<span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p&lt;<span class="number">0</span>||p&gt;L.length||L.length==max)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=L.length<span class="number">-1</span>;i&gt;=p;i--)</span><br><span class="line">		L.data[i+<span class="number">1</span>]=L.data[i];</span><br><span class="line">	L.data[p]=e;</span><br><span class="line">	L.length++;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4 删除<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delet</span><span class="params">(Sqlist &amp;L,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p&lt;<span class="number">0</span>||p&gt;L.length)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=p;i&lt;L.length;i++)</span><br><span class="line">		L.data[i]=L.data[i+<span class="number">1</span>];</span><br><span class="line">	L.length--;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-3-2-链表"><a href="#2-3-2-链表" class="headerlink" title="2.3.2 链表"></a>2.3.2 链表</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>1 结点定义<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode;</span><br></pre></td></tr></table></figure><br>2 插入<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//尾插法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_tail</span><span class="params">(LNode *&amp;C,<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode *s,*r;</span><br><span class="line">	C=(LNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">	C-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	r=C;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">		s-&gt;data=a[i];</span><br><span class="line">		r-&gt;next=s;</span><br><span class="line">		r=r-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头插法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_head</span><span class="params">(LNode *&amp;C,<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode *s;</span><br><span class="line">	C=(LNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">	C-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s=(LNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">		s-&gt;data=a[i];</span><br><span class="line">		s-&gt;next=C-&gt;next;</span><br><span class="line">		C-&gt;next=s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><br>3 查找和删除<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindAndDelete</span><span class="params">(LNode *C,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode *p,*q;</span><br><span class="line">	p=C;</span><br><span class="line">	<span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;next-&gt;data==x)</span><br><span class="line">		&#123;</span><br><span class="line">			q=p-&gt;next;</span><br><span class="line">			p-&gt;next=p-&gt;next-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(q);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4 归并<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//归并（尾插法） </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_tail</span><span class="params">(LNode *A,LNode *B,LNode *&amp;C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode *p=A-&gt;next;</span><br><span class="line">	LNode *q=B-&gt;next;</span><br><span class="line">	LNode *r;</span><br><span class="line">	C=A;</span><br><span class="line">	C-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">free</span>(B);</span><br><span class="line">	r=C;</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;q!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;data&lt;=q-&gt;data)</span><br><span class="line">		&#123;</span><br><span class="line">			r-&gt;next=p;p=p-&gt;next;</span><br><span class="line">			r=r-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			r-&gt;next=q;q=q-&gt;next;</span><br><span class="line">			r=r-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span>(p!=<span class="literal">NULL</span>) r-&gt;next=p;</span><br><span class="line">	<span class="keyword">if</span>(q!=<span class="literal">NULL</span>) r-&gt;next=q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并（头插法）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_head</span><span class="params">(LNode *A,LNode *B,LNode *&amp;C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode *p=A-&gt;next;</span><br><span class="line">	LNode *q=B-&gt;next;</span><br><span class="line">	LNode *s;</span><br><span class="line">	C=A;</span><br><span class="line">	C-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="built_in">free</span>(B);</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;q!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;data&lt;=q-&gt;data)</span><br><span class="line">		&#123;</span><br><span class="line">			s=p;p=p-&gt;next;</span><br><span class="line">			s-&gt;next=C-&gt;next;</span><br><span class="line">			C-&gt;next=s;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			s=q;q=q-&gt;next;</span><br><span class="line">			s-&gt;next=C-&gt;next;</span><br><span class="line">			C-&gt;next=s;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		s=p;p=p-&gt;next;</span><br><span class="line">		s-&gt;next=C-&gt;next;</span><br><span class="line">		C-&gt;next=s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(q!=<span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		s=q;q=q-&gt;next;</span><br><span class="line">		s-&gt;next=C-&gt;next;</span><br><span class="line">		C-&gt;next=s;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><h1 id="第3章-栈和队列"><a href="#第3章-栈和队列" class="headerlink" title="第3章 栈和队列"></a>第3章 栈和队列</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>定义：一种只能在<strong>一端</strong>进行插入和删除操作的<strong>线性表</strong>。</p>
<p>特点：先进后出</p>
<h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><blockquote>
<p>s.top=-1表示栈空;s.top=MAX-1表示栈满</p>
</blockquote>
<p><strong>在实际使用中,可以简化书写</strong></p>
<p>初始化<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> stack[Max];<span class="keyword">int</span> top=<span class="number">-1</span>;</span><br></pre></td></tr></table></figure><br>进栈<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stack[++top]=x;</span><br></pre></td></tr></table></figure><br>出栈<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">x=stack[top--];</span><br></pre></td></tr></table></figure></p>
<p><strong>详细定义代码如下:</strong><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[MAX];</span><br><span class="line">	<span class="keyword">int</span> top;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><br>初始化<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(SqStack &amp;st)</span></span>&#123;</span><br><span class="line">	st.top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>进栈—注意是否栈满,防止上溢<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">push</span><span class="params">(SqStack &amp;st,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(st.top==MAX<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	st.top++;</span><br><span class="line">	st.data[st.top]=x;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>出栈—注意是否栈空,防止下溢<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(SqStack &amp;st,<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(st.top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	x=st.data[st.top];</span><br><span class="line">	st.top--;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h3><blockquote>
<p>lst-&gt;next=NULL表示栈空</p>
</blockquote>
<p>详细定义如下<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initStack</span><span class="params">(LNode *&amp;lst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	lst=(LNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">	lst-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(LNode *lst,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode *p;</span><br><span class="line">	p=(LNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">	p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	p-&gt;data=x;</span><br><span class="line">	p-&gt;next=lst-&gt;next;</span><br><span class="line">	lst-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">(LNode *lst,<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode *p;</span><br><span class="line">	<span class="keyword">if</span>(lst-&gt;next==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	p=lst-&gt;next;</span><br><span class="line">	x=p-&gt;data;</span><br><span class="line">	lst-&gt;next=p-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>定义：一种操作受限的线性表，在一端插入，在另一端删除。</p>
<p>特点：先进先出</p>
<h3 id="顺序队"><a href="#顺序队" class="headerlink" title="顺序队"></a>顺序队</h3><blockquote>
<p>一般采用循环队列</p>
</blockquote>
<p><strong>在实际使用中,一般采用简化书写</strong><br>操作|代码<br>-|-<br>队空|<code>front == rear</code><br>队满|<code>front == (rear+1) % maxsize</code><br>出队|<code>rear = (rear+1) % maxsize;</code><br><code>queue[rear]=x;</code><br>入队|<code>front = (front+1) % maxsize;</code><br><code>queue[front]=x;</code></p>
<p><strong>详细代如下</strong><br>1 结构体定义<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data[MAX];</span><br><span class="line">	<span class="keyword">int</span> front;</span><br><span class="line">	<span class="keyword">int</span> rear;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure></p>
<p>2 初始化<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(SqQueue &amp;q)</span></span>&#123;</span><br><span class="line">	q.front = q.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3 进队—注意队满<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Enter</span><span class="params">(SqQueue &amp;q,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>((q.rear+<span class="number">1</span>)%MAX == q.front) <span class="comment">// 队满</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	q.rear = (q.rear+<span class="number">1</span>)%MAX;</span><br><span class="line">	q.data[q.rear] = x;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>4 出队—注意队空<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Out</span><span class="params">(SqQueue &amp;q,<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(q.rear == q.front) <span class="comment">// 队空</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	q.front = (q.front+<span class="number">1</span>)%MAX;</span><br><span class="line">	x = q.data[q.front];</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="链队"><a href="#链队" class="headerlink" title="链队"></a>链队</h3><p>1 定义节点<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">	QNode *front;</span><br><span class="line">	QNode *rear;</span><br><span class="line">&#125;LQueue;</span><br></pre></td></tr></table></figure><br>2 初始化<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(LQueue *&amp;lq)</span></span>&#123;</span><br><span class="line">	lq = (LQueue*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LQueue));</span><br><span class="line">	lq-&gt;front = lq-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>3 入队<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Enter</span><span class="params">(LQueue *lq,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	QNode *p;</span><br><span class="line">	p = (QNode*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(QNode));</span><br><span class="line">	p-&gt;data = x;</span><br><span class="line">	p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span>(lq-&gt;rear == <span class="literal">NULL</span>)&#123;</span><br><span class="line">		lq-&gt;front = p;</span><br><span class="line">		lq-&gt;rear = p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		lq-&gt;rear-&gt;next = p;</span><br><span class="line">		lq-&gt;rear = p;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4 出队—注意队空</p>
<blockquote>
<p>若队列只有一个节点，出队时头指针和尾指针都需要改变。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Out</span><span class="params">(LQueue *lq,<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(lq-&gt;rear == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	x = lq-&gt;front-&gt;data;</span><br><span class="line">	<span class="keyword">if</span>(lq-&gt;front == lq-&gt;rear)</span><br><span class="line">		lq-&gt;front = lq-&gt;rear = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">		lq-&gt;front = lq-&gt;front-&gt;next;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="1-中缀表达式转后缀表达式"><a href="#1-中缀表达式转后缀表达式" class="headerlink" title="1 中缀表达式转后缀表达式"></a>1 中缀表达式转后缀表达式</h3><blockquote>
<p><a href="https://juejin.cn/post/6844903901687185422">参考链接</a></p>
</blockquote>
<p>以$a+b<em>c+(d</em>e+f)*g$为例,转化为后缀式</p>
<p><strong>手算思路</strong></p>
<ul>
<li>按先加减后乘除的原则给表达式加括号<br>结果：$((a+(b<em>c))+(((d</em>e)+f)*g))$  </li>
<li>由内到外把每个括号里的表达式换成后缀<br>最终结果：$abc<em>+de</em>f+g*+$</li>
</ul>
<p><strong>代码思路</strong></p>
<blockquote>
<p>1）如果遇到操作数，我们就直接将其输出。<br><br>2）如果遇到操作符，则我们将其放入到栈中，遇到左括号时我们也将其放入栈中。<br><br>3）如果遇到一个右括号，则将栈元素弹出，将弹出的操作符输出直到遇到左括号为止。注意，左括号只弹出并不输出。<br><br>4）如果遇到任何其他的操作符，如<strong>（“+”， “*”，“（”）</strong>等，从栈中弹出元素直到遇到发现更低优先级的元素(或者栈为空)为止。弹出完这些元素后，才将遇到的操作符压入到栈中。有一点需要注意，只有在遇到” ) “的情况下我们才弹出” ( “，其他情况我们都不会弹出” ( “。<br><br>5）如果我们读到了输入的末尾，则将栈中所有元素依次弹出。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">OPP</span><span class="params">(<span class="keyword">char</span> op)</span> <span class="comment">// 运算符等级 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span>(op)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">default</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Trans</span><span class="params">(<span class="keyword">char</span> f[],<span class="keyword">char</span> exp[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> s[MAX];<span class="keyword">int</span> top=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;f[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(f[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;f[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">			exp[j++]=f[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(top==<span class="number">-1</span>) s[++top]=f[i];</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(f[i]==<span class="string">&#x27;(&#x27;</span>) s[++top]=f[i];</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(f[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">				<span class="keyword">while</span>(s[top]!=<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">					exp[j++]=s[top--];</span><br><span class="line">				&#125;</span><br><span class="line">				top--;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">while</span>(<span class="built_in">OPP</span>(f[i]) &lt;= <span class="built_in">OPP</span>(s[top]))&#123;</span><br><span class="line">					exp[j++]=s[top--];</span><br><span class="line">					<span class="keyword">if</span>(top==<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				s[++top]=f[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(top!=<span class="number">-1</span>)&#123;</span><br><span class="line">		exp[j++]=s[top--];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-计算后缀表达式"><a href="#2-计算后缀表达式" class="headerlink" title="2 计算后缀表达式"></a>2 计算后缀表达式</h3></blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">OP</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">char</span> op,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(op==<span class="string">&#x27;+&#x27;</span>) <span class="keyword">return</span> a+b;</span><br><span class="line">	<span class="keyword">if</span>(op==<span class="string">&#x27;-&#x27;</span>) <span class="keyword">return</span> a-b;</span><br><span class="line">	<span class="keyword">if</span>(op==<span class="string">&#x27;*&#x27;</span>) <span class="keyword">return</span> a*b;</span><br><span class="line">	<span class="keyword">if</span>(op==<span class="string">&#x27;/&#x27;</span>) <span class="keyword">return</span> a/b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">com</span><span class="params">(<span class="keyword">char</span> f[])</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,i;</span><br><span class="line">	<span class="keyword">int</span> s[MAX];<span class="keyword">int</span> top=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">char</span> op;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;f[i]!=<span class="string">&#x27;\0&#x27;</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(f[i]&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;f[i]&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">			s[++top]=f[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			op=f[i];</span><br><span class="line">			b=s[top--];</span><br><span class="line">			a=s[top--];</span><br><span class="line">			c=<span class="built_in">OP</span>(a,op,b);</span><br><span class="line">			s[++top]=c;</span><br><span class="line">		&#125;</span><br><span class="line">	 &#125;</span><br><span class="line">	 <span class="keyword">return</span> s[top];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-括号匹配"><a href="#3-括号匹配" class="headerlink" title="3 括号匹配"></a>3 括号匹配</h3><p><strong>若为’(‘，入栈；若为’)’，出栈</strong>。栈空则表示完全匹配<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> s[MAX];<span class="keyword">int</span> top=<span class="number">-1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="string">&#x27;(&#x27;</span>) s[++top]=a[i];</span><br><span class="line">		<span class="keyword">if</span>(a[i]==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span> top--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(top==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
<h3 id="4-模拟队列"><a href="#4-模拟队列" class="headerlink" title="4 模拟队列"></a>4 模拟队列</h3><p>入队<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Enter</span><span class="params">(<span class="keyword">int</span> s1[],<span class="keyword">int</span> s2[],<span class="keyword">int</span> &amp;t1,<span class="keyword">int</span> &amp;t2,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(t1 == MAX<span class="number">-1</span> &amp;&amp; t2 == MAX<span class="number">-1</span>)&#123; <span class="comment">// 队满</span></span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;MAX&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> y;</span><br><span class="line">	<span class="keyword">if</span>(t1 == MAX<span class="number">-1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(t2 != <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">while</span>(t1 != <span class="number">-1</span>)&#123;</span><br><span class="line">				y = s1[t1--];</span><br><span class="line">				s2[++t2] = y;</span><br><span class="line">			&#125;</span><br><span class="line">			s1[++t1] = x;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		s1[++t1] = x;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>出队<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Out</span><span class="params">(<span class="keyword">int</span> s1[],<span class="keyword">int</span> s2[],<span class="keyword">int</span> &amp;t1,<span class="keyword">int</span> &amp;t2,<span class="keyword">int</span> &amp;x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(t1 == <span class="number">-1</span> &amp;&amp; t2 == <span class="number">-1</span>)&#123; <span class="comment">// 队空</span></span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> y;</span><br><span class="line">	<span class="keyword">if</span>(t2 != <span class="number">-1</span>)&#123;</span><br><span class="line">		x = s2[t2--];</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(t1 == <span class="number">-1</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			y = s1[t1--];</span><br><span class="line">			s2[++t2] = y;</span><br><span class="line">		&#125;</span><br><span class="line">		x = s2[t2--];</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="第4章-串"><a href="#第4章-串" class="headerlink" title="第4章 串"></a>第4章 串</h1><h1 id="第5章-数组，矩阵与广义表"><a href="#第5章-数组，矩阵与广义表" class="headerlink" title="第5章 数组，矩阵与广义表"></a>第5章 数组，矩阵与广义表</h1><h2 id="5-1-数组"><a href="#5-1-数组" class="headerlink" title="5.1 数组"></a>5.1 数组</h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p>已知$a_0$的位置,可以根据相对于$a_0$的偏移量求出其后任一$a_i$的位置</p>
<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>需要考虑<strong>行优先</strong>和<strong>列优先</strong></p>
<blockquote>
<p>例：设二维数组$A[4][5]$，求$A[2][3]$的位置。若按照行优先，$A[2][3]$是第14个；若按照列优先，$A[2][3]$是第15个；</p>
</blockquote>
<h2 id="5-2-矩阵"><a href="#5-2-矩阵" class="headerlink" title="5.2 矩阵"></a>5.2 矩阵</h2><h1 id="第6章-树"><a href="#第6章-树" class="headerlink" title="第6章 树"></a>第6章 树</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念</h2><div class="table-container">
<table>
<thead>
<tr>
<th>名称</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>结点</td>
<td>包含数据元素，而且包含指向子树的分支</td>
</tr>
<tr>
<td>结点的度</td>
<td>结点拥有子树的个数或者分支的个数</td>
</tr>
<tr>
<td>树的度</td>
<td>树中各结点度的最大值</td>
</tr>
<tr>
<td>层次</td>
<td>从根开始，根为第一层，根的孩子为第二层，以此类推。</td>
</tr>
</tbody>
</table>
</div>
<blockquote>
<p>总分支数 = 总结点数 - 1</p>
</blockquote>
<h2 id="2-二叉树"><a href="#2-二叉树" class="headerlink" title="2 二叉树"></a>2 二叉树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote>
<p>1) 每个结点<strong>最多</strong>只有两颗子树<br>2) 子树有左右顺序之分，不能颠倒  </p>
</blockquote>
<p><strong>满二叉树：</strong><br>除最后一层无任何子节点外，每一层上的所有结点都有两个子结点的二叉树。<br><strong>完全二叉树：</strong><br>一棵深度为k的有n个结点的二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，各结点的编号与深度为k的满二叉树中相同位置上的结点的编号均相同。</p>
<h3 id="主要性质"><a href="#主要性质" class="headerlink" title="主要性质"></a>主要性质</h3><ol>
<li>非空二叉树上，叶子结点数 = 双分支结点数 + 1</li>
<li>二叉树的第$i$层上，最多有$2^{i-1}$个结点。</li>
<li>高度为$k$的二叉树最多有$2^k-1$个结点。</li>
<li>$n$个结点构成的不同二叉树的个数为：$\frac{C_{2n}^n}{n+1}$</li>
<li>$n$个结点的完全二叉树的高度为：$\lfloor log_2n \rfloor+1$ 或者 $\lceil log_2{(n+1)} \rceil$ </li>
<li>$n$个结点的完全二叉树，对树中的结点按从上至下、从左到右的顺序进行编号，有如下规律：<blockquote>
<p>若某结点$a$编号为$i$，则<br>若$i \neq 1$，则$a$双亲编号为$\lfloor i/2 \rfloor$  </p>
</blockquote>
</li>
</ol>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><p>用一个数组存储一棵二叉树。  </p>
<blockquote>
<p>最适合完全二叉树，用于一般二叉树会浪费大量的存储空间。</p>
<h3 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span></span><br><span class="line">	<span class="keyword">char</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">	<span class="built_in">BTNode</span>(<span class="keyword">char</span> ch)</span><br><span class="line">	&#123;</span><br><span class="line">		lchild = <span class="literal">NULL</span>;</span><br><span class="line">		rchild = <span class="literal">NULL</span>;</span><br><span class="line">		data = ch;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;BTNode; </span><br></pre></td></tr></table></figure>
<p>从数组的某个位置的元素开始生成树<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">BTNode* <span class="title">createTree</span><span class="params">(<span class="keyword">char</span> list[],<span class="keyword">int</span> n, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (list[start] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    BTNode* root = <span class="keyword">new</span> <span class="built_in">BTNode</span>(list[start]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lnode = <span class="number">2</span>*start + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> rnode = <span class="number">2</span>*start + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> ( lnode &gt; n<span class="number">-1</span>) &#123;</span><br><span class="line">        root-&gt;lchild = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        root-&gt;lchild = <span class="built_in">createTree</span>(list,n,lnode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rnode &gt; n<span class="number">-1</span>) &#123;</span><br><span class="line">        root-&gt;rchild =<span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        root-&gt;rchild = <span class="built_in">createTree</span>(list,n,rnode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h3><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(BTNode *p)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">visit</span>(p);</span><br><span class="line">		<span class="built_in">preorder</span>(p-&gt;lchild);</span><br><span class="line">		<span class="built_in">preorder</span>(p-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>非递归<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nonpreorder</span><span class="params">(BTNode *p,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p)&#123;</span><br><span class="line">		BTNode *s[n],*b;</span><br><span class="line">		<span class="keyword">int</span> t=<span class="number">-1</span>;</span><br><span class="line">		s[++t] = p;</span><br><span class="line">		<span class="keyword">while</span>(t!=<span class="number">-1</span>)&#123;</span><br><span class="line">			b = s[t--];</span><br><span class="line">			<span class="built_in">visit</span>(b);</span><br><span class="line">			<span class="keyword">if</span>(b-&gt;rchild) s[++t]=b-&gt;rchild;</span><br><span class="line">			<span class="keyword">if</span>(b-&gt;lchild) s[++t]=b-&gt;lchild;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(BTNode *p)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">inorder</span>(p-&gt;lchild);</span><br><span class="line">		<span class="built_in">visit</span>(p);</span><br><span class="line">		<span class="built_in">inorder</span>(p-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>非递归<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">noninorder</span><span class="params">(BTNode *p,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p)&#123;</span><br><span class="line">		BTNode *s[n];<span class="keyword">int</span> t=<span class="number">-1</span>;</span><br><span class="line">		BTNode *b; </span><br><span class="line">		b = p;</span><br><span class="line">		<span class="keyword">while</span>(t != <span class="number">-1</span> || p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">			<span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">				s[++t] = p;</span><br><span class="line">				p = p-&gt;lchild;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(t != <span class="number">-1</span>)&#123;</span><br><span class="line">				p = s[t--];</span><br><span class="line">				<span class="built_in">visit</span>(p);</span><br><span class="line">				p = p-&gt;rchild;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(BTNode *p)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="built_in">postorder</span>(p-&gt;lchild);</span><br><span class="line">		<span class="built_in">postorder</span>(p-&gt;rchild);</span><br><span class="line">		<span class="built_in">visit</span>(p);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>非递归<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nonpostorder</span><span class="params">(BTNode *p,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">		BTNode *s1[n],*s2[n];</span><br><span class="line">		<span class="keyword">int</span> t1 =<span class="number">-1</span>, t2 = <span class="number">-1</span>;</span><br><span class="line">		BTNode *b;</span><br><span class="line">		s1[++t1] = p;</span><br><span class="line">		<span class="keyword">while</span>(t1 != <span class="number">-1</span>)&#123;</span><br><span class="line">			b = s1[t1--];</span><br><span class="line">			s2[++t2] = b;</span><br><span class="line">			<span class="keyword">if</span>(b-&gt;lchild) s1[++t1] = b-&gt;lchild;</span><br><span class="line">			<span class="keyword">if</span>(b-&gt;rchild) s1[++t1] = b-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span>(t2 != <span class="number">-1</span>)&#123;</span><br><span class="line">			p = s2[t2--];</span><br><span class="line">			<span class="built_in">visit</span>(p);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CS</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|RPC/RMI-书籍信息管理系统</title>
    <url>/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p><strong>使用RPC/RMI实现书籍信息管理系统及Web Service改写</strong><br><span id="more"></span></p>
<h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><p>远程过程调用(Remote Procedure Call): 使应用程序可以像调用本地节点上的过程(子程序) 那样去调用一个远程节点上的子程序。</p>
<ul>
<li>对于被调用者而言也无法区分调用者来自于本地还是远程</li>
<li>RPC将面向过程的通用编程模型扩展到了分布式环境。</li>
<li>实现了跨进程、跨语言、跨网络、跨平台的过程调用</li>
<li>强化了面向接口编程的编程风格</li>
<li>实现RPC必须要有RPC中间件的支持。</li>
</ul>
<p><strong>RPC一般采用同步调用方式</strong><br><img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/1.png" alt="RPC"></p>
<h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><p>远程方法调用(Remote Method Invocation): 将面向对象的编程模型扩展到了分布式环境。</p>
<ul>
<li>RMI使应用程序可以像调用本机上对象的方法一样调用远程主机中对象的方法。</li>
<li>利用RMI调用一个远程对象方法时，参数可以是一个本地对象，也可以是另外一个远程对象(可能存在于第三个节点)。</li>
<li>在整个系统范围内支持垃圾回收。</li>
<li>实现RMI也必须要有中间件的支持。</li>
</ul>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><ul>
<li>RPC/RMI中间件在调用者进程中植入stub模块，stub模块作为远程过程的本地代理，并且暴露与远程过程相同的接口。</li>
<li>RPC/RMI中间件在被调用者进程中植入skeleton模块，skeleton作为调用者在远程主机中的代理。</li>
<li>stub模块与skeleton模块利用Socket进行通信。</li>
<li>skeleton模块相当于Client-Server通信模式中的服务器端，要先于客户端运行，并且在某个Socket端口进行监听。<br><img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/2.png" alt="中间件"></li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>定义并利用Socket服务接口实现了一套调用者和被调用者之间的通信协议。(远程过程调用协议)。例如Java RMI的Java Remote Method Protocol (JRMP)</li>
<li>实现了过程参数的序列化、反序列化；过程运算结果的序列化、反序列化。</li>
<li>通信过程中的错误处理</li>
<li>过程服务进程(或远程对象)的集中注册与发现（目录服务）</li>
<li>远程对象的生命周期管理</li>
<li>在服务端支持并发访问。（多采用多线程技术）</li>
</ul>
<p>常用的RPC/RMI中间件有很多种，本文章使用的是Java RMI，其他的欢迎尝试和分享。</p>
<blockquote>
<p>常用的RPC/RMI中间件：<br>Java RMI：Java的自娱自乐<br>Microsoft .NET Remoting：.Net的自娱自乐<br>CORBA：重量级分布式对象中间件，跨语言<br>gRPC：Google的RPC中间件，高效，开源，跨语言<br>Thrift：Facebook、Apache的RPC中间件，高效，开源，跨语言<br>Hessian：基于HTTP+二进制，跨语言<br>Dubbo：淘宝开源中间件，Java<br>Motan：新浪开源中间件，Java<br>WebService：基于HTTP + SOAP/XML/JSON<br>Google Protocol Buffers：一种对象序列化标准和开发库</p>
</blockquote>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p>实现一个书籍信息管理系统，具体要求：</p>
<ol>
<li>客户端实现用户交互，服务器端实现书籍信息存储和管理。</li>
<li>服务器端至少暴露如下接口：</li>
</ol>
<ul>
<li>bool add(Book b) 添加一个书籍对象。</li>
<li>Book queryByID(int bookID) 查询指定ID号的书籍对象。</li>
<li>BookList queryByName(String name) 按书名查询符合条件的书籍对象列表，支持模糊查询。</li>
<li>bool delete((int bookID) 删除指定ID号的书籍对象</li>
</ul>
<h1 id="RPC-RMI实现"><a href="#RPC-RMI实现" class="headerlink" title="RPC/RMI实现"></a>RPC/RMI实现</h1><p>创建book类，包含图书ID和名称，构建getid()和getname()方法，能够在类外访问。并继承序列化接口Serializable。<br><strong>Book.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name=<span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> id,String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id=id;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>新建一个txt文件，使用IO的方式读取书籍信息<br><strong>book.txt</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1001 分布式计算</span><br><span class="line">1002 大数据</span><br><span class="line">1003 机器学习</span><br><span class="line">1004 计算机系统</span><br><span class="line">1005 计算机组成</span><br><span class="line">1006 Java</span><br><span class="line">1007 数据结构</span><br><span class="line">1008 计算机网络</span><br><span class="line">1009 虚拟现实</span><br></pre></td></tr></table></figure><br>声明接口，继承于 Remote类，声明要实现的方法。<br><strong>ComputingService.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComputingService</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Book b)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">	<span class="function">Book <span class="title">queryByID</span><span class="params">(<span class="keyword">int</span> bookID)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">	<span class="function">ArrayList&lt;Book&gt; <span class="title">BookList</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> bookID)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">	<span class="function">ArrayList&lt;Book&gt; <span class="title">showAll</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>实现接口中实现的方法。其中BookFlies类用于读取和保存文件<br><strong>ComputingServiceImpl.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputingServiceImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">ComputingService</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	BookFlies bookFlies=<span class="keyword">new</span> BookFlies();</span><br><span class="line">	ArrayList&lt;Book&gt; booklist = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">	</span><br><span class="line">    ComputingServiceImpl() <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    	<span class="keyword">super</span>();</span><br><span class="line">		bookFlies.load(booklist);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Book b)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(queryByID(b.getID())==<span class="keyword">null</span>) &#123;</span><br><span class="line">    		booklist.add(b);</span><br><span class="line">    		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">queryByID</span><span class="params">(<span class="keyword">int</span> bookID)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			<span class="keyword">if</span>(b.getID()==bookID) &#123;</span><br><span class="line">				<span class="keyword">return</span> b;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title">BookList</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">		ArrayList&lt;Book&gt; books=<span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">		Pattern pattern = Pattern.compile(name);</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			Matcher matcher = pattern.matcher(b.getname());</span><br><span class="line">			<span class="keyword">if</span>(matcher.find())&#123;</span><br><span class="line">				books.add(b);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> books;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> bookID)</span>  <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			<span class="keyword">if</span>(b.getID()==bookID) &#123;</span><br><span class="line">				booklist.remove(b);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title">showAll</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> booklist;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">		bookFlies.save(booklist);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookFlies</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ArrayList&lt;Book&gt; booklist)</span><span class="comment">//读取文件</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String filename = <span class="string">&quot;book.txt&quot;</span>;</span><br><span class="line">			File file = <span class="keyword">new</span> File(filename);</span><br><span class="line">			BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</span><br><span class="line">			String temp;</span><br><span class="line">			<span class="keyword">while</span>((temp = reader.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				String[] a=temp.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">				String idstr = a[<span class="number">0</span>];</span><br><span class="line">				String name = a[<span class="number">1</span>];</span><br><span class="line">				<span class="keyword">int</span> id =Integer.parseInt(idstr);</span><br><span class="line">				Book book = <span class="keyword">new</span> Book(id,name);</span><br><span class="line">				booklist.add(book);</span><br><span class="line">			&#125;</span><br><span class="line">			reader.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(ArrayList&lt;Book&gt; booklist)</span><span class="comment">//写入文件</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		String fileName = <span class="string">&quot;book.txt&quot;</span>;</span><br><span class="line">		String allbook=<span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; booklist.size()-<span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			Book book = booklist.get(i);</span><br><span class="line">			String temp = book.getID() + <span class="string">&quot; &quot;</span> + book.getname()+<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">			allbook += temp;</span><br><span class="line">		&#125;</span><br><span class="line">		Book book=booklist.get(booklist.size()-<span class="number">1</span>);</span><br><span class="line">		allbook += book.getID()+ <span class="string">&quot; &quot;</span> + book.getname();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			FileWriter fileWriter = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(fileName));</span><br><span class="line">			fileWriter.write(allbook);</span><br><span class="line">			fileWriter.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>创建服务端。在端口8196声明了一个注册表，用Naming.bind将地址信息和类ComputingServiceImpl的一个对象computingServan绑定在一起并放入注册表。<br><strong>RMIServer.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException, MalformedURLException </span>&#123;</span><br><span class="line">    	LocateRegistry.createRegistry(<span class="number">8196</span>);</span><br><span class="line">        ComputingService computingServant = <span class="keyword">new</span> ComputingServiceImpl();</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://192.168.43.204:8196/ComputingService&quot;</span>,computingServant);</span><br><span class="line">        System.out.println(<span class="string">&quot;ComputingService is online.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>创建客户端。通过在注册表中查找名字，获得一个远程对象。设置提示信息，根据用户输入，调用所需方法。(有兴趣的话可以加一个UI)<br><strong>RMIClient.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RMIClient</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException, MalformedURLException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ComputingService c =(ComputingService)Naming.lookup(<span class="string">&quot;rmi://localhost:8196/ComputingService&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> chose;</span><br><span class="line">        <span class="keyword">int</span> bookID;</span><br><span class="line">        String name;</span><br><span class="line">        Book b=<span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎使用!&quot;</span>);</span><br><span class="line">        printMenu();</span><br><span class="line">        <span class="keyword">while</span>((chose=s.nextInt())!=<span class="number">6</span>) &#123;</span><br><span class="line">        	System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        	<span class="keyword">switch</span> (chose) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入图书ID：&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入图书名称：&quot;</span>);</span><br><span class="line">				name=s.next();</span><br><span class="line">				b=<span class="keyword">new</span> Book(bookID, name);</span><br><span class="line">				<span class="keyword">if</span>(c.add(b)) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;增加成功!&quot;</span>);</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   名称&quot;</span>);</span><br><span class="line">					<span class="keyword">for</span>(Book book:c.showAll()) &#123;</span><br><span class="line">						System.out.println(book.getID() + <span class="string">&quot; &quot;</span> + book.getname());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;增加失败,ID重复!&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入图书ID:&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				b=c.queryByID(bookID);</span><br><span class="line">				<span class="keyword">if</span>(b==<span class="keyword">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;图书信息不存在&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   名称&quot;</span>);</span><br><span class="line">					System.out.println(b.getID() + <span class="string">&quot; &quot;</span> + b.getname());</span><br><span class="line">					System.out.println(<span class="string">&quot;确认删除?&lt;Y/n&gt;&quot;</span>);</span><br><span class="line">					String order=s.next();</span><br><span class="line">					<span class="keyword">if</span>(order.equalsIgnoreCase(<span class="string">&quot;Y&quot;</span>)) &#123;</span><br><span class="line">						<span class="keyword">if</span>(c.delete(bookID)) &#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;删除成功!&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span>&#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;删除失败!&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入图书ID:&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				b=c.queryByID(bookID);</span><br><span class="line">				<span class="keyword">if</span>(b==<span class="keyword">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;查询ID不存在&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   名称&quot;</span>);</span><br><span class="line">					System.out.println(b.getID() + <span class="string">&quot; &quot;</span> + b.getname());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入图书名称：&quot;</span>);</span><br><span class="line">				name=s.next();</span><br><span class="line">				ArrayList&lt;Book&gt; books=c.BookList(name);</span><br><span class="line">				<span class="keyword">if</span>(books.size()==<span class="number">0</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;查询图书不存在&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   名称&quot;</span>);</span><br><span class="line">					<span class="keyword">for</span>(Book book:books) &#123;</span><br><span class="line">						System.out.println(book.getID() + <span class="string">&quot; &quot;</span> + book.getname());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;ID   名称&quot;</span>);</span><br><span class="line">				<span class="keyword">for</span>(Book book:c.showAll()) &#123;</span><br><span class="line">					System.out.println(book.getID() + <span class="string">&quot; &quot;</span> + book.getname());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;输入错误!!!&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">        	System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        	printMenu();</span><br><span class="line">        &#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;感谢使用!&quot;</span>);</span><br><span class="line">        c.end();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;增加图书...1&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;删除图书...2&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;书号查询...3&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;书名查询...4&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;查看目录...5&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;退出系统...6&quot;</span>);</span><br><span class="line">		System.out.print(<span class="string">&quot;请输入选项：&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>由于我的Eclipse出了问题，所以使用的是命令行编译运行的。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac *.java</span><br><span class="line">rmic ComputingServiceImpl</span><br><span class="line">java RMIServer</span><br><span class="line">java RMIClient</span><br></pre></td></tr></table></figure><br><img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/3.png" alt="server"><br><img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/4.png" alt="client"></p>
<h1 id="Web-Service改写"><a href="#Web-Service改写" class="headerlink" title="Web Service改写"></a>Web Service改写</h1><blockquote>
<p>前面几篇博客简单讲了Web Service的使用，不知道各位有没有发现Web的实现过程以及结果都和RPC/RMI的十分相似。那么能不能把我们写的方法发布出去，从而实现远程调用。让我们试一试吧。</p>
</blockquote>
<p>改写主要变动在Book.java,Pulisher.java和Client.java。Book需要调用javax.xml.bind.annotation这个包转化为xml; Pulisher中使用Websevice的方法发布接口；Client中请求并调用方法。</p>
<p>先创建两个个文件夹，分别放服务端和客户端代码<br><img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/5.png" alt="文件"></p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>在wsserver文件夹里<br>创建book类<br><strong>Book.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlAccessType;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlAccessorType;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlElement;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlType;</span><br><span class="line"></span><br><span class="line"><span class="meta">@XmlRootElement(name=&quot;book&quot;, namespace=&quot;http://localhost:9999/ws/books&quot;)</span></span><br><span class="line"><span class="meta">@XmlAccessorType(XmlAccessType.FIELD)</span></span><br><span class="line"><span class="meta">@XmlType(name=&quot;book&quot;, namespace=&quot;http://localhost:9999/ws/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">	<span class="meta">@XmlElement(name = &quot;id&quot;, namespace = &quot;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">	<span class="meta">@XmlElement(name = &quot;name&quot;, namespace = &quot;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> id,String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.id=id;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>book.txt</strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1001 分布式计算</span><br><span class="line">1002 大数据</span><br><span class="line">1003 机器学习</span><br><span class="line">1004 计算机系统</span><br><span class="line">1005 计算机组成</span><br><span class="line">1006 Java</span><br><span class="line">1007 数据结构</span><br><span class="line">1008 计算机网络</span><br><span class="line">1009 虚拟现实</span><br></pre></td></tr></table></figure><br>定义Web服务接口<br><strong>Bookstore.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wsserver.Book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> javax.jws.WebService;</span><br><span class="line"><span class="keyword">import</span> javax.jws.soap.SOAPBinding;</span><br><span class="line"><span class="keyword">import</span> javax.jws.soap.SOAPBinding.Style;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebService(targetNamespace=&quot;http://localhost:9999/ws/books&quot;)</span></span><br><span class="line"><span class="meta">@SOAPBinding(style = Style.RPC)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Bookstore</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Book b)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">queryByID</span><span class="params">(<span class="keyword">int</span> bookID)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title">BookList</span><span class="params">(String name)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> bookID)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title">showAll</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>定义实现接口的Web服务实现类<br><strong>BookstoreImpl.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.WebService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookstoreImpl</span> <span class="keyword">implements</span> <span class="title">Bookstore</span></span>&#123;</span><br><span class="line">	BookFlies bookFlies=<span class="keyword">new</span> BookFlies();</span><br><span class="line">	ArrayList&lt;Book&gt; booklist = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">	</span><br><span class="line">	BookstoreImpl()&#123;</span><br><span class="line">		bookFlies.load(booklist);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Book b)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(queryByID(b.getID())==<span class="keyword">null</span>) &#123;</span><br><span class="line">    		booklist.add(b);</span><br><span class="line">    		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">queryByID</span><span class="params">(<span class="keyword">int</span> bookID)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			<span class="keyword">if</span>(b.getID()==bookID) &#123;</span><br><span class="line">				<span class="keyword">return</span> b;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title">BookList</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		ArrayList&lt;Book&gt; books=<span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">		Pattern pattern = Pattern.compile(name);</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			Matcher matcher = pattern.matcher(b.getname());</span><br><span class="line">			<span class="keyword">if</span>(matcher.find())&#123;</span><br><span class="line">				books.add(b);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> books;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> bookID)</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			<span class="keyword">if</span>(b.getID()==bookID) &#123;</span><br><span class="line">				booklist.remove(b);</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title">showAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> booklist;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;</span><br><span class="line">		bookFlies.save(booklist);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookFlies</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">(ArrayList&lt;Book&gt; booklist)</span><span class="comment">//读取文件</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String filename = <span class="string">&quot;wsserver\\book.txt&quot;</span>;</span><br><span class="line">			File file = <span class="keyword">new</span> File(filename);</span><br><span class="line">			BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</span><br><span class="line">			String temp;</span><br><span class="line">			<span class="keyword">while</span>((temp = reader.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				String[] a=temp.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">				String idstr = a[<span class="number">0</span>];</span><br><span class="line">				String name = a[<span class="number">1</span>];</span><br><span class="line">				<span class="keyword">int</span> id =Integer.parseInt(idstr);</span><br><span class="line">				Book book = <span class="keyword">new</span> Book();</span><br><span class="line">				book.set(id,name);</span><br><span class="line">				booklist.add(book);</span><br><span class="line">			&#125;</span><br><span class="line">			reader.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(ArrayList&lt;Book&gt; booklist)</span><span class="comment">//写入文件</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		String fileName = <span class="string">&quot;wsserver\\book.txt&quot;</span>;</span><br><span class="line">		String allbook=<span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; booklist.size()-<span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			Book book = booklist.get(i);</span><br><span class="line">			String temp = book.getID() + <span class="string">&quot; &quot;</span> + book.getname()+<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">			allbook += temp;</span><br><span class="line">		&#125;</span><br><span class="line">		Book book=booklist.get(booklist.size()-<span class="number">1</span>);</span><br><span class="line">		allbook += book.getID()+ <span class="string">&quot; &quot;</span> + book.getname();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			FileWriter fileWriter = <span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(fileName));</span><br><span class="line">			fileWriter.write(allbook);</span><br><span class="line">			fileWriter.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>将Web服务实现类绑定到Web服务器<br><strong>Publisher.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.ws.Endpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Publisher</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	   BookstoreImpl b = <span class="keyword">new</span> BookstoreImpl();</span><br><span class="line">	   Endpoint.publish(<span class="string">&quot;http://localhost:9999/ws/books&quot;</span>, b);</span><br><span class="line">	   System.out.println(<span class="string">&quot;Web service is online.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>在wsclient文件夹里<br>根据WSDL生成Web服务代理类，利用Web服务代理类调用Web服务接口中定义的具体方法。<br><strong>Client.java</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wsproxy.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">	<span class="keyword">static</span> Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		BookstoreImplService service = <span class="keyword">new</span> BookstoreImplService();</span><br><span class="line">		BookstoreImpl pService = service.getBookstoreImplPort();</span><br><span class="line">        <span class="keyword">int</span> chose;</span><br><span class="line">        <span class="keyword">int</span> bookID;</span><br><span class="line">        String name;</span><br><span class="line">        Book b=<span class="keyword">new</span> Book();</span><br><span class="line">        System.out.println(<span class="string">&quot;Welcome!!!&quot;</span>);</span><br><span class="line">        printMenu();</span><br><span class="line">        <span class="keyword">while</span>((chose=s.nextInt())!=<span class="number">6</span>) &#123;</span><br><span class="line">        	System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        	<span class="keyword">switch</span> (chose) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;Input book ID:&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				System.out.println(<span class="string">&quot;Input book Name:&quot;</span>);</span><br><span class="line">				name=s.next();</span><br><span class="line">				b.setId(bookID);b.setName(name);</span><br><span class="line">				<span class="keyword">if</span>(pService.add(b)) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;Added successfully!&quot;</span>);</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   Name&quot;</span>);</span><br><span class="line">					<span class="keyword">for</span>(Book book:pService.showAll()) &#123;</span><br><span class="line">						System.out.println(book.getId() + <span class="string">&quot; &quot;</span> + book.getName());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;Failure, ID duplication&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;Input book ID:&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				b=pService.queryByID(bookID);</span><br><span class="line">				<span class="keyword">if</span>(b==<span class="keyword">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;Not exist&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   Name&quot;</span>);</span><br><span class="line">					System.out.println(b.getId() + <span class="string">&quot; &quot;</span> + b.getName());</span><br><span class="line">					System.out.println(<span class="string">&quot;Confirm?&lt;Y/n&gt;&quot;</span>);</span><br><span class="line">					String order=s.next();</span><br><span class="line">					<span class="keyword">if</span>(order.equalsIgnoreCase(<span class="string">&quot;Y&quot;</span>)) &#123;</span><br><span class="line">						<span class="keyword">if</span>(pService.delete(bookID)) &#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;Successfully deleted!&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span>&#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;Failed to delete!&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;Input book ID:&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				b=pService.queryByID(bookID);</span><br><span class="line">				<span class="keyword">if</span>(b==<span class="keyword">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;Not exist&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   Name&quot;</span>);</span><br><span class="line">					System.out.println(b.getId() + <span class="string">&quot; &quot;</span> + b.getName());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;Input book Name:&quot;</span>);</span><br><span class="line">				name=s.next();</span><br><span class="line">				ArrayList&lt;Book&gt; books=(ArrayList&lt;Book&gt;) pService.bookList(name);</span><br><span class="line">				<span class="keyword">if</span>(books.size()==<span class="number">0</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;Not exist&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   Name&quot;</span>);</span><br><span class="line">					<span class="keyword">for</span>(Book book:books) &#123;</span><br><span class="line">						System.out.println(book.getId() + <span class="string">&quot; &quot;</span> + book.getName());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;ID   Name&quot;</span>);</span><br><span class="line">				<span class="keyword">for</span>(Book book:pService.showAll()) &#123;</span><br><span class="line">					System.out.println(book.getId() + <span class="string">&quot; &quot;</span> + book.getName());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;Error!!!&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">        	System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        	printMenu();</span><br><span class="line">        &#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;Thanks for using!&quot;</span>);</span><br><span class="line">		pService.end();</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMenu</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Add books ......1&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Delete books ...2&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Query By ID ....3&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Query By Name ..4&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Show All .......5&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Exit ...........6&quot;</span>);</span><br><span class="line">		System.out.print(<span class="string">&quot;Please enter the option:&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h2><p>编译并启动服务商<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac .\wsserver\*.java</span><br><span class="line">java wsserver.Publisher</span><br></pre></td></tr></table></figure><br><img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/6.png" alt="ser"></p>
<p>浏览器打开<a href="http://localhost:9999/ws/books?wsdl">http://localhost:9999/ws/books?wsdl</a>看到如下界面，即wsdl文件<br><img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/7.png" alt="wsdl"></p>
<p>使用wsimport命令，将wsdl文件生成本地代理<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsimport -keep -p wsproxy http://localhost:9999/ws/books?wsdl</span><br></pre></td></tr></table></figure><br><img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/8.png" alt="ws"></p>
<p>编译并启动客户端<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac .\wsclient\*.java</span><br><span class="line">java wsclient.Client</span><br></pre></td></tr></table></figure><br><img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/9.png" alt="cl"></p>
<hr>
<p>最后，总算圆满完成。虽然看起来并不困难，刚开始我就是这么想的，但是从头开始写真的会遇到很多想不到的问题，比如不知道Book类需要转化为xml，就查了好几天的资料。总之，学知识还需要多动手啊。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>Web</tag>
        <tag>RMI</tag>
      </tags>
  </entry>
</search>
