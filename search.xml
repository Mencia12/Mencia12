<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python|Pycharm使用技巧</title>
    <url>/2020/08/15/Pycharm/</url>
    <content><![CDATA[<p><strong>Windows 10 专业版 Pycharm 2020.2</strong> <span id="more"></span> # Pycharm使用技巧 ## 自动调整代码格式 <strong>问题</strong></p>
<p>在使用pycharm的代码编辑器时，常常懒得写空格，但这是不符合代码规范的，而且也会影响可读性。</p>
<p><strong>解决办法</strong></p>
<p>pycharm有自动调整代码格式的快捷键，默认为<code>Alt+Ctrl+L</code>，按下快捷键后，代码自动填充了空格。</p>
<h2 id="运行当前编辑文件">运行当前编辑文件</h2>
<p><strong>问题</strong></p>
<p>运行代码时，总是要先选择文件，点击运行或者右击选择运行，需要两步</p>
<p><strong>解决方法</strong></p>
<p>设置快捷键，运行当前编辑文件快捷键为<code>Ctrl+Sift+F10</code> <img src="/2020/08/15/Pycharm/1.png" alt="1"></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|基于BOF算法的图像检索</title>
    <url>/2019/07/07/BOF/</url>
    <content><![CDATA[<p><strong>BoF(Bag of features)算法在图像分类中具有着重要的作用</strong> <span id="more"></span> # 简介 Bag of Features方法仿照文本检索领域的Bag-of-Words方法，把每幅图像描述为一个局部区域/关键点(Patches/Key Points)特征的无序集合。 使用某种聚类算法(如K-means)将局部特征进行聚类，每个聚类中心被看作是词典中的一个<strong>视觉词汇</strong>(Visual Word)，相当于文本检索中的词，视觉词汇由聚类中心对应特征形成的<strong>码字</strong>(code word)来表示。 图像中的每个特征都将被映射到视觉词典的某个词上，这种映射可以通过计算特征间的距离去实现，然后统计每个视觉词汇的出现与否或次数，图像可描述为一个维数相同的直方图向量。 # 基本流程 基本流程可以分为四步： ## 特征提取 从原始图像中提取特征，常用的特征提取方法有SIFT，SURF。SIFT得到的特征描述是128维度的向量，相比SISF，SURF计算量更小些，得到的特征是64维的向量。也有使用HoG和LBP来进行特征提取的。注意特征提取的方法要满足旋转不变性以及尺寸不变性。 <img src="/2019/07/07/BOF/3.png" alt="3"></p>
<h2 id="字典生成">字典生成</h2>
<p>对所有的图片提取完特征后，将所有的特征进行聚类，比如使用K-Means聚类，得到K类，每个类别看作一个word，这样我们就得到了字典，如下图所示。 <img src="/2019/07/07/BOF/4.png" alt="4"></p>
<h2 id="直方图表示">直方图表示</h2>
<p>上一步训练得到的字典，是为了这一步对图像特征进行量化。对于一幅图像而言，我们可以提取出大量的特征，但这些特征(如SIFT提取的特征)仍然属于一种浅层的表示，缺乏代表性。因此，这一步的目标，是根据字典重新提取图像的高层特征。具体做法是，对于每一张图片得到的每一个特征(如SIFT提取的特征)，都可以在字典中找到一个最相似的word(实际上就是将特征输入到得到的聚类模型，得到类别)，统计相似的每种word的数量，于是就得到一个K维的直方图。如下图所示。 <img src="/2019/07/07/BOF/5.png" alt="5"></p>
<h2 id="训练分类器">训练分类器</h2>
<p>对于每张图片，我们得到了其对应的直方图向量，当然也知道其对应的属于哪种物品的标记。这样我们就可以构造训练集来训练某种分类器。当需要进行预测时，我们先测试集的图片中提取特征，然后利用字典量化得到直方图，输入训练好的分类器，得到预测的类别。</p>
<h1 id="算法实现">算法实现</h1>
<h2 id="数据预处理">数据预处理</h2>
<p>本次实验采用了三个类别：['aeroplane', 'bicycle', 'car']，在train文件夹下有三个子文件夹表示各类。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_paths</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="comment"># 获取训练数据类别</span></span><br><span class="line">    training_names = os.listdir(path)</span><br><span class="line">    <span class="comment"># 获取图片路径及标签</span></span><br><span class="line">    image_paths = [] <span class="comment"># 获取所有图片路径</span></span><br><span class="line">    image_classes = [] <span class="comment">#记录每张图片的标签，[0,...,0,1,...,1,2,...,2]</span></span><br><span class="line">    class_id = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> training_name <span class="keyword">in</span> training_names:</span><br><span class="line">        name = os.path.join(path, training_name)</span><br><span class="line">        class_path = <span class="built_in">list</span>(paths.list_images(name))</span><br><span class="line">        image_paths += class_path</span><br><span class="line">        image_classes += [class_id] * <span class="built_in">len</span>(class_path)</span><br><span class="line">        class_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Label \t\t  count&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---------------------&quot;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> training_name <span class="keyword">in</span> training_names:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;0:10&#125; &#123;1:6d&#125;&#x27;</span>.<span class="built_in">format</span>(training_name, image_classes.count(i)))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> training_names, image_paths, image_classes</span><br></pre></td></tr></table></figure> <img src="/2019/07/07/BOF/6.png" alt="6"> ## 提取图像特征 这里采用的是OpenCV自带的SIFT算法生成图像库中每幅图的特征点及描述符。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建特征提取和关键点检测器对象</span></span><br><span class="line">sift=cv2.xfeatures2d.SIFT_create()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征提取与描述子生成</span></span><br><span class="line">des_list = []</span><br><span class="line"><span class="keyword">for</span> image_path <span class="keyword">in</span> image_paths:</span><br><span class="line">    im = cv2.imread(image_path)</span><br><span class="line">    kpts, des = sift.detectAndCompute(im, <span class="literal">None</span>)</span><br><span class="line">    des_list.append((image_path, des))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;image file path : &quot;</span>, image_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述子向量聚合</span></span><br><span class="line">descriptors = des_list[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> image_path, descriptor <span class="keyword">in</span> des_list[<span class="number">1</span>:]:</span><br><span class="line">    descriptors = np.vstack((descriptors, descriptor))</span><br></pre></td></tr></table></figure> <img src="/2019/07/07/BOF/sift.png" alt="s"> ## 对特征进行聚类 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kmeans聚类</span></span><br><span class="line">k = <span class="number">100</span></span><br><span class="line">voc,_= kmeans(descriptors, k, <span class="number">1</span>)</span><br></pre></td></tr></table></figure> ## 根据字典将图片表示成向量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成特征直方图</span></span><br><span class="line">im_features = np.zeros((<span class="built_in">len</span>(image_paths), k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(image_paths)):</span><br><span class="line">    words, distance = vq(des_list[i][<span class="number">1</span>], voc)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        im_features[i][w] += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/07/07/BOF/histogram.png" alt="h"> ## 特征集进行加权及量化 在一篇文档里，“的”“你”“我”等字眼的出现频率高，那么这些word在直方图上的bin就会比较高，并且在每篇文档里都会出现，但是这些并不能作为文档的标识，因此要弱化这些共性特征的权重。 &gt;这里采用了TF-IDF加权 TF:如果某个关键词在一篇文章中出现的频率高，说明该词语能够表征文章的内容，该关键词在其它文章中很少出现，则认为此词语具有很好的类别区分度，对分类有很大的贡献。 IDF:如果文件数据库中包含词语A的文件越少，则IDF越大，说明词语A具有很好的类别区分能力。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># TF-IDF</span></span><br><span class="line">nbr = np.<span class="built_in">sum</span>((im_features &gt; <span class="number">0</span>) * <span class="number">1</span>, axis=<span class="number">0</span>)</span><br><span class="line">idf = np.array(np.log((<span class="number">1.0</span> * <span class="built_in">len</span>(image_paths) + <span class="number">1</span>) / (<span class="number">1.0</span> * nbr + <span class="number">1</span>)), <span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">im_features = im_features * idf</span><br><span class="line">tf = np.zeros((<span class="built_in">len</span>(image_paths), k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(image_paths)):</span><br><span class="line">     tf[i] = im_features[i] / (np.<span class="built_in">sum</span>(im_features, axis=<span class="number">1</span>)[i])</span><br><span class="line">     im_features[i] = im_features[i] * tf[i]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尺度化</span></span><br><span class="line">stdSlr = StandardScaler().fit(im_features)</span><br><span class="line">im_features = stdSlr.transform(im_features)</span><br></pre></td></tr></table></figure> ## 训练分类器 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">clf = LinearSVC()</span><br><span class="line">clf.fit(im_features, np.array(image_classes))</span><br></pre></td></tr></table></figure> 最后可以将训练的结果打包并保存 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;training and save model...&quot;</span>)</span><br><span class="line">sklearn.externals.joblib.dump((clf, training_names,std_slr, k, voc, idf), <span class="string">&quot;bof.pkl&quot;</span>, compress=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;========================================&quot;</span>)</span><br></pre></td></tr></table></figure> ## 预测并测试 预测步骤和训练相似，先提取图像特征，将提取的图像特征加权并尺度化，代入训练好的分类器 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict_image</span>(<span class="params">image_path</span>):</span><br><span class="line"></span><br><span class="line">    clf, classes_names, std_slr, k, voc, idf = sklearn.externals.joblib.load(<span class="string">&quot;bof.pkl&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sift = cv2.xfeatures2d.SIFT_create()</span><br><span class="line">    im = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    kpts, des = sift.detectAndCompute(im, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    test_features = np.zeros((<span class="number">1</span>, k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line">    words, distance = vq(des, voc)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        test_features[<span class="number">0</span>][w] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    test_features = test_features * idf</span><br><span class="line">    tf = test_features / np.<span class="built_in">sum</span>(test_features, axis=<span class="number">1</span>)</span><br><span class="line">    test_features = test_features * tf</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Scale the features</span></span><br><span class="line">    test_features = std_slr.transform(test_features)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Perform the predictions</span></span><br><span class="line">    predictions = [classes_names[i] <span class="keyword">for</span> i <span class="keyword">in</span> clf.predict(test_features)]</span><br><span class="line">    <span class="keyword">return</span> predictions</span><br></pre></td></tr></table></figure> 读取测试数据，并输出结果 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">test_path</span>):</span><br><span class="line">    _, image_paths, _ = read_paths(test_path)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> image_paths:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        predictions = predict_image(image_path)</span><br><span class="line">        img = cv2.imread(image_path)</span><br><span class="line">        img = cv2.resize(img, (<span class="built_in">int</span>(img.shape[<span class="number">1</span>]*<span class="number">2</span>), <span class="built_in">int</span>(img.shape[<span class="number">0</span>] * <span class="number">2</span>))) <span class="comment">#图片扩大两倍</span></span><br><span class="line">        output=cv2.putText(img, predictions[<span class="number">0</span>], (<span class="number">10</span>, <span class="number">150</span>), cv2.FONT_HERSHEY_COMPLEX, <span class="number">2.0</span>, (<span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>), <span class="number">5</span>)</span><br><span class="line">        cv2.imshow(image_path, output)</span><br><span class="line">        cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;image%d: %s, classes : %s&quot;</span> % (i, image_path, predictions))</span><br></pre></td></tr></table></figure> <img src="/2019/07/07/BOF/result.png" alt="r"> <img src="/2019/07/07/BOF/7.png" alt="7"></p>
<h1 id="代码">代码</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> sklearn.externals</span><br><span class="line"><span class="keyword">from</span> imutils <span class="keyword">import</span> paths</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> LinearSVC</span><br><span class="line"><span class="keyword">from</span> scipy.cluster.vq <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_paths</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="comment"># 获取训练数据类别</span></span><br><span class="line">    training_names = os.listdir(path)</span><br><span class="line">    <span class="comment"># 获取图片路径及标签</span></span><br><span class="line">    image_paths = [] <span class="comment"># 获取所有图片路径</span></span><br><span class="line">    image_classes = [] <span class="comment">#记录每张图片的标签，[0,...,0,1,...,1,2,...,2]</span></span><br><span class="line">    class_id = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> training_name <span class="keyword">in</span> training_names:</span><br><span class="line">        name = os.path.join(path, training_name)</span><br><span class="line">        class_path = <span class="built_in">list</span>(paths.list_images(name))</span><br><span class="line">        image_paths += class_path</span><br><span class="line">        image_classes += [class_id] * <span class="built_in">len</span>(class_path)</span><br><span class="line">        class_id += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Label \t\t  count&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---------------------&quot;</span>)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> training_name <span class="keyword">in</span> training_names:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;0:10&#125; &#123;1:6d&#125;&#x27;</span>.<span class="built_in">format</span>(training_name, image_classes.count(i)))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> training_names, image_paths, image_classes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">train_path</span>):</span><br><span class="line">    training_names, image_paths, image_classes = read_paths(train_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建SIFT特征提取器</span></span><br><span class="line">    sift = cv2.xfeatures2d.SIFT_create()</span><br><span class="line">    <span class="comment"># 特征提取与描述子生成</span></span><br><span class="line">    des_list = []</span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> image_paths:</span><br><span class="line">        im = cv2.imread(image_path)</span><br><span class="line">        kpts, des = sift.detectAndCompute(im, <span class="literal">None</span>)</span><br><span class="line">        des_list.append(des)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 描述子向量</span></span><br><span class="line">    descriptors = des_list[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> descriptor <span class="keyword">in</span> des_list[<span class="number">1</span>:]:</span><br><span class="line">        descriptors = np.vstack((descriptors, descriptor))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 100 聚类 K-Means</span></span><br><span class="line">    k = <span class="number">100</span></span><br><span class="line">    voc, _ = kmeans(descriptors, k, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成特征直方图</span></span><br><span class="line">    im_features = np.zeros((<span class="built_in">len</span>(image_paths), k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(image_paths)):</span><br><span class="line">        words, distance = vq(des_list[i], voc)</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">            im_features[i][w] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># TF-IDF</span></span><br><span class="line">    nbr = np.<span class="built_in">sum</span>((im_features &gt; <span class="number">0</span>) * <span class="number">1</span>, axis=<span class="number">0</span>)</span><br><span class="line">    idf = np.array(np.log((<span class="number">1.0</span> * <span class="built_in">len</span>(image_paths) + <span class="number">1</span>) / (<span class="number">1.0</span> * nbr + <span class="number">1</span>)), <span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">    im_features = im_features * idf</span><br><span class="line">    tf = np.zeros((<span class="built_in">len</span>(image_paths), k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(image_paths)):</span><br><span class="line">        tf[i] = im_features[i] / (np.<span class="built_in">sum</span>(im_features, axis=<span class="number">1</span>)[i])</span><br><span class="line">        im_features[i] = im_features[i] * tf[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 尺度化</span></span><br><span class="line">    std_slr = StandardScaler().fit(im_features)</span><br><span class="line">    im_features = std_slr.transform(im_features)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># SVM</span></span><br><span class="line">    clf = LinearSVC()</span><br><span class="line">    clf.fit(im_features, np.array(image_classes))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Save the SVM</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;training and save model...&quot;</span>)</span><br><span class="line">    sklearn.externals.joblib.dump((clf, training_names, std_slr, k, voc, idf), <span class="string">&quot;bof.pkl&quot;</span>, compress=<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;========================================&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">predict_image</span>(<span class="params">image_path</span>):</span><br><span class="line"></span><br><span class="line">    clf, classes_names, std_slr, k, voc, idf = sklearn.externals.joblib.load(<span class="string">&quot;bof.pkl&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sift = cv2.xfeatures2d.SIFT_create()</span><br><span class="line">    im = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">    kpts, des = sift.detectAndCompute(im, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">    test_features = np.zeros((<span class="number">1</span>, k), <span class="string">&quot;float32&quot;</span>)</span><br><span class="line">    words, distance = vq(des, voc)</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        test_features[<span class="number">0</span>][w] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    test_features = test_features * idf</span><br><span class="line">    tf = test_features / np.<span class="built_in">sum</span>(test_features, axis=<span class="number">1</span>)</span><br><span class="line">    test_features = test_features * tf</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Scale the features</span></span><br><span class="line">    test_features = std_slr.transform(test_features)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Perform the predictions</span></span><br><span class="line">    predictions = [classes_names[i] <span class="keyword">for</span> i <span class="keyword">in</span> clf.predict(test_features)]</span><br><span class="line">    <span class="keyword">return</span> predictions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">test_path</span>):</span><br><span class="line">    _, image_paths, _ = read_paths(test_path)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> image_path <span class="keyword">in</span> image_paths:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        predictions = predict_image(image_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;image%d: %s, classes : %s&quot;</span> % (i, image_path, predictions))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train_path = <span class="string">&quot;C:/Code/Picture/dataset/train/&quot;</span></span><br><span class="line">    train(train_path)</span><br><span class="line"></span><br><span class="line">    test_path = <span class="string">&quot;C:/Code/Picture/dataset/test/&quot;</span></span><br><span class="line">    test(test_path)</span><br></pre></td></tr></table></figure>
<h1 id="缺陷">缺陷</h1>
<ol type="1">
<li>字典大小的选择也是问题，字典过大，单词缺乏一般性，对噪声敏感，计算量大，关键是图象投影后的维数高；字典太小，单词区分性能差，对相似的目标特征无法表示。</li>
<li>这种一个特征点对应于一个词的方法显然忽略图像空间上下文，这很容易造成词语义的模糊。</li>
<li>图像中一般都存在同主题无关的内容，会影响分类的结果，改进方法是检测兴趣区域并给不同的权重。</li>
</ol>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>BOF</tag>
        <tag>OpenCV</tag>
        <tag>SIFT</tag>
        <tag>Kmeans</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo|用Hexo写博客</title>
    <url>/2019/05/19/Hexo%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>简单总结使用的hexo命令</strong> <span id="more"></span> # Hexo</p>
<h2 id="更新">更新</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、全局升级hexo-cli，先hexo version查看当前版本，然后npm i hexo-cli -g，再次hexo version查看是否升级成功。</span><br><span class="line"></span><br><span class="line">2、使用npm install -g npm-check和npm-check，检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件</span><br><span class="line"></span><br><span class="line">3、使用npm install -g npm-upgrade和npm-upgrade，升级系统中的插件</span><br><span class="line"></span><br><span class="line">4、使用npm update -g和npm update --save</span><br></pre></td></tr></table></figure>
<h2 id="部署网站">部署网站</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></figure>
<h2 id="创建新文章">创建新文章</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n title</span><br></pre></td></tr></table></figure>
<h2 id="屏蔽文章">屏蔽文章</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在你不希望渲染的md文章文件前加上一个下划线&quot;_&quot;即可</span><br></pre></td></tr></table></figure>
<h2 id="服务器">服务器</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server #Hexo会监视文件变动并自动更新，您无须重启服务器。</span><br><span class="line">hexo server -s #静态模式</span><br><span class="line">hexo server -p 5000 #更改端口</span><br><span class="line">hexo server -i 192.168.1.1 #自定义 IP</span><br></pre></td></tr></table></figure>
<h2 id="插件">插件</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-neat --save-dev #优化加速</span><br><span class="line">npm install hexo-asset-image --save #添加本地图库</span><br><span class="line">npm install hexo-generator-searchdb --save #配置本地搜索</span><br><span class="line">npm install hexo-generator-index-pin-top --save #文章置顶</span><br></pre></td></tr></table></figure>
<h3 id="解决无法显示数学公式">解决无法显示数学公式</h3>
<p>更换 Hexo 的 markdown 渲染引擎</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked</span><br><span class="line">npm install hexo-renderer-pandoc</span><br></pre></td></tr></table></figure>
<h1 id="github">Github</h1>
<h2 id="备份博客源文件">备份博客源文件</h2>
<p>在github博客仓库下新建一个分支hexo，然后git clone到本地，把.git文件夹拿出来，放在博客根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout hexo #切换到hexo分支</span><br><span class="line">git add . #添加当前目录下的所有文件到暂存区</span><br><span class="line">git commit -m &quot;xxx&quot; #注释</span><br><span class="line">git push #提交</span><br></pre></td></tr></table></figure>
<h2 id="同步">同步</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull #同步</span><br></pre></td></tr></table></figure>
<h1 id="markdown">Markdown</h1>
<h2 id="表情">表情</h2>
<p><a href="https://www.jianshu.com/p/0520359a18d5" class="uri">https://www.jianshu.com/p/0520359a18d5</a></p>
<h2 id="符号公式">符号&amp;公式</h2>
<p><a href="https://blog.csdn.net/gsww404/article/details/78684278" class="uri">https://blog.csdn.net/gsww404/article/details/78684278</a> <a href="https://www.jianshu.com/p/16fbd768bfe7" class="uri">https://www.jianshu.com/p/16fbd768bfe7</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|学习总结</title>
    <url>/2020/07/08/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p><strong>记录有趣的小技巧</strong> <span id="more"></span> # 基础学习 ## set() 函数 set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = set(&#x27;runoob&#x27;)</span><br><span class="line">y = set(&#x27;google&#x27;)</span><br><span class="line">x, y</span><br><span class="line">&gt;&gt;&gt; (set([&#x27;b&#x27;, &#x27;r&#x27;, &#x27;u&#x27;, &#x27;o&#x27;, &#x27;n&#x27;]), set([&#x27;e&#x27;, &#x27;o&#x27;, &#x27;g&#x27;, &#x27;l&#x27;]))</span><br><span class="line">x &amp; y         # 交集</span><br><span class="line">&gt;&gt;&gt; set([&#x27;o&#x27;])</span><br><span class="line">x | y         # 并集</span><br><span class="line">&gt;&gt;&gt; set([&#x27;b&#x27;, &#x27;e&#x27;, &#x27;g&#x27;, &#x27;l&#x27;, &#x27;o&#x27;, &#x27;n&#x27;, &#x27;r&#x27;, &#x27;u&#x27;])</span><br><span class="line">x - y         # 差集</span><br><span class="line">&gt;&gt;&gt; set([&#x27;r&#x27;, &#x27;b&#x27;, &#x27;u&#x27;, &#x27;n&#x27;])</span><br></pre></td></tr></table></figure></p>
<h2 id="counter-函数">Counter() 函数</h2>
<p>Counter是dict子类，用于计数可哈希的对象。元素被作为字典的key存储，它们的计数作为字典的value存储。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import Counter</span><br><span class="line">cnt = Counter()</span><br><span class="line">for word in [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;red&#x27;, &#x27;green&#x27;, &#x27;blue&#x27;, &#x27;blue&#x27;]:</span><br><span class="line">    cnt[word] += 1  # 如果键不存在，就返回0</span><br><span class="line">print cnt</span><br><span class="line">&gt;&gt;&gt; Counter(&#123;‘blue’: 3, ‘red’: 2, ‘green’: 1&#125;)</span><br></pre></td></tr></table></figure> ## zip() <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 显示列</span><br><span class="line">nums = [&#x27;flower&#x27;,&#x27;flow&#x27;,&#x27;flight&#x27;]</span><br><span class="line">for i in zip(*nums):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; (&#x27;f&#x27;, &#x27;f&#x27;, &#x27;f&#x27;)</span><br><span class="line">    (&#x27;l&#x27;, &#x27;l&#x27;, &#x27;l&#x27;)</span><br><span class="line">    (&#x27;o&#x27;, &#x27;o&#x27;, &#x27;i&#x27;)</span><br><span class="line">    (&#x27;w&#x27;, &#x27;w&#x27;, &#x27;g&#x27;)</span><br></pre></td></tr></table></figure></p>
<h1 id="实用工具">实用工具</h1>
<h2 id="一键抠图">一键抠图</h2>
<ol type="1">
<li>进入<a href="https://www.remove.bg/">官网</a>,可以直接上传图片</li>
</ol>
<figure>
<img src="/2020/07/08/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/1.png" alt><figcaption>1</figcaption>
</figure>
<ol start="2" type="1">
<li>也可以注册账号申请API，通过代码实现 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装库</span></span><br><span class="line">pip install removebg</span><br></pre></td></tr></table></figure> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从官网获取自己的API</span></span><br><span class="line"><span class="keyword">from</span> removebg <span class="keyword">import</span> RemoveBg</span><br><span class="line">rmbg = RemoveBg(<span class="string">&quot;自己的API&quot;</span>, <span class="string">&quot;error.log&quot;</span>)</span><br><span class="line">rmbg.remove_background_from_img_file(<span class="string">&quot;C:/Code/Picture/new.jpg&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<figure>
<img src="/2020/07/08/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/1.1.jpg" alt><figcaption>1.1</figcaption>
</figure>
<figure>
<img src="/2020/07/08/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/1.2.png" alt><figcaption>1.2</figcaption>
</figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|Socket编程实例</title>
    <url>/2019/06/21/Java-Socket/</url>
    <content><![CDATA[<p><strong>多线程版UDP及线程池版的TCP</strong> <span id="more"></span> # TCP/IP网络体系 ## TCP/IP先于OSI模型，不完全符合OSI标准 <img src="/2019/06/21/Java-Socket/1.png" alt="1"> ## TCP/IP四层模型 &gt;也可分为五层，将网络接口层分为两层</p>
<figure>
<img src="/2019/06/21/Java-Socket/2.png" alt><figcaption>2</figcaption>
</figure>
<h2 id="各层网络协议的存在位置">各层网络协议的存在位置</h2>
<ul>
<li>路由器中只包含物理层、链路层、网络层协议实现模块</li>
<li>主机中包含五层协议实现模块</li>
<li>操作系统负责实现传输层及以下网络协议的实现 <img src="/2019/06/21/Java-Socket/3.png" alt="3"></li>
</ul>
<h1 id="socket套接字">Socket套接字</h1>
<h2 id="什么是socket">什么是socket？</h2>
<p>传输层和网络层提供给应用层的标准化编程接口（或称为编程接口） <img src="/2019/06/21/Java-Socket/4.png" alt="4"></p>
<h2 id="socket类型">Socket类型</h2>
<ul>
<li>流式套接字</li>
<li>数据报套接字</li>
<li>原始套接字 <img src="/2019/06/21/Java-Socket/5.png" width="70%" height="70%" div align="center"></li>
</ul>
<h2 id="tcp套接字编程典型模型">TCP套接字编程典型模型</h2>
<figure>
<img src="/2019/06/21/Java-Socket/6.png" alt><figcaption>6</figcaption>
</figure>
<h2 id="udp套接字编程典型模型">UDP套接字编程典型模型</h2>
<figure>
<img src="/2019/06/21/Java-Socket/7.png" alt><figcaption>7</figcaption>
</figure>
<h1 id="并发服务技术">并发服务技术</h1>
<h2 id="基于多线程的并发服务技术">基于多线程的并发服务技术</h2>
<figure>
<img src="/2019/06/21/Java-Socket/8.png" alt><figcaption>8</figcaption>
</figure>
<h2 id="基于线程池的并发服务技术">基于线程池的并发服务技术</h2>
<figure>
<img src="/2019/06/21/Java-Socket/9.png" alt><figcaption>9</figcaption>
</figure>
<h1 id="java实现">Java实现</h1>
<h2 id="多线程版udp">多线程版UDP</h2>
<p><strong>UDPClient.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    	</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;localhost&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">8800</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">byte</span>[] data= <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">byte</span>[] reply = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">stdIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">        DatagramPacket p1,p2 = <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> ((userInput=stdIn.readLine())!=<span class="literal">null</span>) &#123;</span><br><span class="line">        	data = userInput.getBytes();</span><br><span class="line">            p1 = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length, address, port);</span><br><span class="line">            socket.send(p1);</span><br><span class="line">            </span><br><span class="line">            p2 = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(reply, reply.length);</span><br><span class="line">            socket.receive(p2);</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(reply, <span class="number">0</span>, p2.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;Server：&quot;</span> + info);</span><br><span class="line">		&#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>UDPThread.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UDPThread</span><span class="params">(DatagramSocket socket, DatagramPacket packet)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">        <span class="built_in">this</span>.packet = packet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">byte</span>[] reply = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">p</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	<span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> packet.getAddress();</span><br><span class="line">            System.out.println(<span class="string">&quot;IP：&quot;</span> + address.getHostAddress());</span><br><span class="line">            </span><br><span class="line">            info = <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData(), <span class="number">0</span>, packet.getLength());</span><br><span class="line">            System.out.println(<span class="string">&quot;Message from Client：&quot;</span> + info);</span><br><span class="line"></span><br><span class="line">            reply = <span class="string">&quot;Successful reception&quot;</span>.getBytes();</span><br><span class="line">            p = <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(reply, reply.length, packet.getAddress(), packet.getPort());</span><br><span class="line">            socket.send(p);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>UDPServer.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UDPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    	</span><br><span class="line">    	<span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">8800</span>);</span><br><span class="line">        <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(data, data.length);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;Server...&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="type">UDPThread</span> <span class="variable">udp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UDPThread</span>(socket, packet);</span><br><span class="line">            udp.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="线程池版的tcp">线程池版的TCP</h2>
<p><strong>TCPClient.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		 </span><br><span class="line">		<span class="type">String</span> <span class="variable">userInput</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">String</span> <span class="variable">echoMessage</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="type">BufferedReader</span> <span class="variable">stdIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">		</span><br><span class="line">		<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8189</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Connected to Server&quot;</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">inStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">		<span class="type">OutputStream</span> <span class="variable">outStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">		<span class="type">BufferedReader</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inStream));</span><br><span class="line">		<span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(outStream);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>((userInput=stdIn.readLine())!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            out.println(userInput);</span><br><span class="line">			out.flush();</span><br><span class="line">			echoMessage = in.readLine();</span><br><span class="line">			System.out.println(<span class="string">&quot;Echo from server: &quot;</span> + echoMessage);</span><br><span class="line">		&#125;</span><br><span class="line">		socket.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>TCPThread.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TCPThread</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        InputStream is=<span class="literal">null</span>;</span><br><span class="line">        InputStreamReader isr=<span class="literal">null</span>;</span><br><span class="line">        BufferedReader br=<span class="literal">null</span>;</span><br><span class="line">        OutputStream os=<span class="literal">null</span>;</span><br><span class="line">        PrintWriter pw=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            isr = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">			os = socket.getOutputStream();</span><br><span class="line">            pw = <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(os);</span><br><span class="line">            String info=<span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((info=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            	<span class="type">InetAddress</span> <span class="variable">address</span> <span class="operator">=</span> socket.getInetAddress();</span><br><span class="line">                System.out.println(<span class="string">&quot;IP：&quot;</span> + address.getHostAddress());</span><br><span class="line">                System.out.println(<span class="string">&quot;Message from client:&quot;</span>+info);</span><br><span class="line">				pw.println(info);</span><br><span class="line">				pw.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(pw!=<span class="literal">null</span>)</span><br><span class="line">                    pw.close();</span><br><span class="line">                <span class="keyword">if</span>(os!=<span class="literal">null</span>)</span><br><span class="line">                    os.close();</span><br><span class="line">                <span class="keyword">if</span>(br!=<span class="literal">null</span>)</span><br><span class="line">                    br.close();</span><br><span class="line">                <span class="keyword">if</span>(isr!=<span class="literal">null</span>)</span><br><span class="line">                    isr.close();</span><br><span class="line">                <span class="keyword">if</span>(is!=<span class="literal">null</span>)</span><br><span class="line">                    is.close();</span><br><span class="line">                <span class="keyword">if</span>(socket!=<span class="literal">null</span>)</span><br><span class="line">                    socket.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p><strong>TCPServer.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> yun_computer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TCPServer</span> &#123;</span><br><span class="line">	 <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		 <span class="type">int</span> n=<span class="number">2</span>;</span><br><span class="line">		 <span class="type">int</span> m=<span class="number">4</span>;</span><br><span class="line">		 </span><br><span class="line">		 <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(n, m, <span class="number">200</span>, TimeUnit.MILLISECONDS,  </span><br><span class="line">	                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;Runnable&gt;(n));</span><br><span class="line">		 </span><br><span class="line">		 <span class="type">ServerSocket</span> <span class="variable">listenSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8189</span>); </span><br><span class="line">		 System.out.println(<span class="string">&quot;Server listening at 8189&quot;</span>);</span><br><span class="line">		 </span><br><span class="line">		 <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;(n+m);i++) &#123;</span><br><span class="line">			 <span class="type">Socket</span> <span class="variable">clientSocket</span> <span class="operator">=</span> listenSocket.accept();</span><br><span class="line">			 System.out.println(<span class="string">&quot;Accepted connection from client&quot;</span>);</span><br><span class="line">			 TCPThread tcp=<span class="keyword">new</span> <span class="title class_">TCPThread</span>(clientSocket);</span><br><span class="line">			 executor.execute(tcp);</span><br><span class="line">		 &#125;</span><br><span class="line">		 executor.shutdown();</span><br><span class="line">		 listenSocket.close();</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Socket</tag>
        <tag>分布式</tag>
        <tag>TCP</tag>
        <tag>UDP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|SIFT算法</title>
    <url>/2019/06/08/SIFT/</url>
    <content><![CDATA[<p><strong>尺度不变特征变换（Scale-invariant feature transform，SIFT），是用于图像处理领域的一种描述。</strong> <span id="more"></span> # 简介 <a href="https://baike.baidu.com/item/SIFT/1396275?fr=aladdin">SIFT算法</a>是一种提取局部特征的算法，基于物体上的一些局部外观的兴趣点而与影像的大小和旋转无关。对于光线、噪声、微视角改变的容忍度也相当高。基于这些特性，它们是高度显著而且相对容易撷取，在母数庞大的特征数据库中，很容易辨识物体而且鲜有误认。使用SIFT特征描述对于部分物体遮蔽的侦测率也相当高，甚至只需要3个以上的SIFT物体特征就足以计算出位置与方位。在现今的电脑硬件速度下和小型的特征数据库条件下，辨识速度可接近即时运算。SIFT特征的信息量大，适合在海量数据库中快速准确匹配。 匹配的过程就是对比这些特征点的过程，这个流程可以用下图表述： <img src="/2019/06/08/SIFT/1.png" alt="1"> # 特点 * SIFT特征是图像的局部特征，其对旋转、尺度缩放、亮度变化保持不变性，对视角变化、仿射变换、噪声也保持一定程度的稳定性。 * 独特性好，信息量丰富，适用于在海量特征数据库中进行快速、准确匹配。 * 多量性，即使少数的几个物体也可以产生大量SIFT特征向量。 * 高速性，经优化的SIFT匹配算法甚至可以达到实时的要求。 * 可扩展性，可以很方便的与其他形式的特征向量进行联合。</p>
<h1 id="算法步骤">算法步骤</h1>
<ol type="1">
<li>检测尺度空间极值点</li>
<li>精确定位极值点</li>
<li>为每个关键点指定方向参数</li>
<li>关键点描述子的生成</li>
</ol>
<h1 id="应用">应用</h1>
<p>OpenCV中带有SIFT算法。可以直接调用 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">img= cv2.imread(&#x27;C:/Code/Picture/apple.jpg&#x27;)</span><br><span class="line">gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">sift=cv2.xfeatures2d.SIFT_create()</span><br><span class="line">keypoints,descriptor=sift.detectAndCompute(gray,None)</span><br><span class="line"></span><br><span class="line">img=cv2.drawKeypoints(image=img,outImage=img,keypoints=keypoints,flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS,color=(51,163,236))</span><br><span class="line">cv2.imshow(&#x27;sift_keypoints&#x27;,img)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(0)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure> <img src="/2019/06/08/SIFT/new.png" alt="apple"> &gt;OpenCV使用SIFT时报错,建议卸载后安装opencv-contrib-python,同时3.4.3.18以上的版本会出现专利问题而无法使用。安装前记得卸载原来的。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install opencv-contrib-python==<span class="number">3.4</span><span class="number">.2</span><span class="number">.17</span></span><br></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p>参考文献 <a href="https://blog.csdn.net/dcrmg/article/details/52577555">Sift算子特征点提取、描述及匹配全流程解析</a> <a href="https://blog.csdn.net/dcrmg/article/details/52561656">Sift中尺度空间、高斯金字塔、差分金字塔（DOG金字塔）、图像金字塔</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>OpenCV</tag>
        <tag>SIFT</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|MapReduce-TopN</title>
    <url>/2019/06/28/TopN/</url>
    <content><![CDATA[<p><strong>问题描述：</strong> 有一个很大的文件，这文件中的内容全部都是数字，要求尝试从这个文件中找出最大的N个数字。 <span id="more"></span> 设置数据集data.txt <figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">143</span><br><span class="line">23</span><br><span class="line">34</span><br><span class="line">43</span><br><span class="line">5243</span><br><span class="line">632</span><br><span class="line">7342</span><br><span class="line">845</span><br><span class="line">945</span><br><span class="line">10</span><br><span class="line">234</span><br><span class="line">3424</span><br><span class="line">43</span><br><span class="line">6324</span><br><span class="line">647</span><br><span class="line">427</span><br><span class="line">6</span><br><span class="line">687</span><br><span class="line">789</span><br><span class="line">23</span><br><span class="line">324</span><br></pre></td></tr></table></figure> # 代码 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.DoubleWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopN</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TMap</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, Text&gt;&#123;</span><br><span class="line">		<span class="type">int</span>[] topN;</span><br><span class="line">		<span class="type">int</span> length;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">			length = context.getConfiguration().getInt(<span class="string">&quot;N&quot;</span>,<span class="number">5</span>);</span><br><span class="line">			topN = <span class="keyword">new</span> <span class="title class_">int</span>[length+<span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> value.toString();</span><br><span class="line">			<span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> Integer.valueOf(data);</span><br><span class="line">			topN[<span class="number">0</span>] = cost;</span><br><span class="line">			Arrays.sort(topN);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; length+<span class="number">1</span>;i++)&#123;</span><br><span class="line">                context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(String.valueOf(topN[i])),<span class="keyword">new</span> <span class="title class_">Text</span>(String.valueOf(topN[i])));</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text,Text,Text,Text&gt; &#123;</span><br><span class="line">		<span class="type">int</span>[] topN;</span><br><span class="line">        <span class="type">int</span> length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            length = context.getConfiguration().getInt(<span class="string">&quot;N&quot;</span>,<span class="number">5</span>);</span><br><span class="line">            topN = <span class="keyword">new</span> <span class="title class_">int</span>[length+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">			topN[<span class="number">0</span>] = Integer.valueOf(key.toString());</span><br><span class="line">			Arrays.sort(topN);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">(Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; length+<span class="number">1</span>;i++)&#123;</span><br><span class="line">                context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(String.valueOf(i)),<span class="keyword">new</span> <span class="title class_">Text</span>(String.valueOf(topN[length-i+<span class="number">1</span>])));</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">		conf.setInt(<span class="string">&quot;N&quot;</span>,<span class="number">3</span>);</span><br><span class="line">		String[] otherArgs = <span class="keyword">new</span> <span class="title class_">GenericOptionsParser</span>(conf, args).getRemainingArgs();</span><br><span class="line">		<span class="keyword">if</span> (otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		  System.err.println(<span class="string">&quot;Usage: TopN&lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">		  System.exit(<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;TopN&quot;</span>);</span><br><span class="line">		job.setJarByClass(TopN.class);</span><br><span class="line">		job.setMapperClass(TMap.class);</span><br><span class="line">		job.setReducerClass(TReducer.class);</span><br><span class="line">		job.setOutputKeyClass(Text.class);</span><br><span class="line">		job.setOutputValueClass(Text.class);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">			FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[i]));</span><br><span class="line">		&#125;</span><br><span class="line">		FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">		System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>setcp.bat <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set classpath=%classpath%;C:\Soft\Hadoop\etc\hadoop;C:\Soft\Hadoop\share\hadoop\common;C:\Soft\Hadoop\share\hadoop\common\lib\*;C:\Soft\Hadoop\share\hadoop\common\*;C:\Soft\Hadoop\share\hadoop\hdfs;C:\Soft\Hadoop\share\hadoop\hdfs\lib\*;C:\Soft\Hadoop\share\hadoop\hdfs\*;C:\Soft\Hadoop\share\hadoop\yarn;C:\Soft\Hadoop\share\hadoop\yarn\lib\*;C:\Soft\Hadoop\share\hadoop\yarn\*;C:\Soft\Hadoop\share\hadoop\mapreduce\*</span><br></pre></td></tr></table></figure></p>
<p>基本步骤 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setcp</span><br><span class="line">javac TopN.java</span><br><span class="line">jar cvf TopN.jar *.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">hadoop</span> jar TopN.jar TopN /test /output</span><br><span class="line">hadoop fs -ls /output</span><br><span class="line">hadoop fs -cat /output/part-r-<span class="number">00000</span></span><br><span class="line">hadoop fs -rm -r /output</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title>Kindle|电子书排版总结</title>
    <url>/2021/03/18/calibre/</url>
    <content><![CDATA[<p>总结一些用于AZW3格式的排版 <span id="more"></span> # 工具 ## Sigil <a href="https://github.com/Sigil-Ebook/Sigil/releases">下载地址</a></p>
<p>Sigil，跨平台的开源 ePub 电子书编辑器，支持Windows、Linux和Mac系统。</p>
<blockquote>
<p>个人主要用于切分章节.主要是因为处理文本量较大的文件时会闪退 ## Easypub <a href="https://bookfere.com/post/151.html">下载地址</a></p>
</blockquote>
<p>可以TXT文档转成带目录的MOBI/EPUB格式,但是排版一般. &gt;一般用这个将txt简单转换下,再细调 ## Calibre <a href="https://calibre-ebook.com/download_windows64">下载地址</a></p>
<p>Calibre 是一个免费的开源的“一站式”的电子书解决方案，它可以全面满足你的电子书需求。它是一个完整的电子图书馆，包括图书管理，格式转换，新闻，将材料转换为电子书，以及电子书阅读器同步功能、整合进电子图书阅读器。当然它也内置了一个 ePub 格式电子书编辑工具以满足修改电子书的需要。</p>
<blockquote>
<p>主要工具,功能强悍</p>
</blockquote>
<h1 id="字体">字体</h1>
<p>个人主要使用黑体,楷体,思源宋体和方正兰亭 ## 楷体 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;DK-KAITI&quot;</span>, <span class="string">&quot;楷体&quot;</span>, <span class="string">&quot;方正楷体_GBK&quot;</span>, <span class="string">&quot;KaiTi&quot;</span>, <span class="string">&quot;STKaiti&quot;</span>, <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br></pre></td></tr></table></figure> ## 思源宋体 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;syst&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;../fonts/systB.ttf&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;syst&quot;</span>;</span><br></pre></td></tr></table></figure> ## 方正兰亭 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;fzlt&quot;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;../fonts/fzltZH.ttf&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;fzlt&quot;</span>;</span><br></pre></td></tr></table></figure> # 封面 Kindle 电子书封面图片标准规格如下： * JPEG 或 TIFF 格式 * 优先使用 1.6:1 的长宽比 * 最小尺寸：宽 625 像素，长 1000 像素 * 最佳尺寸：宽 1563 像素，长 2500 像素</p>
<h1 id="标题">标题</h1>
<h2 id="卷标题">卷标题</h2>
<h3 id="横板">横板</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">class</span>=<span class="string">&quot;volume-title&quot;</span>&gt;</span></span><br><span class="line">第一卷</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> <span class="attr">class</span>=<span class="string">&quot;calibre3&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;volume-subtitle&quot;</span>&gt;</span> </span><br><span class="line">游戏创新的一般原理</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2021/03/18/calibre/1.png" alt><figcaption>1</figcaption>
</figure>
<p>其中 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.volume-title</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;DK-KAITI&quot;</span>, <span class="string">&quot;楷体&quot;</span>, <span class="string">&quot;方正楷体_GBK&quot;</span>, <span class="string">&quot;KaiTi&quot;</span>, <span class="string">&quot;STKaiti&quot;</span>, <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.3em</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30%</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.volume-subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;syst&quot;</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ### 竖版 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;head1&quot;</span> <span class="attr">title</span>=<span class="string">&quot;第一卷 天元篇&quot;</span>&gt;</span>第一卷<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;head2&quot;</span>&gt;</span>天元篇<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure> <img src="/2021/03/18/calibre/2.png" alt="2"> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.head</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1.4em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">25%</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.head1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;DK-FANGSONG&quot;</span>, <span class="string">&quot;方正仿宋_GBK&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.head2</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;DK-FANGSONG&quot;</span>, <span class="string">&quot;方正仿宋_GBK&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.4em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ## 章标题 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;chapter-title&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;chapter-sequence-number&quot;</span>&gt;</span>第991章<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span> 黑火石和哨兵</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;chapter-subtitle&quot;</span>&gt;</span>（上）<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure> <img src="/2021/03/18/calibre/3.png" alt="3"> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.chapter-sequence-number</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;fzlt&quot;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chapter-title</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;syst&quot;</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chapter-subtitle</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.7em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> # 正文 ## 文字 <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.calibre4</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: justify;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ## 插图 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tupian&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;image-alone&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../images/00079.jpeg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tupian</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.image-alone</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ## 注释 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;math-super&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;part0107.html#bz1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;z1&quot;</span>&gt;</span>[1]<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;zhusi&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;part0012.html#z1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bz1&quot;</span>&gt;</span>[1]<span class="tag">&lt;/<span class="name">a</span>&gt;</span>注释内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.math-super</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;DK-KAITI&quot;</span>, <span class="string">&quot;楷体&quot;</span>, <span class="string">&quot;方正楷体_GBK&quot;</span>, <span class="string">&quot;KaiTi&quot;</span>, <span class="string">&quot;STKaiti&quot;</span>, <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.75em</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: super;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zhusi</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;DK-KAITI&quot;</span>, <span class="string">&quot;楷体&quot;</span>, <span class="string">&quot;方正楷体_GBK&quot;</span>, <span class="string">&quot;KaiTi&quot;</span>, <span class="string">&quot;STKaiti&quot;</span>, <span class="string">&quot;STKai&quot;</span>, <span class="string">&quot;kt&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> # 其他 ## 方框 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;reference&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.reference</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0.25em</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">#444</span> dotted <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ## 阴影 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;indent&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;titlemode&quot;</span>&gt;</span>原文<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure> <img src="/2021/03/18/calibre/4.png" alt="4"> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.indent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">140%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: justify;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.titlemode</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#4A494A</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;楷体&quot;</span>, <span class="string">&quot;仿宋_gb2312&quot;</span>, <span class="string">&quot;zw&quot;</span>, serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.1em</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker|Docker的安装及简单使用</title>
    <url>/2019/05/20/docker/</url>
    <content><![CDATA[<p><strong>本文的安装环境为win10专业版</strong> <span id="more"></span> # 安装 <strong>注意：适用于Windows的Docker需要运行Microsoft Hyper-V。</strong></p>
<p>先到控制面板-&gt;程序与功能-&gt;启用或关闭Windows功能中查看自己是否开启Hyper-V <img src="/2019/05/20/docker/1.png" alt="hyper"> 可以从<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows">官网</a>下载，但是在国内会比较慢。可以点击<a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe">这里</a>下载。 <img src="/2019/05/20/docker/2.png" alt="xiazai"> 下载完成后，一路next即可，最终结果 <img src="/2019/05/20/docker/3.png" alt="end"> 在命令行中测试一下 <img src="/2019/05/20/docker/4.png" alt="test"> # 使用 运行docker run hello-world以测试从Docker Hub中拉取镜像并启动容器 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure> <img src="/2019/05/20/docker/5.png" alt="hello"> 删除镜像 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image </span><br><span class="line">docker rmi id</span><br></pre></td></tr></table></figure> <img src="/2019/05/20/docker/6.png" alt="delet"></p>
<h1 id="例子">例子</h1>
<p>用Dockerfile定义一个镜像，输出hello world</p>
<p>首先新建一个文件夹，文件夹里放入三个文件 <img src="/2019/05/20/docker/7.png" alt="file"> <strong>app.py</strong> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from flask import Flask</span><br><span class="line">from redis import Redis, RedisError</span><br><span class="line">import os</span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">redis = Redis(host=&quot;redis&quot;, db=0, socket_connect_timeout=2, socket_timeout=2)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    try:</span><br><span class="line">        visits = redis.incr(&quot;counter&quot;)</span><br><span class="line">    except RedisError:</span><br><span class="line">        visits = &quot;&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;&quot;</span><br><span class="line"></span><br><span class="line">    html = &quot;&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;&quot; \</span><br><span class="line">           &quot;&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;&quot;</span><br><span class="line">    return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname(), visits=visits)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&#x27;0.0.0.0&#x27;, port=80)</span><br></pre></td></tr></table></figure> <strong>Dockerfile</strong> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM python:3.6-slim</span><br><span class="line"></span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line">ADD . /app</span><br><span class="line"></span><br><span class="line">RUN pip install --trusted-host mirrors.aliyun.com --index http://mirrors.aliyun.com/pypi/simple/ -r requirements.txt</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">ENV NAME World</span><br><span class="line"></span><br><span class="line">CMD [&quot;python&quot;, &quot;app.py&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure> <strong>requirements.txt</strong> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Flask</span><br><span class="line">Redis</span><br></pre></td></tr></table></figure> 打开命令行 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 文件夹</span><br><span class="line">docker build -t firstapp .</span><br></pre></td></tr></table></figure> <img src="/2019/05/20/docker/8.png" alt="build"> 创建完成后，在镜像列表里就能看到了 <img src="/2019/05/20/docker/9.png" alt="list"> 运行应用 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 4040:80 firstapp</span><br></pre></td></tr></table></figure> <img src="/2019/05/20/docker/10.png" alt="run"> <img src="/2019/05/20/docker/11.png" alt="e"></p>
<p>大功告成！！！[&gt;_&lt;]</p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|MapReduce-计算平均成绩</title>
    <url>/2019/06/02/hadoop1/</url>
    <content><![CDATA[<p><strong>环境:</strong> Hadoop 3.0.0+Win10 <strong>实现功能：</strong> 1 每个同学必修课的平均成绩 2 按科目统计每个班的平均成绩 <span id="more"></span> # 配置数据和环境变量 输入文件为学生成绩信息，包含了必修课与选修课成绩：<a href="https://pan.baidu.com/s/12nsFyszQWgyElh5PfxML3g">Input1.txt</a>(提取码:xrq7) <img src="/2019/06/02/hadoop1/1.png" alt="1"></p>
<p>首先启动hadoop（记得以管理员模式启动），新建一个input1文件夹，把输入文件上传到文件夹中 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir /input1</span><br><span class="line">hadoop fs -put input1.txt /input1</span><br></pre></td></tr></table></figure> 由于程序里会用到hadoop的jar包，所以要把路径配置到环境中，一种是直接在系统变量中修改classpath，但是会影响以后的编译，不推荐；第二种是新建一个.bat文件，在编译前启动就行了。 查看自己hadoop里jar包的路径 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop classpath</span><br></pre></td></tr></table></figure> <img src="/2019/06/02/hadoop1/2.png" alt="2"> 新建一个文件夹Map,里面新建一个setcp.bat，内容如下 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set classpath=%classpath%;上一步查看的内容</span><br></pre></td></tr></table></figure> 在Map文件下，启动setcp <img src="/2019/06/02/hadoop1/3.png" alt="3"> 到此准备工作就做完了。</p>
<h1 id="程序构成">程序构成</h1>
<figure>
<img src="/2019/06/02/hadoop1/7.png" alt><figcaption>7</figcaption>
</figure>
<h1 id="具体实现">具体实现</h1>
<h2 id="问题一">问题一</h2>
<p>问题是求每个同学必修课的平均成绩，思路很简单。以同学的名字为主键，如果是必修课成绩就读取，最后计算总分数和个数，求取平均数。 &gt;这里要注意一下中文编码问题，输入数据为utf-8的格式，而hadoop读取时会转为GBK，在判断必修的时候注意编码。</p>
<p>Score.java <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.DoubleWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Score</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SMap</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, DoubleWritable&gt; &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">			String[] split=value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">			String Name=split[<span class="number">1</span>];</span><br><span class="line">			String t=split[<span class="number">3</span>];</span><br><span class="line">			<span class="keyword">if</span>(t.equals(<span class="string">&quot;▒пля&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="type">DoubleWritable</span> <span class="variable">Score</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleWritable</span>(Integer.parseInt(split[<span class="number">4</span>]));</span><br><span class="line">				context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(Name),Score);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text,DoubleWritable,Text,DoubleWritable&gt; &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;DoubleWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">			<span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (DoubleWritable val : values) &#123;</span><br><span class="line">				sum += val.get();</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="type">double</span> average=sum/(<span class="type">double</span>)count;</span><br><span class="line">			context.write(key,<span class="keyword">new</span> <span class="title class_">DoubleWritable</span>(average));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">		String[] otherArgs = <span class="keyword">new</span> <span class="title class_">GenericOptionsParser</span>(conf, args).getRemainingArgs();</span><br><span class="line">		<span class="keyword">if</span> (otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		  System.err.println(<span class="string">&quot;Usage: Score&lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">		  System.exit(<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;score&quot;</span>);</span><br><span class="line">		job.setJarByClass(Score.class);</span><br><span class="line">		job.setMapperClass(SMap.class);</span><br><span class="line">		job.setReducerClass(SReducer.class);</span><br><span class="line">		job.setOutputKeyClass(Text.class);</span><br><span class="line">		job.setOutputValueClass(DoubleWritable.class);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">			FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[i]));</span><br><span class="line">		&#125;</span><br><span class="line">		FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">		System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 编译写好的程序，并打包。没问题的话，会在文件夹里看到生成的Score.jar <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac Score.java</span><br><span class="line">jar cvf Score.jar *.class</span><br></pre></td></tr></table></figure> 执行程序，hadoop会读取input1的数据，将输出文件放到output1中。 &gt;在执行这步时，可能会遇到各种各样的问题，多查一查，网上都会有解决方法的。当然，重装可以解决百分之五十的问题:yum: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop jar Score.jar Score /input1 /output1</span><br></pre></td></tr></table></figure> 最后，能在output1里看到两个文件，part-r-00000是最终结果。 &gt;如果要多次运行，记得每次运行前把output文件夹删了，否则会由于文件夹存在报错。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /output1</span><br><span class="line">hadoop fs -cat /output1/part-r-00000</span><br></pre></td></tr></table></figure> 在命令行打开应该会乱码，打开<a href="http://localhost:9870/explorer.html#/output1" class="uri">http://localhost:9870/explorer.html#/output1</a>下载下来。 <img src="/2019/06/02/hadoop1/4.png" alt="4"> 最终结果 <img src="/2019/06/02/hadoop1/5.png" alt="5"></p>
<h2 id="问题二">问题二</h2>
<p>思路和问题一直，把学生姓名换成课程名称+班级就行了 cScore.java <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.FloatWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cScore</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">cSMap</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, IntWritable&gt; &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">			String[] split=value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">			String room=split[<span class="number">0</span>];</span><br><span class="line">			String course=split[<span class="number">2</span>];</span><br><span class="line">			String Name=course+<span class="string">&quot; &quot;</span>+room;</span><br><span class="line">			<span class="type">int</span> Score=Integer.parseInt(split[<span class="number">4</span>]);</span><br><span class="line">			context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(Name),<span class="keyword">new</span> <span class="title class_">IntWritable</span>(Score));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">cSReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text,IntWritable,Text,FloatWritable&gt; &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">			<span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">			<span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">				sum += val.get();</span><br><span class="line">				count++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="type">float</span> average=sum/(<span class="type">float</span>)count;</span><br><span class="line">			context.write(key,<span class="keyword">new</span> <span class="title class_">FloatWritable</span>(average));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">		String[] otherArgs = <span class="keyword">new</span> <span class="title class_">GenericOptionsParser</span>(conf, args).getRemainingArgs();</span><br><span class="line">		<span class="keyword">if</span> (otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		  System.err.println(<span class="string">&quot;Usage: cScore&lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">		  System.exit(<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;cscore&quot;</span>);</span><br><span class="line">		job.setJarByClass(cScore.class);</span><br><span class="line">		job.setMapperClass(cSMap.class);</span><br><span class="line">		job.setReducerClass(cSReducer.class);</span><br><span class="line">		job.setOutputKeyClass(Text.class);</span><br><span class="line">		job.setOutputValueClass(IntWritable.class);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">			FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[i]));</span><br><span class="line">		&#125;</span><br><span class="line">		FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">		System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 运行方法和上面一直 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac cScore.java</span><br><span class="line">jar cvf cScore.jar *.class</span><br><span class="line">hadoop fs -mkdir /input1</span><br><span class="line">hadoop fs -put input1.txt /input1</span><br><span class="line">hadoop jar cScore.jar cScore /input1 /output2</span><br></pre></td></tr></table></figure> 最后，能在output2里找到最终结果part-r-00000。打开<a href="http://localhost:9870/explorer.html#/output2" class="uri">http://localhost:9870/explorer.html#/output2</a>下载下来。 最终结果 <img src="/2019/06/02/hadoop1/6.png" alt="6"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记</title>
    <url>/2022/11/15/c/</url>
    <content><![CDATA[<p>推荐网站：interview.huihut.com <span id="more"></span> # 基础笔记</p>
<h2 id="局部变量和全局变量">局部变量和全局变量</h2>
<p>在程序中，局部变量和全局变量的名称可以相同，但是在函数内，局部变量的值会覆盖全局变量的值。</p>
<h1 id="代码示例">代码示例</h1>
<h2 id="二维数组排序">二维数组排序</h2>
<p>以list[i][1]为关键值，从大到小排序 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(list.<span class="built_in">begin</span>(), list.<span class="built_in">end</span>(), </span><br><span class="line">    [](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;a, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="文件路径划分">文件路径划分</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string path1 = <span class="string">&quot;D:/datas/1.bmp&quot;</span></span><br><span class="line"></span><br><span class="line">string::size_type iPos = (path1 .<span class="built_in">find_last_of</span>(<span class="string">&#x27;\\&#x27;</span>) + <span class="number">1</span>) == <span class="number">0</span> ?  path1 .<span class="built_in">find_last_of</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>: path1 .<span class="built_in">find_last_of</span>(<span class="string">&#x27;\\&#x27;</span>) + <span class="number">1</span> ;</span><br><span class="line">string ImgName = path1 .<span class="built_in">substr</span>(iPos, path1 .<span class="built_in">length</span>() - iPos);<span class="comment">//获取带后缀的文件名</span></span><br><span class="line">string ImgPath = path1 .<span class="built_in">substr</span>(<span class="number">0</span>,iPos);<span class="comment">//获取文件路径</span></span><br><span class="line">string ImgNameNoTag = ImgName.<span class="built_in">substr</span>(<span class="number">0</span>, ImgName.<span class="built_in">rfind</span>(<span class="string">&quot;.&quot;</span>));<span class="comment">//获取不带后缀的文件名</span></span><br><span class="line">string ImgNameTag = ImgName.<span class="built_in">substr</span>(ImgName.<span class="built_in">rfind</span>(<span class="string">&quot;.&quot;</span>),ImgName.<span class="built_in">length</span>());<span class="comment">//获取后缀名</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|遗传算法实现</title>
    <url>/2019/06/02/ga/</url>
    <content><![CDATA[<p><strong>遗传算法（genetic algorithm）是计算数学中用于解决最优化的搜索算法，是进化算法的一种。</strong> <span id="more"></span> # 原理简述 &gt;参照维基百科</p>
<p>在遗传算法里，优化问题的解被称为个体，它表示为一个变量序列，叫做染色体或者基因串。染色体一般被表达为简单的字符串或数字符串，不过也有其他的依赖于特殊问题的表示方法适用，这一过程称为编码。首先，算法随机生成一定数量的个体，有时候操作者也可以干预这个随机产生过程，以提高初始种群的质量。在每一代中，都会评价每一个体，并通过计算适应度函数得到适应度数值。按照适应度排序种群个体，适应度高的在前面。这里的“高”是相对于初始的种群的低适应度而言。</p>
<p>下一步是产生下一代个体并组成种群。这个过程是通过选择和繁殖完成，其中繁殖包括交配（crossover，在算法研究领域中我们称之为交叉操作）和突变（mutation）。选择则是根据新个体的适应度进行，但同时不意味着完全以适应度高低为导向，因为单纯选择适应度高的个体将可能导致算法快速收敛到局部最优解而非全局最优解，我们称之为早熟。作为折中，遗传算法依据原则：适应度越高，被选择的机会越高，而适应度低的，被选择的机会就低。初始的数据可以通过这样的选择过程组成一个相对优化的群体。之后，被选择的个体进入交配过程。一般的遗传算法都有一个交配概率（又称为交叉概率），范围一般是0.6~1，这个交配概率反映两个被选中的个体进行交配的概率。例如，交配概率为0.8，则80%的“夫妻”会生育后代。每两个个体通过交配产生两个新个体，代替原来的“老”个体，而不交配的个体则保持不变。交配父母的染色体相互交换，从而产生两个新的染色体，第一个个体前半段是父亲的染色体，后半段是母亲的，第二个个体则正好相反。不过这里的半段并不是真正的一半，这个位置叫做交配点，也是随机产生的，可以是染色体的任意位置。再下一步是突变，通过突变产生新的“子”个体。一般遗传算法都有一个固定的突变常数（又称为变异概率），通常是0.1或者更小，这代表变异发生的概率。根据这个概率，新个体的染色体随机的突变，通常就是改变染色体的一个字节（0变到1，或者1变到0）。</p>
<p>经过这一系列的过程（选择、交配和突变），产生的新一代个体不同于初始的一代，并一代一代向增加整体适应度的方向发展，因为总是更常选择最好的个体产生下一代，而适应度低的个体逐渐被淘汰掉。这样的过程不断的重复：评价每个个体，计算适应度，两两交配，然后突变，产生第三代。周而复始，直到终止条件满足为止。一般终止条件有以下几种：</p>
<pre><code>计算耗费的资源限制（例如计算时间、计算占用的内存等）；
一个个体已经满足最优值的条件，即最优值已经找到；
适应度已经达到饱和，继续进化不会产生适应度更好的个体；
人为干预；以及以上两种或更多种的组合。</code></pre>
<h1 id="基本思想">基本思想</h1>
<ul>
<li>首先对问题进行<strong>编码</strong>，产生初始种群。</li>
<li>然后对个体进行<strong>交叉</strong>、<strong>变异</strong>等遗传操作，产生出新的个体。</li>
<li>再按照优胜劣汰的原则对个体进行<strong>选择</strong>。</li>
<li>如此往复，逐代演化产生出越来<strong>越好</strong>的个体。</li>
</ul>
<h2 id="编码">编码</h2>
<p>将问题的解变换为位串形式编码表示的过程叫编码 &gt;编码是进化计算解决问题的先决条件 &gt;编码的重要性主要体现在三方面： （1） 编码决定了个体基因的排列形式，从而决定了选择、交叉及变异的方式。 （2） 编码决定了搜索的困难度与复杂性。 （3） 编码决定了问题的求解精度。</p>
<h2 id="交叉">交叉</h2>
<p>单点交叉 <img src="/2019/06/02/ga/2.png" alt="2"> 两点交叉 <img src="/2019/06/02/ga/3.png" alt="3"> 部分匹配交叉 <img src="/2019/06/02/ga/4.png" alt="4"> 顺序交叉 <img src="/2019/06/02/ga/6.png" alt="5"></p>
<h2 id="变异">变异</h2>
<figure>
<img src="/2019/06/02/ga/7.png" alt><figcaption>6</figcaption>
</figure>
<h2 id="选择">选择</h2>
<p>轮盘赌选择 <img src="/2019/06/02/ga/8.png" alt="7"> <img src="/2019/06/02/ga/9.png" alt="8"> <img src="/2019/06/02/ga/10.png" alt="9"> 可能出现的问题 <img src="/2019/06/02/ga/11.png" alt="10"> <img src="/2019/06/02/ga/12.png" alt="11"> <img src="/2019/06/02/ga/13.png" alt="12"> <img src="/2019/06/02/ga/14.png" alt="13"> 两两竞争法选择 <img src="/2019/06/02/ga/15.png" alt="14"> 锦标赛选择 <img src="/2019/06/02/ga/16.png" alt="15"> 精英保留 <img src="/2019/06/02/ga/17.png" alt="16"></p>
<h1 id="算法流程">算法流程</h1>
<ul>
<li><strong>[初始化]</strong> 确定种群规模<span class="math inline">\(N\)</span>，交叉概率<span class="math inline">\(p_c\)</span>，变异概率<span class="math inline">\(p_m\)</span>和终止条件。随机生成<span class="math inline">\(N\)</span>个个体作为初始种群<span class="math inline">\(P(0)\)</span>，设种群代数<span class="math inline">\(t\)</span>=0.</li>
<li><strong>[个体评价]</strong> 计算种群<span class="math inline">\(P(t)\)</span>中每个个体的适应度值.</li>
<li><strong>[种群进化]</strong>
<ul>
<li>(<strong>选择父代</strong>) 运用选择算子从<span class="math inline">\(P(t)\)</span>中选择出<span class="math inline">\(N/2\)</span>对父代；</li>
<li>(<strong>交叉</strong>) 对选择的<span class="math inline">\(N/2\)</span>对父代，依概率<span class="math inline">\(p_c\)</span>进行交叉，生成的子代个体记为集合<span class="math inline">\(O_1\)</span>；</li>
<li>(<strong>变异</strong>) 对集合<span class="math inline">\(O_1\)</span>中的个体依概率<span class="math inline">\(p_m\)</span>进行变异，生成的子代个体记为集合<span class="math inline">\(O_2\)</span>；</li>
<li>(<strong>选择子代</strong>) 从集合<span class="math inline">\(P(t)\cup O_1\cup O_2\)</span>中依据选择算子选出<span class="math inline">\(N\)</span>个个体组成下代种群<span class="math inline">\(P(t+1)\)</span>；</li>
</ul></li>
<li><strong>[终止检验]</strong> 如算法满足终止条件，则输出<span class="math inline">\(P(t+1)\)</span>中具有最大适应度值的个体作为最优解，终止算法，否则令<span class="math inline">\(t=t+1\)</span>转入步骤2</li>
</ul>
<h1 id="算法实现">算法实现</h1>
<blockquote>
<p>敬请期待</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>GA</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop|在Windows上安装Hadoop及WordCount示例</title>
    <url>/2019/05/27/hadoop/</url>
    <content><![CDATA[<p><strong>安装环境： 操作系统：Windows 10 JDK版本：JDK 1.8以上的Java开发和运行环境</strong> <span id="more"></span> # 什么是Hadoop 　　Hadoop是一款支持数据密集型分布式应用程序并以Apache 2.0许可协议发布的开源软件框架。它支持在商品硬件构建的大型集群上运行的应用程序。Hadoop是根据谷歌公司发表的MapReduce和Google文件系统的论文自行实现而成。所有的Hadoop模块都有一个基本假设，即硬件故障是常见情况，应该由框架自动处理。</p>
<p>　　Hadoop框架透明地为应用提供可靠性和数据移动。它实现了名为MapReduce的编程范式：应用程序被分割成许多小部分，而每个部分都能在集群中的任意节点上运行或重新运行。此外，Hadoop还提供了分布式文件系统，用以存储所有计算节点的数据，这为整个集群带来了非常高的带宽。MapReduce和分布式文件系统的设计，使得整个框架能够自动处理节点故障。它使应用程序与成千上万的独立计算的计算机和PB级的数据连接起来。</p>
<p>以上内容来自维基百科。不过对于我来说，开始学习某一套技术只有当我亲自动手实践后，才能真正理解这套技术解决了什么问题，并且有益于后续的学习。下来就让我们开始吧！ # Hadoop配置 1 先检查下自己的配置环境，主要是JDK版本 <img src="/2019/05/27/hadoop/1.png" alt="java"> 2 下载进制压缩包文件:<a href="http://archive.apache.org/dist/hadoop/core/hadoop-3.0.0/">hadoop-3.0.0.tar.gz</a> <img src="/2019/05/27/hadoop/2.png" alt="h"> 3 下载针对Windows环境的Hadoop修正程序:<a href="https://github.com/steveloughran/winutils">winutils-master.zip</a> <img src="/2019/05/27/hadoop/3.png" alt="wm"> 4 将hadoop-3.0.0.tar.gz解压至 **C:*（可以根据自己喜好更改Hadoop安装目录） <img src="/2019/05/27/hadoop/4.png" alt="h"> 5 新增环境变量<strong>HADOOP_HOME</strong>（作为系统变量），并将其值设为 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Soft\Hadoop\bin</span><br><span class="line">(这里根据你自己解压的位置设置)</span><br></pre></td></tr></table></figure> （设置方法：进入“控制面板”，然后点击“高级系统设置”，然后点击“环境变量(N)..”按钮） <img src="/2019/05/27/hadoop/5.png" alt="h"> 6 观察<strong>JAVA_HOME</strong>变量设置是否正确，这个后面会用到。 <img src="/2019/05/27/hadoop/6.png" alt="h"> 7 将**C:*路径添加到Path环境变量。(这是本人的，记得换成自己的) 8 将如下内容粘贴到..-site.xml文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure> 9 将如下内容粘贴到..-site.xml文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure> 10 在..“data”子目录； 在..“namenode”子目录； 在..“datanode”子目录。 <img src="/2019/05/27/hadoop/7.png" alt="d"> 11 将如下内容粘贴到..-site.xml文件 （里面的路径记得换成自己的） <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">       &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">       &lt;value&gt;file:///C:/Soft/hadoop/data/namenode&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">       &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">       &lt;value&gt;file:///C:/Soft/hadoop/data/datanode&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure> 12 将如下内容粘贴到..-site.xml文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">    	&lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">    	&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">   &lt;property&gt;</span><br><span class="line">      	&lt;name&gt;yarn.nodemanager.auxservices.mapreduce.shuffle.class&lt;/name&gt;  </span><br><span class="line">	&lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;</span><br><span class="line">   &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure> 13 编辑文件C:-env.cmd： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把“set JAVA_HOME=%JAVA_HOME%”</span><br><span class="line">修改为“set JAVA_HOME=C:\PROGRA~1\Java\自己的jdk版本”</span><br><span class="line">可以回到第6步看一下，本人的是jdk1.8.0_201</span><br></pre></td></tr></table></figure> 14 C:。 15 将第3步下载的“winutils-master.zip”解压，然后将解压文件中“..-master.0”目录下的内容拷贝到“..”目录。 # 测试 到此为止，Hadoop的安装就完成了，接下来运行几个命令测试Hadoop是否可以正常运行 1 打开终端 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ..\Hadoop\bin</span><br></pre></td></tr></table></figure> 2 先对HDFS分布式文件系统进行格式化。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdfs namenode –format</span><br></pre></td></tr></table></figure> 如果成功，能看到下面这句 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INFO common.Storage: Storage directory C:\Soft\hadoop\data\namenode has been successfully formatted</span><br></pre></td></tr></table></figure> 3 输入下面的命令。如果一切正常，将会启动一个“hdfs namenode”进程和一个“hdfs datanode”进程，构成了只有1个主节点和1个从节点的“HDFS分布式文件系统集群”。可以通过<a href="http://localhost:9870" class="uri">http://localhost:9870</a>监控HDFS系统。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ..\Hadoop\sbin</span><br><span class="line">start-dfs</span><br></pre></td></tr></table></figure> <img src="/2019/05/27/hadoop/9.png" alt="s"> 4 关闭HDFS分布式文件系统。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd ..\Hadoop\sbin</span><br><span class="line">stop-dfs</span><br></pre></td></tr></table></figure> # WordCount示例的使用 首先，以管理员身份启动命令行，进到sbin文件夹下 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\Soft\Hadoop\sbin</span><br></pre></td></tr></table></figure> <img src="/2019/05/27/hadoop/10.png" alt="1"> 启动Hadoop <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start-all</span><br></pre></td></tr></table></figure> <img src="/2019/05/27/hadoop/11.png" alt="2"> 如果正常的话会打开四个窗口 <img src="/2019/05/27/hadoop/14.png" alt="w"> 新建一个txt文件作为数据样本 test.txt <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello</span><br><span class="line">world</span><br><span class="line">qit</span><br><span class="line">stop</span><br><span class="line">sdf</span><br><span class="line">apple</span><br><span class="line">EA</span><br><span class="line">steam</span><br><span class="line">orange</span><br></pre></td></tr></table></figure> 在Hadoop中新建一个test文件夹 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir /test</span><br></pre></td></tr></table></figure> <img src="/2019/05/27/hadoop/13.png" alt="3"> 将test.txt上传到test文件夹中，查看一下 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -put C:\Else\test.txt \test</span><br><span class="line">hadoop fs -ls /</span><br><span class="line">hadoop fs -ls /test</span><br></pre></td></tr></table></figure> <img src="/2019/05/27/hadoop/12.png" alt="4"> 到此准备工作就已经做完了。</p>
<p>WordCount是Hadoop自带的一个示例程序，在../Hadoop <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop jar C:\Soft\Hadoop\share\hadoop\mapreduce\hadoop-mapreduce-examples-3.0.0.jar wordcount \test \output</span><br></pre></td></tr></table></figure> <img src="/2019/05/27/hadoop/15.png" alt="5"> 运行完成后能在output文件夹下看的两个文件，最终的结果就存在part-r-00000中 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -ls /output</span><br><span class="line">hadoop fs -cat /output/part-r-00000</span><br></pre></td></tr></table></figure> <img src="/2019/05/27/hadoop/16.png" alt="6"> 输入结束命令，关闭系统 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop-all</span><br></pre></td></tr></table></figure></p>
<h1 id="附录">附录</h1>
<table>
<thead>
<tr class="header">
<th>代码</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>hadoop fs –ls /</td>
<td>显示根目录下的所有文件和目录</td>
</tr>
<tr class="even">
<td>hadoop fs –mkdir /test</td>
<td>创建子目录/test，创建多级目录 加上 –p</td>
</tr>
<tr class="odd">
<td>hadoop fs -rm /test1.txt</td>
<td>删除文件</td>
</tr>
<tr class="even">
<td>hadoop fs -rm -r /test</td>
<td>删除子目录（要加-r参数）</td>
</tr>
<tr class="odd">
<td>hadoop fs -put C:.txt </td>
<td>将本地文件上传到HDFS分布式文件系统</td>
</tr>
<tr class="even">
<td>hadoop fs -cat .txt</td>
<td>查看文件内容</td>
</tr>
<tr class="odd">
<td>hadoop fs -cp URI [URI …]</td>
<td>cp 复制系统内文件</td>
</tr>
<tr class="even">
<td>hadoop fs -get[-ignorecrc] [-crc]</td>
<td>下载文件到本地</td>
</tr>
<tr class="odd">
<td>hadoop fs -mv URI [URI …]</td>
<td>将文件从源路径移动到目标路径</td>
</tr>
<tr class="even">
<td>hadoop fs -du URI [URI …]</td>
<td>显示文件大小</td>
</tr>
</tbody>
</table>
]]></content>
      <tags>
        <tag>分布式</tag>
        <tag>Hadoop</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|PyTorch学习记录</title>
    <url>/2020/07/08/pytorch/</url>
    <content><![CDATA[<p><strong>PyTorch使用心得</strong> <span id="more"></span> # 创建虚拟环境 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n c_d python=3.7</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate c_d</span><br></pre></td></tr></table></figure> # 安装PyTorch 进入<a href="https://pytorch.org/get-started/locally/">PyTorch官网</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install pytorch==1.13.1 torchvision==0.14.1 torchaudio==0.13.1 pytorch-cuda=11.6 -c pytorch -c nvidia</span><br></pre></td></tr></table></figure>
<p>or <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install torch==1.13.1+cu116 torchvision==0.14.1+cu116 torchaudio==0.13.1 --extra-index-url https://download.pytorch.org/whl/cu116</span><br></pre></td></tr></table></figure></p>
<h1 id="安装pyg">安装PyG</h1>
<p>进入<a href="https://pytorch-geometric.readthedocs.io/en/latest/install/installation.html">PyG官网</a> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install torch_geometric</span><br><span class="line"></span><br><span class="line"># Optional dependencies:</span><br><span class="line">pip install torch_scatter torch_sparse torch_cluster torch_spline_conv -f https://data.pyg.org/whl/torch-1.13.0+cu116.html</span><br></pre></td></tr></table></figure></p>
<h1 id="其他">其他</h1>
<h2 id="cpu-gpu监控"><a href="https://www.zhihu.com/question/376875425">CPU, GPU监控</a></h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 从 PyPI 获取并安装</span><br><span class="line">$ pip3 install --upgrade nvitop</span><br><span class="line"></span><br><span class="line"># 从 GitHub 获取并安装最新版 (推荐)</span><br><span class="line">$ pip3 install git+https://github.com/XuehaiPan/nvitop.git#egg=nvitop</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 获取并显示机器资源信息 (只打印一次)</span><br><span class="line">$ nvitop -1          # 获取并显示机器资源信息 (所有 GPU)</span><br><span class="line">$ nvitop -1 -o 0 1   # 只显示 &lt;GPU 0&gt; 和 &lt;GPU 1&gt;</span><br><span class="line">$ nvitop -1 -ov      # 只显示 `CUDA_VISIBLE_DEVICES` 中的 GPU</span><br><span class="line">$ nvitop -1 -U       # 只使用 ASCII 字符 适用于不支持 Unicode 字符的终端</span><br><span class="line"></span><br><span class="line"># 资源监视器模式</span><br><span class="line">$ nvitop             # 资源监视器</span><br><span class="line">$ nvitop -m auto     # 资源监视器 (通过终端大小自动调整显示模式 (默认))</span><br><span class="line">$ nvitop -m full     # 资源监视器 (完全模式，无视窗口大小变化)</span><br><span class="line">$ nvitop -m compact  # 资源监视器 (紧凑模式，无视窗口大小变化)</span><br><span class="line">$ nvitop -m -o 0 1   # 只显示 &lt;GPU 0&gt; 和 &lt;GPU 1&gt;</span><br><span class="line">$ nvitop -m -ov      # 只显示 `CUDA_VISIBLE_DEVICES` 中的 GPU</span><br><span class="line">$ nvitop -m -U       # 只使用 ASCII 字符 适用于不支持 Unicode 字符的终端</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|MapReduce-自连接算法</title>
    <url>/2019/06/04/hadoop2/</url>
    <content><![CDATA[<p><strong>环境:</strong> Hadoop 3.0.0+Win10 <strong>实现功能：</strong> 找出所有具有grandchild-grandparent关系的人名组。 <span id="more"></span> 输入文件的每一行为具有child-parent关系的一对人名<a href="https://pan.baidu.com/s/10fVu0_fmhxxOEMmwlKMJlw">Input2.txt</a>(提取码:2vd7) <img src="/2019/06/04/hadoop2/1.png" alt="1"> 首先启动hadoop（记得以管理员模式启动），新建一个input2文件夹，把输入文件上传到文件夹中 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop fs -mkdir /input2</span><br><span class="line">hadoop fs -put input2.txt /input2</span><br></pre></td></tr></table></figure> 按照上一个博客里，启动setcp。准备工作完成。 # 设计思路 数据量很大，我们先从一个小样本开始 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a,b #a是b的儿子</span><br><span class="line">b,c #b是c的儿子</span><br><span class="line">很明显a是c的孙子，最后输出的肯定就是a,c </span><br></pre></td></tr></table></figure> 爷爷就是爸爸的爸爸，如何识别出谁是子女，谁是父母呢？ 很容易想到加标签。在父母前加个“0”，在子女前加个“1”，结果如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#&lt;key,value&gt;</span><br><span class="line">&lt;a,0_b&gt;</span><br><span class="line">&lt;b,1_a&gt;</span><br><span class="line">&lt;b,0_c&gt;</span><br><span class="line">&lt;c,1_b&gt;</span><br></pre></td></tr></table></figure> 在同样的key中，前缀为0的就是前缀为1的grandparent # 代码 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grand</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">GrandMap</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, Text&gt; &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">			String[] array = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(array[<span class="number">0</span>]),<span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;0_&quot;</span>+array[<span class="number">1</span>]));</span><br><span class="line">            context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(array[<span class="number">1</span>]),<span class="keyword">new</span> <span class="title class_">Text</span>(<span class="string">&quot;1_&quot;</span>+array[<span class="number">0</span>]));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">GrandReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text,Text,Text,Text&gt; &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">			Iterator&lt;Text&gt; iterator = values.iterator();</span><br><span class="line">			ArrayList&lt;String&gt; grandChildList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">            ArrayList&lt;String&gt; grandParentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">                String[] splited = iterator.next().toString().split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (splited[<span class="number">0</span>].equals(<span class="string">&quot;1&quot;</span>))&#123;</span><br><span class="line">                    grandChildList.add(splited[<span class="number">1</span>]);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    grandParentList.add(splited[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (grandChildList.size() &gt;<span class="number">0</span> &amp;&amp; grandParentList.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span>(String grandChild:grandChildList)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (String grandParent:grandParentList)&#123;</span><br><span class="line">                        context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(grandChild),<span class="keyword">new</span> <span class="title class_">Text</span>(grandParent));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">		<span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">		String[] otherArgs = <span class="keyword">new</span> <span class="title class_">GenericOptionsParser</span>(conf, args).getRemainingArgs();</span><br><span class="line">		<span class="keyword">if</span> (otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">		  System.err.println(<span class="string">&quot;Usage: Grand&lt;in&gt; [&lt;in&gt;...] &lt;out&gt;&quot;</span>);</span><br><span class="line">		  System.exit(<span class="number">2</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;grand&quot;</span>);</span><br><span class="line">		job.setJarByClass(Grand.class);</span><br><span class="line">		job.setMapperClass(GrandMap.class);</span><br><span class="line">		job.setReducerClass(GrandReducer.class);</span><br><span class="line">		job.setOutputKeyClass(Text.class);</span><br><span class="line">		job.setOutputValueClass(Text.class);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">			FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[i]));</span><br><span class="line">		&#125;</span><br><span class="line">		FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> <span class="title class_">Path</span>(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">		System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 编译并打包 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac Grand.java</span><br><span class="line">jar cvf Grand.jar *.class</span><br></pre></td></tr></table></figure> 运行并查看结果 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadoop jar Grand.jar Grand /input2 /output3</span><br><span class="line">hadoop fs -cat /output3/part-r-00000</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|粒子群算法实现</title>
    <url>/2019/05/20/pso/</url>
    <content><![CDATA[<p><strong>粒子群算法，也称粒子群优化算法或鸟群觅食算法（Particle Swarm Optimization），缩写为PSO</strong> <span id="more"></span> # 介绍 粒子群算法（PSO）是模拟群体智能所建立起来的一种优化算法，主要用于解决最优化问题。基本思想是通过群体中个体之间的协作和信息共享来寻找最优解</p>
<p>算法是模拟鸟群或蜂群的觅食行为。假设这样一个问题：一群鸟在随机的搜索食物，在一块区域里只有一块食物，所有的鸟都不知道食物在哪。但是它们知道自己的当前位置距离食物有多远。那么这群鸟找到食物的最优策略就是搜寻目前离食物最近的鸟的周围区域。 # 基本概念 粒子群算法就是对上面问题的一个抽象。 * 每个鸟抽象为一个无质量，无体积的“粒子” * 每个粒子有一个适应度函数以模拟每只鸟与食物的距离 * 每个粒子有一个速度决定它的飞行方向和距离，初始值可以随机确定 * 每一次单位时间的飞行后，所有粒子分享信息，下一步将飞向自身最佳位置和全局最优位置的加权中心</p>
<p>初始化为一群随机粒子，通过迭代找到最优。每次迭代中，粒子通过跟踪“个体极值（pbest）”和“全局极值(gbest)”来更新自己的位置。</p>
<p>举个例子，假设在D维搜索空间中，有m个粒子 其中第i个粒子的位置为矢量，记<span class="math inline">\(\vec{x}_i=(x_{i1},x_{i2},\ldots,x_{iD})\)</span> 其飞翔速度也是一个矢量，记<span class="math inline">\(\vec{v}_i=(v_{i1},v_{i2},\ldots,v_{iD})\)</span> 第i个粒子搜索到的最优位置为<span class="math inline">\(\vec{p}_i=(p_{i1},p_{i2},\ldots,p_{iD})\)</span> 整个粒子群搜索到的最优位置为<span class="math inline">\(\vec{p}_{gbest}=(p_{gbest1},p_{gbest2},\ldots,p_{gbestD})\)</span></p>
<p><strong>第i个粒子的位置和速度更新为</strong> <span class="math inline">\(v_{id}^{k+1}=wv_{id}^{k}+c_1rand()(p_{id}-x_{id}^k)+c_2rand()(p_{gbest}-x_{id}^k)\)</span> <span class="math inline">\(x_{id}^{k+1}=x_{id}^{k}+v_{id}^{k} \qquad i=1,2,\ldots,m \quad d=1,2,\ldots,D\)</span> 其中，<span class="math inline">\(w\)</span>称为惯性权重;<span class="math inline">\(c_1\)</span>和<span class="math inline">\(c_2\)</span>为两个正常系数，称为加速因子;<span class="math inline">\(rand()\)</span>为(0,1)之间的随机数;<span class="math inline">\(v_{id}^{k}\)</span>限制在一个最大速度<span class="math inline">\(v_{max}\)</span>内。</p>
<p><strong>简单解释一下：</strong> * <strong>惯性权重<span class="math inline">\(w\)</span></strong> 使粒子保持运动惯性，使其有扩展搜索空间的趋势，有能力探索新的区域。 表示微粒对当前自身运动状态的信任，依据自身的速度进行惯性运动。 较大的w有利于跳出局部极值，而较小的w有利于算法收敛。 * <strong>加速常数<span class="math inline">\(c_1\)</span>和<span class="math inline">\(c_2\)</span></strong> 将c1和c2统一为一个控制参数，φ= c1+c2 如果φ很小，粒子群运动轨迹将非常缓慢； 如果φ很大，则微粒位置变化非常快； 实验表明，当φ=4.1（通常c1=2.0，c2=2.0）时，具有很好的收敛效果。 * <strong>最大速度<span class="math inline">\(v_{max}\)</span></strong> 决定粒子在一个循环中最大的移动距离，通常设定为粒子的范围宽度。 * <strong>粒子数</strong> 一般取20～40，对较难或特定类别的问题可以取100～200。</p>
<h1 id="算法流程">算法流程</h1>
<p>PSO算法思想很简单，先初始化为一群随机粒子，通过迭代找到最优。每次迭代中，粒子通过跟踪“个体极值（pbest）”和“全局极值(gbest)”来更新自己的位置，当最大循环数以及最小错误要求停止。 <img src="/2019/05/20/pso/1.png" alt="suanfa"></p>
<h1 id="算法实现">算法实现</h1>
<p>例子：<span class="math inline">\(f(x)=x_1^2+x_2^2 \qquad x_1,x_2 \in[-10,10]\)</span>，求解最小值 1. 先建立一个PSO类，我们所要做的步骤，分别是设置参数，初始化种群，设置目标函数，进行迭代更新粒子位置 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class PSO():</span><br><span class="line">    # ----------------------初始化种群-------------------------</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    #  ----------------------目标函数---------------------------</span><br><span class="line">    def function(self, x):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    # ----------------------更新粒子位置------------------------</span><br><span class="line">    def iterator(self):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure> 2. 初始化参数 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def __init__(self, pN, max_steps, dim=2, bound=[-10, 10], v_max=2, w=0.6, c1=2, c2=2):</span><br><span class="line">    self.pN = pN</span><br><span class="line">    self.dim = dim</span><br><span class="line">    self.steps = max_steps</span><br><span class="line"></span><br><span class="line">    self.w = w</span><br><span class="line">    self.c1 = c1</span><br><span class="line">    self.c2 = c2</span><br><span class="line">    self.x_bound = bound</span><br><span class="line"></span><br><span class="line">    self.x = np.random.uniform(self.x_bound[0], self.x_bound[1], (self.pN, self.dim))</span><br><span class="line">    self.v = np.random.rand(self.pN, self.dim) * v_max</span><br><span class="line">    self.pbest = self.x  # 个体的最佳位置</span><br><span class="line">    fitness = self.function(self.x)</span><br><span class="line">    self.gbest = self.x[np.argmin(fitness)]  # 全局最佳位置</span><br><span class="line">    self.p_fit = fitness  # 每个个体最佳适应值</span><br><span class="line">    self.fit = np.max(fitness)  # 全局最佳适应值</span><br></pre></td></tr></table></figure> 3. 设置目标函数 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def function(self, x):</span><br><span class="line">    return np.sum(np.square(x), axis=1)</span><br></pre></td></tr></table></figure> 4. 更新粒子位置 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def iterator(self):</span><br><span class="line">    for step in range(self.steps):</span><br><span class="line">        # self.g_fit[step] = self.fit</span><br><span class="line">        r1 = np.random.rand(self.pN, self.dim)</span><br><span class="line">        r2 = np.random.rand(self.pN, self.dim)</span><br><span class="line">        self.v = self.w * self.v + self.c1 * r1 * (self.pbest - self.x) + self.c2 * r2 * (self.gbest - self.x)</span><br><span class="line">        self.x = self.v + self.x</span><br><span class="line">        fitness = self.function(self.x)</span><br><span class="line"></span><br><span class="line">        plt.clf()</span><br><span class="line">        plt.scatter(self.x[:, 0], self.x[:, 1], c=&#x27;k&#x27;)</span><br><span class="line">        plt.scatter(self.gbest[0], self.gbest[1], c=&#x27;r&#x27;)</span><br><span class="line">        plt.xlim(self.x_bound[0], self.x_bound[1])</span><br><span class="line">        plt.ylim(self.x_bound[0], self.x_bound[1])</span><br><span class="line">        plt.pause(0.01)</span><br><span class="line"></span><br><span class="line">        update = np.greater(self.p_fit, fitness)</span><br><span class="line">        self.pbest[update] = self.x[update]</span><br><span class="line">        self.p_fit[update] = fitness[update]</span><br><span class="line">        if np.min(fitness) &lt; self.fit:</span><br><span class="line">            self.gbest = self.x[np.argmin(fitness)]</span><br><span class="line">            self.fit = np.min(fitness)</span><br></pre></td></tr></table></figure> 最后进行一个测试 <figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pso = PSO(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line">    pso.iterator()</span><br><span class="line">    pso.show()</span><br></pre></td></tr></table></figure> <img src="/2019/05/20/pso/2.png" alt="result"> &gt;粒子群算法是对现实中规律的总结和应用，具体怎么使用还要看我们遇到的问题，和对问题的理解</p>
<h1 id="代码">代码</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PSO</span>():</span><br><span class="line">    <span class="comment"># ----------------------初始化种群-------------------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, pN, max_steps, dim=<span class="number">2</span>, bound=[-<span class="number">10</span>, <span class="number">10</span>], v_max=<span class="number">1</span>, w=<span class="number">0.6</span>, c1=<span class="number">2</span>, c2=<span class="number">2</span></span>):</span><br><span class="line">        self.pN = pN</span><br><span class="line">        self.dim = dim</span><br><span class="line">        self.steps = max_steps</span><br><span class="line"></span><br><span class="line">        self.w = w</span><br><span class="line">        self.c1 = c1</span><br><span class="line">        self.c2 = c2</span><br><span class="line">        self.x_bound = bound</span><br><span class="line"></span><br><span class="line">        self.x = np.random.uniform(self.x_bound[<span class="number">0</span>], self.x_bound[<span class="number">1</span>], (self.pN, self.dim))</span><br><span class="line">        self.v = np.random.rand(self.pN, self.dim) * v_max</span><br><span class="line">        self.pbest = self.x  <span class="comment"># 个体的最佳位置</span></span><br><span class="line">        fitness = self.function(self.x)</span><br><span class="line">        self.gbest = self.x[np.argmin(fitness)]  <span class="comment"># 全局最佳位置</span></span><br><span class="line">        self.p_fit = fitness  <span class="comment"># 每个个体最佳适应值</span></span><br><span class="line">        self.fit = np.<span class="built_in">max</span>(fitness)  <span class="comment"># 全局最佳适应值</span></span><br><span class="line">        <span class="comment"># self.g_fit = np.zeros((self.steps,1))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#  ----------------------目标函数---------------------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> np.<span class="built_in">sum</span>(np.square(x), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ----------------------更新粒子位置------------------------</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">iterator</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(self.steps):</span><br><span class="line">            <span class="comment"># self.g_fit[step] = self.fit</span></span><br><span class="line">            r1 = np.random.rand(self.pN, self.dim)</span><br><span class="line">            r2 = np.random.rand(self.pN, self.dim)</span><br><span class="line">            self.v = self.w * self.v + self.c1 * r1 * (self.pbest - self.x) + self.c2 * r2 * (self.gbest - self.x)</span><br><span class="line">            self.x = self.v + self.x</span><br><span class="line">            fitness = self.function(self.x)</span><br><span class="line"></span><br><span class="line">            plt.clf()</span><br><span class="line">            plt.scatter(self.x[:, <span class="number">0</span>], self.x[:, <span class="number">1</span>], c=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">            plt.scatter(self.gbest[<span class="number">0</span>], self.gbest[<span class="number">1</span>], c=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">            plt.xlim(self.x_bound[<span class="number">0</span>], self.x_bound[<span class="number">1</span>])</span><br><span class="line">            plt.ylim(self.x_bound[<span class="number">0</span>], self.x_bound[<span class="number">1</span>])</span><br><span class="line">            plt.pause(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">            update = np.greater(self.p_fit, fitness)</span><br><span class="line">            self.pbest[update] = self.x[update]</span><br><span class="line">            self.p_fit[update] = fitness[update]</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">min</span>(fitness) &lt; self.fit:</span><br><span class="line">                self.gbest = self.x[np.argmin(fitness)]</span><br><span class="line">                self.fit = np.<span class="built_in">min</span>(fitness)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;最佳位置：&quot;</span>, self.gbest)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;最优解：&quot;</span>, self.fit)</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    pso = PSO(<span class="number">100</span>, <span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line">    pso.iterator()</span><br><span class="line">    pso.show()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>PSO</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows|linux子系统安装及使用</title>
    <url>/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>Windows 10 专业版 <span id="more"></span></p>
<p>最近用c语言写socket套接字，需要在Linux上编译运行。但用虚拟机不仅占内存大而且耗电也挺多的，突然想起来有个Linux子系统。于是就决定放弃vbox，试试系统自带的。</p>
<h1 id="安装">安装</h1>
<p>首先在windows功能中启动"<strong>适用于Linux的windows子系统</strong>"</p>
<figure>
<img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/1.png" alt><figcaption>1</figcaption>
</figure>
<p>然后在Microsoft store里搜索ubuntu</p>
<figure>
<img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/2.png" alt><figcaption>2</figcaption>
</figure>
<p>在前三个里选一个下载(我选的是18.04的)，下载完后启动并根据提示设置用户名和密码，最后结果如下图</p>
<figure>
<img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/3.png" alt><figcaption>3</figcaption>
</figure>
<p>最后安装编译环境，由于目前只用C和C++,所以我只安装了gcc和g++</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/4.png" alt><figcaption>4</figcaption>
</figure>
<h1 id="使用">使用</h1>
<p>经过上面的步骤安装成功后，打开命令行，打开你要编译的文件的文件夹下，输入bash，启动子系统。下来的操作就和Linux中一样了。 <img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/5.png" alt="5"></p>
<h1 id="linux子系统的位置">Linux子系统的位置</h1>
<p>以我的系统为例，WSL的root目录对应windows的： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\name\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState\rootfs</span><br></pre></td></tr></table></figure> 但实际上微软为我们提供了一个默认的变量可以直接指向WSL的目录，你可以在运行(win+R)或资源管理器的路径里直接输入<code>\\wsl$</code>进入Ubuntu的目录 <img src="/2019/06/19/linux%E5%AD%90%E7%B3%BB%E7%BB%9F/6.png" alt="6"> **** 以上就是Linux子系统的简单使用，如果有新的发现将会继续更新。 同时欢迎留言分享！ヾ(•ω•`)o</p>
<h1 id="wsl安装软件报错sbinldconfig.real-usrlibwslliblibcuda.so.1-is-not-a-symbolic-link">WSL安装软件报错/sbin/ldconfig.real: /usr/lib/wsl/lib/libcuda.so.1 is not a symbolic link</h1>
<p>解决 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr/lib/wsl</span><br><span class="line">sudo mkdir lib2</span><br><span class="line">sudo ln -s lib/* lib2</span><br></pre></td></tr></table></figure></p>
<p>更改wsl配置文件 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ld.so.conf.d/ld.wsl.conf</span><br></pre></td></tr></table></figure> 将 /usr/lib/wsl/lib 改为 /usr/lib/wsl/lib2 测试修改是否生效 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure></p>
<p>永久修改 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cat &gt;&gt; /etc/wsl.conf &lt;&lt; EOF</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[automount]</span><br><span class="line">ldconfig = fasle</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|面向消息中间件</title>
    <url>/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    <content><![CDATA[<p><strong>面向消息中间件（Message Oriented Middleware）提供了一种分布式消息队列服务，使得节点之间可以实现基于消息的形式灵活的异步通信。</strong> <span id="more"></span> # 工作原理 <img src="/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/1.png" alt="1"></p>
<h1 id="两种通信模式">两种通信模式</h1>
<h2 id="点对点通信模式">点对点通信模式：</h2>
<ul>
<li>用于消息生产者和消息消费者之间点点对点通信，相当于在生产者和消费者之间建立了一个点对点消息队列</li>
<li>每个消息只有一个消费者，不可重复消费(一旦被消费，消息就不再在消息队列中)</li>
<li>高级队列模式：带优先级的队列；支持持久性的队列</li>
</ul>
<h2 id="发布订阅通信模式">发布/订阅通信模式：</h2>
<ul>
<li>支持向一个特定的消息主题发布消息。 多个订阅者可以同时关注并接收来自特定消息主题的消息</li>
<li>可以灵活地实现广播、组播和多对多等通信模式</li>
<li>可以支持持久性、事务机制等高级功能</li>
</ul>
<h1 id="常用的mom中间件">常用的MOM中间件</h1>
<p><strong>ActiveMQ：</strong> &gt;由 Apache 出品，完全兼容JMS（Java Message Service） 为多种编程语言提供客户端API 内部支持多种通信协议 必须部署中心服务器作为消息路由代理。中心服务器可由服务器集群代替。</p>
<p><strong>RabbitMQ：</strong> &gt;采用Erlang语言实现的AMQP协议的消息中间件，最初起源于金融系统。</p>
<p><strong>RocketMQ：</strong> &gt;阿里 的开源产品，用 Java 语言实现；在阿里内部被广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理等场景。</p>
<p><strong>Apache Kafka：</strong> &gt;提供完全分布式架构，与Apache的其他平台如Hadoop、Apache Storm、Spark、Flink等集成方便。</p>
<p><strong>ZeroMQ：</strong> &gt;号称史上最快的消息队列，基于C语言开发。</p>
<p><strong>WebsphereMQ：</strong> &gt;IBM的MOM中间件产品</p>
<h1 id="编程示例">编程示例</h1>
<h2 id="题目">题目</h2>
<p>利用MOM消息队列技术实现一个分布式随机信号分析系统，具体要求： 1. 随机信号产生器每隔10毫秒左右就产生一个正态分布的随机数字，并作为一个消息发布。 2. 多个随机信号分析模块订阅并接收该随机数字，然后对信号进行分析并实时显示分析结果。至少包含如下分析模块： * 计算随机信号的均值； * 计算过去N个随机信号的方差（N为常量，可设置） * 实现基于正态分布的异常点检测<span class="math inline">\(\mu \pm 3 \sigma\)</span></p>
<h2 id="代码">代码</h2>
<p><strong>Publisher.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageProducer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Publisher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">brokerURL</span> <span class="operator">=</span> <span class="string">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConnectionFactory factory;</span><br><span class="line">    <span class="keyword">private</span> Connection connection;</span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line">    <span class="keyword">private</span> MessageProducer producer;</span><br><span class="line">	<span class="keyword">private</span> Topic topic;</span><br><span class="line">	<span class="keyword">private</span> Random random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">	<span class="keyword">private</span> String d;</span><br><span class="line">	<span class="keyword">static</span> Scanner in=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Publisher</span><span class="params">(String topicName)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">		</span><br><span class="line">    	factory = <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(brokerURL);</span><br><span class="line">    	connection = factory.createConnection();</span><br><span class="line">        </span><br><span class="line">        session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">		topic = session.createTopic(topicName);</span><br><span class="line">        producer = session.createProducer(topic);</span><br><span class="line">        producer.setTimeToLive(<span class="number">1000</span>);</span><br><span class="line">		connection.start();</span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="literal">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException, InterruptedException, IOException &#123;</span><br><span class="line"><span class="comment">//    	System.out.println(&quot;Please input u and a&quot;);</span></span><br><span class="line"><span class="comment">//    	int u=in.nextInt();</span></span><br><span class="line"><span class="comment">//    	int a=in.nextInt();</span></span><br><span class="line">    	<span class="type">int</span> u=<span class="number">0</span>;</span><br><span class="line">    	<span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">    	<span class="type">Publisher</span> <span class="variable">publisher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Publisher</span>(<span class="string">&quot;Gaussian&quot;</span>);</span><br><span class="line">    	<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    	<span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    	<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    		i++;</span><br><span class="line">    		<span class="type">long</span> <span class="variable">t2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    		<span class="keyword">if</span>(t2-t1&gt;<span class="number">10000</span>)</span><br><span class="line">    		&#123;</span><br><span class="line">    			<span class="keyword">break</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    		publisher.sendMessage(u,a,i);</span><br><span class="line">    		Thread.sleep(<span class="number">10</span>);</span><br><span class="line">		&#125;</span><br><span class="line">    	publisher.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> i)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">    	d = Double.toString(b*random.nextGaussian()+a);</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> session.createTextMessage(d);</span><br><span class="line">        producer.send(message);</span><br><span class="line">        System.out.println(<span class="string">&quot;Sent number &quot;</span>+i+<span class="string">&quot; :&quot;</span>+d);</span><br><span class="line">    &#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>ASyncConsumer_ave.java</strong>（计算均值） <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Average</span> <span class="keyword">implements</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line">	<span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">	<span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String ss=((TextMessage)message).getText();</span><br><span class="line">			num++;</span><br><span class="line">			sum+=Double.valueOf(ss);</span><br><span class="line">			System.out.println(<span class="string">&quot;number:&quot;</span>+num+<span class="string">&quot; average:&quot;</span>+sum/num);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASyncConsumer_ave</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">brokerURL</span> <span class="operator">=</span> <span class="string">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class="line">		<span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Topic</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">MessageConsumer</span> <span class="variable">messageConsumer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		Average average=<span class="literal">null</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			factory = <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(brokerURL);</span><br><span class="line">			connection = factory.createConnection();</span><br><span class="line">			connection.start();</span><br><span class="line">			</span><br><span class="line">			session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">			topic = session.createTopic(<span class="string">&quot;Gaussian&quot;</span>);</span><br><span class="line"></span><br><span class="line">			messageConsumer = session.createConsumer(topic);</span><br><span class="line">			</span><br><span class="line">			average = <span class="keyword">new</span> <span class="title class_">Average</span>();</span><br><span class="line">			</span><br><span class="line">			messageConsumer.setMessageListener(average);</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">&quot;Press any key to exit.&quot;</span>);</span><br><span class="line">			System.in.read();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			connection.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>ASyncConsumer_var.java</strong>（计算方差） <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Variance</span> <span class="keyword">implements</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> ArrayList&lt;Double&gt; p = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Double&gt;();</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Variance</span><span class="params">(<span class="type">int</span> N)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.n=N;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			String ss=((TextMessage)message).getText();</span><br><span class="line">			p.add(Double.valueOf(ss));</span><br><span class="line">			<span class="type">double</span> <span class="variable">ave</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">			<span class="type">double</span> <span class="variable">var</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">			<span class="keyword">if</span>(p.size()&gt;=n)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">					ave += p.get(i);</span><br><span class="line">				&#125;</span><br><span class="line">				ave /= n;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">					<span class="keyword">var</span> += (p.get(i) - ave) * (p.get(i) - ave);</span><br><span class="line">				&#125;</span><br><span class="line">				System.out.println(<span class="string">&quot;Variance：&quot;</span>+<span class="keyword">var</span>/n);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASyncConsumer_var</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> Scanner in=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">brokerURL</span> <span class="operator">=</span> <span class="string">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class="line">		<span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Topic</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">MessageConsumer</span> <span class="variable">messageConsumer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		Variance variance=<span class="literal">null</span>;</span><br><span class="line">		</span><br><span class="line">        </span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			factory = <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(brokerURL);</span><br><span class="line">			connection = factory.createConnection();</span><br><span class="line">			connection.start();</span><br><span class="line">			</span><br><span class="line">			session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">			topic = session.createTopic(<span class="string">&quot;Gaussian&quot;</span>);</span><br><span class="line"></span><br><span class="line">			messageConsumer = session.createConsumer(topic);</span><br><span class="line"></span><br><span class="line">			System.out.println(<span class="string">&quot;Input N:&quot;</span>);</span><br><span class="line">			<span class="type">int</span> n=in.nextInt();</span><br><span class="line">			</span><br><span class="line">			variance=<span class="keyword">new</span> <span class="title class_">Variance</span>(n);</span><br><span class="line">			messageConsumer.setMessageListener(variance);</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">&quot;Press any key to exit.&quot;</span>);</span><br><span class="line">			System.in.read();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			connection.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>ASyncConsumer_err.java</strong>（异常点检测） <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Connection;</span><br><span class="line"><span class="keyword">import</span> javax.jms.ConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageConsumer;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Topic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Error</span> <span class="keyword">implements</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line">	<span class="type">double</span> u=<span class="number">0</span>;</span><br><span class="line">	<span class="type">double</span> a=<span class="number">0</span>;</span><br><span class="line">	<span class="type">double</span> v=<span class="number">0</span>;</span><br><span class="line">	<span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.valueOf(((TextMessage)message).getText());</span><br><span class="line">			sum += d;</span><br><span class="line">			num++;</span><br><span class="line">			<span class="keyword">if</span>(num&gt;<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				u=sum/num;</span><br><span class="line">				v += (d - u) * (d - u);</span><br><span class="line">				a=Math.sqrt(v/num);</span><br><span class="line">				<span class="keyword">if</span>(d&gt;u-<span class="number">3</span>*a&amp;&amp;d&lt;u+<span class="number">3</span>*a)</span><br><span class="line">				&#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;TRUE &quot;</span>+d);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ERROR &quot;</span>+d);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASyncConsumer_err</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">brokerURL</span> <span class="operator">=</span> <span class="string">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class="line">		<span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">Topic</span> <span class="variable">topic</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		<span class="type">MessageConsumer</span> <span class="variable">messageConsumer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		Error error=<span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			factory = <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(brokerURL);</span><br><span class="line">			connection = factory.createConnection();</span><br><span class="line">			connection.start();</span><br><span class="line">			</span><br><span class="line">			session = connection.createSession(<span class="literal">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">			topic = session.createTopic(<span class="string">&quot;Gaussian&quot;</span>);</span><br><span class="line"></span><br><span class="line">			messageConsumer = session.createConsumer(topic);</span><br><span class="line">			</span><br><span class="line">			error=<span class="keyword">new</span> <span class="title class_">Error</span>();</span><br><span class="line">			</span><br><span class="line">			messageConsumer.setMessageListener(error);</span><br><span class="line">			</span><br><span class="line">			System.out.println(<span class="string">&quot;Press any key to exit.&quot;</span>);</span><br><span class="line">			System.in.read();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			connection.close();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="实现">实现</h2>
<ol type="1">
<li>开启ActiveMQ <img src="/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/2.png" alt="2"></li>
<li>用三个窗口分别运行ASyncConsumer_ave.java，ASyncConsumer_var.java和ASyncConsumer_err.java。 <img src="/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/3.png" alt="3"></li>
<li>运行Publisher.java输入均值和方差 <img src="/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/4.png" alt="4"></li>
<li>结果 <img src="/2019/06/22/%E4%B8%AD%E9%97%B4%E4%BB%B6/5.png" alt="5"></li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>MOM</tag>
      </tags>
  </entry>
  <entry>
    <title>刷刷刷</title>
    <url>/2023/04/03/%E5%88%B7%E5%88%B7%E5%88%B7/</url>
    <content><![CDATA[<p>刷题记录</p>
<span id="more"></span>
<h2 id="交换一次的先前排列"><a href="https://leetcode.cn/problems/previous-permutation-with-one-swap/description/">1053. 交换一次的先前排列</a></h2>
<p>解：组合数学字典序法的逆序 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">prevPermOpt1</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i - <span class="number">1</span>] &gt; arr[i]) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt; i - <span class="number">1</span>; j--) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (arr[j] &lt; arr[i - <span class="number">1</span>] &amp;&amp; arr[j] != arr[j - <span class="number">1</span>])&#123;</span><br><span class="line">                        <span class="type">int</span> t = arr[j];</span><br><span class="line">                        arr[j] = arr[i - <span class="number">1</span>];</span><br><span class="line">                        arr[i - <span class="number">1</span>] = t;</span><br><span class="line">                        <span class="keyword">return</span> arr;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> ## <a href="https://leetcode.cn/problems/check-distances-between-same-letters/">2399. 检查相同字母间的距离</a></p>
<p>解：哈希表先记录每个字符的第一次的位置，第二次遇到时计算距离并与距离数组比对。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkDistances</span>(<span class="params">self, s: <span class="built_in">str</span>, distance: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        d = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(s, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> d[c] <span class="keyword">and</span> i - d[c] - <span class="number">1</span> != distance[<span class="built_in">ord</span>(c) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>)]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            d[c] = i</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h2 id="最小的必要团队"><a href="https://leetcode.cn/problems/smallest-sufficient-team/description/">1125. 最小的必要团队</a></h2>
<p>解：</p>
<h2 id="链表中的下一个更大节点"><a href="https://leetcode.cn/problems/next-greater-node-in-linked-list/description/">1019. 链表中的下一个更大节点</a></h2>
<p>解：采用单调栈的方法。如果栈顶元素小于等于当前元素，则循环将栈顶元素出栈，直到栈顶元素大于当前元素或者栈为空。如果此时栈为空，则说明当前元素没有下一个更大的元素，否则当前元素的下一个更大的元素就是栈顶元素。更新ans数组。然后将当前元素入栈，继续遍历。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nextLargerNodes</span>(<span class="params">self, head: <span class="type">Optional</span>[ListNode]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        nums = []</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            nums.append(head.val)</span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        stk = []</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        ans = [<span class="number">0</span>] * n</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>) :</span><br><span class="line">            <span class="keyword">while</span> stk <span class="keyword">and</span> stk[-<span class="number">1</span>] &lt;= nums[i]:</span><br><span class="line">                stk.pop()</span><br><span class="line">            <span class="keyword">if</span> stk:</span><br><span class="line">                ans[i] = stk[-<span class="number">1</span>]</span><br><span class="line">            stk.append(nums[i])</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<h2 id="困于环中的机器人"><a href="https://leetcode.cn/problems/robot-bounded-in-circle/">1041. 困于环中的机器人</a></h2>
<p>解：模拟。一轮后回到原点或者朝向改变，可以判断为在环中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isRobotBounded</span>(<span class="params">self, instructions: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">        dist = [<span class="number">0</span>] * <span class="number">4</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> instructions:</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                k = (k + <span class="number">1</span>) % <span class="number">4</span></span><br><span class="line">            <span class="keyword">elif</span> c == <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">                k = (k + <span class="number">3</span>) % <span class="number">4</span> </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dist[k] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> (dist[<span class="number">0</span>] == dist[<span class="number">2</span>] <span class="keyword">and</span> dist[<span class="number">1</span>] == dist[<span class="number">3</span>]) <span class="keyword">or</span> k != <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="段式回文"><a href="https://leetcode.cn/problems/longest-chunked-palindrome-decomposition">1147. 段式回文</a></h2>
<h2 id="子数组中占绝大多数的元素"><a href="https://leetcode.cn/problems/online-majority-element-in-subarray">1157. 子数组中占绝大多数的元素</a></h2>
<p>解：随机化 + 二分查找。</p>
<p>1）若区间的「绝对众数」存在。每次随机至少有<span class="math inline">\(1/2\)</span>的概率选中，每次查询的正确性为<span class="math inline">\(1-(1/2)^k\)</span></p>
<p>2）计算随机数<span class="math inline">\(x\)</span>的出现次数。使用一个哈希表来存储每个数出现的位置，在哈希表中以x为键得到的数组上，分别二分查找左右指针的插入位置，两者之差就是区间内<span class="math inline">\(x\)</span>的个数。</p>
<p>3）如果<span class="math inline">\(x\)</span>个数大于等于要求值，返回<span class="math inline">\(x\)</span>；如果小于要求值且大于等于区间的一半，说明区间内最多的数也无法满足要求，即不存在绝对众数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MajorityChecker</span>:</span><br><span class="line">    k = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">        self.arr = arr</span><br><span class="line">        self.loc = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i, val <span class="keyword">in</span> <span class="built_in">enumerate</span>(arr):</span><br><span class="line">            self.loc[val].append(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, left: <span class="built_in">int</span>, right: <span class="built_in">int</span>, threshold: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        arr_ = self.arr</span><br><span class="line">        loc_ = self.loc</span><br><span class="line">        </span><br><span class="line">        length = right - left + <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(MajorityChecker.k):</span><br><span class="line">            x = arr_[randint(left, right)]</span><br><span class="line">            pos = loc_[x]</span><br><span class="line">            occ = bisect_right(pos, right) - bisect_left(pos, left)</span><br><span class="line">            <span class="keyword">if</span> occ &gt;= threshold:</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            <span class="keyword">elif</span> occ * <span class="number">2</span> &gt;= length:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="统计共同度过的日子数"><a href="https://leetcode.cn/problems/count-days-spent-together">2409. 统计共同度过的日子数</a></h2>
<p>解：模拟。寻找两个时间区间的交集，即起始为到达时间中最晚的点，末尾为离开时间中最早的点。将日期转换为天数，两者之差即为结果。若为负数，返回0。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countDaysTogether</span>(<span class="params">self, arriveAlice: <span class="built_in">str</span>, leaveAlice: <span class="built_in">str</span>, arriveBob: <span class="built_in">str</span>, leaveBob: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        a = <span class="built_in">max</span>(arriveAlice, arriveBob)</span><br><span class="line">        b = <span class="built_in">min</span>(leaveAlice, leaveBob)</span><br><span class="line">        days = (<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>)</span><br><span class="line">        x = <span class="built_in">sum</span>(days[:<span class="built_in">int</span>(a[:<span class="number">2</span>]) - <span class="number">1</span>]) + <span class="built_in">int</span>(a[<span class="number">3</span>:])</span><br><span class="line">        y = <span class="built_in">sum</span>(days[:<span class="built_in">int</span>(b[:<span class="number">2</span>]) - <span class="number">1</span>]) + <span class="built_in">int</span>(b[<span class="number">3</span>:])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(y - x + <span class="number">1</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h2 id="分隔数组以得到最大和"><a href="https://leetcode.cn/problems/partition-array-for-maximum-sum">分隔数组以得到最大和</a></h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maxSumAfterPartitioning</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        f = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            mx = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">max</span>(<span class="number">0</span>, i - k), -<span class="number">1</span>):</span><br><span class="line">                mx = <span class="built_in">max</span>(mx, arr[j - <span class="number">1</span>])</span><br><span class="line">                f[i] = <span class="built_in">max</span>(f[i], f[j - <span class="number">1</span>] + mx * (i - j + <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> f[n]</span><br></pre></td></tr></table></figure>
<h2 id="可以攻击国王的皇后"><a href="https://leetcode.cn/problems/queens-that-can-attack-the-king/description/">1222. 可以攻击国王的皇后</a></h2>
<p>解：先将所有皇后的位置存入哈希表或者二维数组 sss 中。从国王的位置开始，依次向上、下、左、右、左上、右上、左下、右下八个方向搜索，如果某个方向上存在皇后，那么就将其位置加入答案中，并且停止继续搜索该方向。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">queensAttacktheKing</span>(<span class="params">self, queens: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], king: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        n = <span class="number">8</span></span><br><span class="line">        s = &#123;(i, j) <span class="keyword">for</span> i, j <span class="keyword">in</span> queens&#125;</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> a <span class="keyword">or</span> b:</span><br><span class="line">                    x, y = king</span><br><span class="line">                    <span class="keyword">while</span> <span class="number">0</span> &lt;= x + a &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= y &lt; n:</span><br><span class="line">                        x, y = x + a, y + b</span><br><span class="line">                        <span class="keyword">if</span> (x, y) <span class="keyword">in</span> s:</span><br><span class="line">                            ans.append([x, y])</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<h2 id="打家劫舍"><a href="https://leetcode.cn/problems/house-robber/description/?envType=daily-question&amp;envId=2023-09-16">198. 打家劫舍</a></h2>
<p>解：我们定义 <span class="math inline">\(f[i]\)</span> 表示前 <span class="math inline">\(i\)</span> 间房屋能偷窃到的最高总金额，初始时 <span class="math inline">\(f[0]=0, f[1]=nums[0]\)</span>。</p>
<p>考虑<span class="math inline">\(i&gt;1\)</span>的情况，第<span class="math inline">\(i\)</span>间房屋有两个选项：</p>
<ol type="1">
<li>不偷窃第<span class="math inline">\(i\)</span>间房屋，偷窃总金额为<span class="math inline">\(f[i-1]\)</span>；</li>
<li>偷窃第<span class="math inline">\(i\)</span>间房屋，偷窃总金额为<span class="math inline">\(f[i-2]+nums[i-1]\)</span></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rob</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        n = <span class="built_in">len</span>(nums)</span><br><span class="line">        f = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        f[<span class="number">1</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            f[i] = <span class="built_in">max</span>(f[i - <span class="number">1</span>], f[i - <span class="number">2</span>] + nums[i - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> f[n]</span><br></pre></td></tr></table></figure>
<h2 id="section"><a href></a></h2>
<p>解： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure> ## <a href></a> 解： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure> ## <a href></a> 解： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure> ## <a href></a> 解： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure> ## <a href></a> 解： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure> ## <a href></a> 解： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|一行代码生成二维码</title>
    <url>/2020/02/28/%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<p><strong>简单生成二维码</strong> <span id="more"></span> # 二维码 二维码也称为二维条码，是指在一维条码的基础上扩展出另一维具有可读性的条码，使用黑白矩形图案表示二进制数据，被设备扫描后可获取其中所包含的信息。一维条码的宽度记载着数据，而其长度没有记载数据。二维码的长度、宽度均记载着数据。二维码有一维条码没有的“定位点”和“容错机制”。容错机制在即使没有识别到全部的条码、或是说条码有污损时，也可以正确地还原条码上的信息。</p>
<p>二维码在现实生活中的应用越来与普遍，归于功于 QR code 码制的流行。我们常说的二维码就是它。所以，二维码又被称为 QR code。</p>
<blockquote>
<p>QR code 是一种矩阵式二维条码（又称棋盘式二维条码）。它是在一个矩形空间通过黑、白像素在矩阵中的不同分布进行编码。在矩阵相应元素位置上，用点（方点、圆点或其他形状）的出现表示二进制“1”，点的不出现表示二进制的“0”，点的排列组合确定了矩阵式二维条码所代表的意义。</p>
</blockquote>
<h1 id="二维码的生成">二维码的生成</h1>
<p>安装工具 <a href="https://github.com/sylnsfar/qrcode">Myqr</a>： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install myqr</span><br></pre></td></tr></table></figure> 生成一个普通二维码： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myqr https://mengqiu233.github.io</span><br></pre></td></tr></table></figure> 这时就会在当前目录下生成一个名称为 qrcode.png 的二维码 <img src="/2020/02/28/%E4%BA%8C%E7%BB%B4%E7%A0%81/qrcode.png" alt="1"> &gt;注意这里的字符串不能指定中文</p>
<table>
<thead>
<tr class="header">
<th>命令</th>
<th>作用</th>
<th>~</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>-d</td>
<td>输出的文件路径</td>
<td></td>
</tr>
<tr class="even">
<td>-n</td>
<td>文件名称</td>
<td>.jpg .png .gif</td>
</tr>
<tr class="odd">
<td>-l</td>
<td>二维码的纠错等级</td>
<td>L、M、Q、H，从左到右依次升高</td>
</tr>
<tr class="even">
<td>-v</td>
<td>二维码的边长</td>
<td>范围是 1 至 40，数字越大边长越大</td>
</tr>
<tr class="odd">
<td>-p</td>
<td>添加图片</td>
<td></td>
</tr>
</tbody>
</table>
<p>比如将图片结合到二维码中 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myqr https://mengqiu233.github.io/ -p tree.jpg -c</span><br></pre></td></tr></table></figure> <img src="/2020/02/28/%E4%BA%8C%E7%BB%B4%E7%A0%81/mencia_qrcode.png" alt="2"></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>社团检测</title>
    <url>/2022/08/10/%E7%A4%BE%E5%9B%A2%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<p>论文阅读笔记</p>
<span id="more"></span>
<h1 id="基于深度学习的社区发现研究综述">基于深度学习的社区发现研究综述</h1>
<p>《A Comprehensive Survey on Community Detection with Deep Learning》</p>
<p><a href="https://arxiv.org/abs/2105.12584">综述</a>(<a href="https://www.aminer.cn/research_report/60da8c5f30e4d5752f50e7af">中文版</a>)的学习总结 注: Community Detection 本文翻译为社团检测</p>
<!-- # 传统社区发现方法
## 1. 图划分

此类方法也被称为图聚类，它将网络划分为 k 个社区。聚类簇中的边要比聚类簇之间的边更为稠密。代表性的算法包括：Kernighan-Lin 启发式方法、谱二分法等。此类方法在深度学习方法中仍然被使用。

## 2. 统计推断

代表性的算法为随机块模型（SBM），这是一类被广泛使用的生成式模型，它将节点分配到社区中，并控制它们的似然概率。其变体包括：DCSBM、MMB、OSBM 等。

## 3. 层次聚类

此类方法通过「分裂式」、「凝聚式」和「混合式」三种方式发现不同层次上的社区结构。Girvan-Newman（GN）算法通过分裂式方法依次删除网络中的边从而发现新的社区，输出一种关于社区结构的层次化树状表征。FastQ 是一种凝聚式算法，它逐渐将节点合并为一个社区。CDASS 算法同时应用了分裂式和凝聚式策略，基于结构相似度对图进行划分，并将其合并为层次化的社区。

## 4. 动力学方法

随机游走利用随机游走器在一段较短的游走中陷入某个社区的趋势，是最常见地被用于社区发现任务的动力学方法。代表性的算法包括：WalkTrap、InfoMap、LPA、LPAm。

## 5. 谱聚类

网络的谱属性可以被用于社区发现任务。谱聚类基于邻接矩阵派生的网络归一化拉普拉斯矩阵划分节点，并且使用伪似然算法将划分结果拟合到 SBM 算法上。

## 6. 基于密度的方法

此类方法的代表性算法包括：DBSCAN、SCAN、LCCD。它们通过测量实体密度来确定社区、社区边界和异常。

## 7. 优化方法

社区发现方法利用优化算法来达到某个极值，通常期望最大化的该值表明社区的似然。最经典的优化函数为 Modularity(Q) 及其变体。它们被用来估计网络划分得到的社区结构。此外，Louvain 是另一种著名的优化算法，它采用节点移动策略提取具有更大网络模块度的社区结构。此外，贪婪优化方法还包括模拟退火、极值优化、以及谱优化。对于局部学习和全局搜索而言，有效的演化社区发现方法分为「单目标优化」和「多目标优化」。多智能体遗传算法（MAGA-Net）等单目标优化算法利用了模块度函数，而 Combo等算法则融合了归一化互信息(NMI)、Conductance在内的多个优化目标。CE-MOEA 算法基于非支配排序遗传算法（NSGA-II）来优化模块度和相似性目标。

# 基于深度学习的社区发现方法

>在大型复杂网络中，深度学习方法可以更好地利用节点、邻域、边、子图的高维非线性特征和高度相关的特征，并且可以编码数据特征。此类模型对于高度稀疏的网络更加灵活适用，对现实世界中的无监督学习任务有更好的适应性。

## 1. 基于卷积网络的社区发现

卷积网络是一种为网格式拓扑数据提出的前馈深度神经网络（DNN），其中卷积层降低了计算成本，而池化操作保证了 CNN 在特征表达上的鲁棒性。图卷积网络（GCN）是基于CNN 和图的局部谱滤波器的一阶近似提出的用于图结构数据的卷积网络。

## 2. 基于卷积神经网络（CNN）的社区发现

现有的基于 CNN 的社区发现方法在实现 CNN 类模型时，严格限制其输入为图像格式的数据，并且是有标签数据。因此，这些方法需要对其输入进行预处理：（1）将网络样本映射为图像数据格式（2）由于大多数现实世界的网络都没有标签，所以需要提前手动标记节点或社区。 -->
<h2 id="基于图卷积神经网络gcn的社区发现">3. 基于图卷积神经网络（GCN）的社区发现</h2>
<p>GCN 在深度图卷积层中聚合节点的邻域信息，从全局上捕获用于社区发现的复杂特征。基于GCN 的社区发现方法有两类：（1）监督/半监督社区分类（2）基于无监督网络表示的社区聚类。社区分类方法受到现实世界中缺乏标签的限制。相比之下，通过矩阵重构和目标优化等技术，网络表示可以更灵活地对社区进行聚类。</p>
<h2 id="基于图注意力网络gat的社区发现">4. 基于图注意力网络（GAT）的社区发现</h2>
<p>基于图注意力网络的社区发现方法可以在复杂的网络场景下进行社区发现。GAT 通过可训练的权重聚合邻域内的节点特征，该权重通过考虑多种因素（尤其是对于具有多种关系类型的网络）的注意力计算而来。</p>
<h2 id="基于生成对抗网络gan的社区发现">5. 基于生成对抗网络（GAN）的社区发现</h2>
<p>GAN 通过生成器<span class="math inline">\(Φ_g\)</span>生成人造样本<span class="math inline">\(Z\)</span>来欺骗判别器<span class="math inline">\(Φ_d\)</span>。判别器将多层感知机（MLP）、图神经网络（GCN）等深度神经网络作用于表征上。因此，真实样本和人造样本会通过竞争博弈进行调优，从而得到最优的社区特征。GAN 中使用的真实样本包括：</p>
<p>（1）拓扑结构<span class="math inline">\(A\)</span>；</p>
<p>（2）拓扑结构与节点特征<span class="math inline">\((A,X)\)</span>；</p>
<p>（3）节点嵌入<span class="math inline">\(H_ν\)</span>；</p>
<p>（4）节点的社团归属<span class="math inline">\(H_c\)</span>。</p>
<p>我们在表征中分析网络拓扑（三元组、派系、社区）或直接在 GAN 中分析它们。该方法在融合网络拓扑、属性和表征的过程中发现社区。</p>
<h2 id="基于自编码器ae的社区发现">6. 基于自编码器（AE）的社区发现</h2>
<p>自编码器（AE）最常被用于无监督社区发现，通常被用到的 AE 变体包括栈式 AE、稀疏 AE、去躁 AE、卷积 AE、变分 AE。AE 可以描绘非线性的、带噪声的真实世界网络，并生成平滑的表征。通用的 AE 架构由一个编码器和一个解码器组成。编码器将网络结构和可获取的语义信息映射到一个低维潜在空间中。解码器则根据编码得到的表示重构一个网络。</p>
<!-- ## 7. 基于深度非负矩阵分解（NMF）的社区发现

非负矩阵分解旨在将一个大矩阵分解成两个小的非负矩阵。该方法不仅具有高度的可解释性，而且适合发现如何将节点分配给社区。社区发现任务中应用到的基本的 NMF 模型将邻接矩阵 A 分解为两个非负矩阵 U 和 P。其中，U 对应于将原始网络映射到社区成员空间的矩阵。矩阵 P 中的每一列代表每个节点属于某个社区的概率。

在社区发现领域中，深度自编码器式非负矩阵分解（DANMF）是无监督学习环境下影响最大的模型。与传统的基于 NMF 的社区发现方法映射简单的社区成员不同，DANMF 使用 AE 框架在分层映射上进行网络重构。

尽管深度 NMF 提供了一种在形成社区的过程中映射多个变量的方案，但是其矩阵分解的计算成本相对较高。为此，研究者们提出了模块化的深度非负矩阵分解（MDNMF），直接将模块度应用于基本的多层深度学习结构中。

## 8. 基于深度稀疏滤波（SF）的社区发现

稀疏滤波是一种简单的双层学习模型，它可以处理高维的图数据，将高度稀疏的输入表征为低维特征向量。为了探索节点的社团归属等更深入的信息，深度 SF 将多个隐层堆叠起来，从而对更多超参数和大量的平滑数据分布进行调优，其代表性的算法为 DSFCD。 -->
<h1 id="基于多层网络的社团检测综述">基于多层网络的社团检测综述</h1>
<p>《Community Detection in Multiplex Networks》</p>
<p>全局社区发现算法也可以分为以下三个典型的主要类。</p>
<h2 id="flattening">Flattening</h2>
<p>第一种方法是通过合并多层网络，使用所谓的扁平化算法，然后应用传统的社区发现算法，将多层网络简化为一个图。</p>
<h2 id="layer-by-layer">Layer by layer</h2>
<p>逐层的方法先对每层(例如,应用传统的社区发现算法)进行处理，再对处理后的结果进行合并。</p>
<h2 id="multilayer">Multilayer</h2>
<p>第三类算法直接在多路复用网络模型上运行。 &gt;属于这一类的基于随机游走者的方法允许游走者从一层切换到另一层。</p>
<h1 id="基于深度图信息最大化的社团检测">基于深度图信息最大化的社团检测</h1>
<p>《CommDGI: Community Detection Oriented Deep Graph Infomax》</p>
<p>目前的挑战：</p>
<ul>
<li>无标签的图学习：一般来说，社区检测任务是在无标签的情况下进行的，这意味着神经工作本身会产生一些自监督信息，这些信息可以鼓励编码器的输出具有期望的特性。</li>
<li>社区无关表示：通用图神经网络学习到的表示不能捕获聚类和社区结构信息。将聚类过程与图神经网络相结合以更好地处理社区发现问题是必要的，但也是具有挑战性的。</li>
<li>纠缠表示：图神经网络在矩阵重构目标下学习到的表示是纠缠的，可解释性差。</li>
<li>端到端学习：统一图和聚类学习对面向社区的图神经网络来说是具有挑战性但有用的。聚类分配可以帮助以社区相关的方式更新节点表示。</li>
</ul>
<p>为了克服这些问题，文章提出了CommDGI（Community Deep Graph Infomax）模型。在此框架中，为了编码能够感知到节点结构与社区的表示，采用最大化互信息来捕获局部和全局结构信息。不同于DGI，该模型提出了一种新的最大化互信息的范式。图互信息（Graph mutual information）是通过节点和图来进行计算，社区互信息（community mutual information）是通过节点和社区（子图）来进行计算。这两种互信息一起最大化来编码节点的图和聚类特征（the graph and clustering feature of each node）。</p>
<h1 id="一致性多图嵌入用于多视图聚类">一致性多图嵌入用于多视图聚类</h1>
<p>《Consistent Multiple Graph Embedding for Multi-View Clustering》</p>
<p>本文提出了一种新颖的一致性多图嵌入聚类框架( CMGEC )。具体地，设计了多图自编码器( M-GAE )，利用多图注意力融合编码器对多视图数据的互补信息进行灵活编码。为了指导学习到的共同表示保持每个视图中相邻特征的相似性，引入了多视图互信息最大化模块( MMIM )。此外，设计了一个图融合网络( GFN )，从不同角度探索图之间的关系，并提供M - GAE所需的公共共识图。通过联合训练这些模型，可以得到共同的表示，从多个视图中编码更多的互补信息，更全面地描述数据。</p>
<!-- 
#

《》

## 背景

## 方法
![p](社团检测/1.png) -->
<h1 id="面向无监督的深度图结构学习">面向无监督的深度图结构学习</h1>
<p>《Towards Unsupervised Deep Graph Structure Learning》'www22'</p>
<h2 id="背景">背景</h2>
<p>目前优化图结构的方法侧重于监督学习场景，这导致了几个问题，即对标签的依赖、边缘分布的偏差以及对应用任务的限制。 ## 方法 <img src="/2022/08/10/%E7%A4%BE%E5%9B%A2%E6%A3%80%E6%B5%8B/1.png" alt="p"> 首次提出采用GNN无监督的方法。</p>
<h1 id="简单的无监督图表示学习">简单的无监督图表示学习</h1>
<p>《Simple Unsupervised Graph Representation Learning》</p>
<h2 id="背景-1">背景</h2>
<p>实现有效且高效的对比学习。</p>
<h2 id="方法">方法</h2>
<p><img src="/2022/08/10/%E7%A4%BE%E5%9B%A2%E6%A3%80%E6%B5%8B/2.png" alt="p"> 为了获得有效性，我们设计了两个三元组损失来探索结构信息和邻居信息之间的互补信息以扩大类间变异，以及上带损失以减少类内变异。为了提高效率，我们的方法旨在删除用于生成锚嵌入和负嵌入的 GCN，以及从先前的图形对比学习中删除数据增强和鉴别器。</p>
<h1 id="commdgi-面向深度图的社区发现">CommDGI: 面向深度图的社区发现</h1>
<p>《CommDGI: Community Detection Oriented Deep Graph》'CIKM '20'</p>
<h2 id="背景-2">背景</h2>
<h2 id="方法-1">方法</h2>
<figure>
<img src alt><figcaption>p</figcaption>
</figure>
<h1 id="section"></h1>
<p>《》</p>
<h2 id="背景-3">背景</h2>
<h2 id="方法-2">方法</h2>
<figure>
<img src alt><figcaption>p</figcaption>
</figure>
<h1 id="section-1"></h1>
<p>《》</p>
<h2 id="背景-4">背景</h2>
<h2 id="方法-3">方法</h2>
<figure>
<img src alt><figcaption>p</figcaption>
</figure>
]]></content>
      <tags>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Math|距离计算</title>
    <url>/2019/06/28/%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<p><strong>机器学习常用距离计算总结</strong> <span id="more"></span> # 曼哈顿距离 <a href="https://baike.baidu.com/item/%E6%9B%BC%E5%93%88%E9%A1%BF%E8%B7%9D%E7%A6%BB">曼哈顿距离</a>（Manhattan Distance）又称计程车几何距离或方格线距离，是由十九世纪的赫尔曼·闵可夫斯基所创词汇 ，为欧几里得几何度量空间的几何学之用语，用以标明两个点上在标准坐标系上的绝对轴距之总和。曼哈顿距离的正式意义为L1-距离或城市区块距离，也就是在欧几里得空间的固定直角坐标系上两点所形成的线段对轴产生的投影的距离总和。曼哈顿距离公式为 <span class="math display">\[d=\sum_{i=1}^n|x_i-y_i|\]</span></p>
<h1 id="欧几里得距离">欧几里得距离</h1>
<p><a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E5%BA%A6%E9%87%8F/1274107?fromtitle=%E6%AC%A7%E6%B0%8F%E8%B7%9D%E7%A6%BB&amp;fromid=1798948">欧几里得度量</a>（Euclidean Distance）也称欧氏距离： 在数学中，欧几里得距离或欧几里得度量是欧几里得空间中两点间“普通”（即直线）距离。在欧几里得空间中，点<span class="math inline">\(x=\left(x_{1}, x_{2}, \ldots, x_{n}\right)\)</span>和<span class="math inline">\(y=\left(y_{1}, y_{2}, \ldots, y_{n}\right)\)</span>之间的欧氏距离为: <span class="math display">\[d=\sqrt{\sum_{i=1}^{n}\left(x_{i}-y_{i}\right)^{2}}\]</span></p>
<h1 id="切比雪夫距离">切比雪夫距离</h1>
<p>数学上，<a href="https://baike.baidu.com/item/%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E8%B7%9D%E7%A6%BB">切比雪夫距离</a>（Chebyshev distance）或是<span class="math inline">\(L_{\infty}\)</span>度量是向量空间中的一种度量，二个点之间的距离定义为其各座标数值差的最大值。以p(x1,y1)和q(x2,y2)二点为例，其切比雪夫距离为： <span class="math display">\[D_{\text {Chebyshev}}(p, q)=\max \left(\left|x_{2}-x_{1}\right|,\left|y_{2}-y_{1}\right|\right)\]</span> 一般形式为： <span class="math display">\[D_{\text { Chebyshev }}(p, q)=\max _{i}\left(\left|p_{i}-q_{i}\right|\right)=\lim _{k \rightarrow \infty}\left(\sum_{i=1}^{n}\left|p_{i}-q_{i}\right|^{k}\right)^{1 / k}\]</span></p>
<h1 id="闵可夫斯基距离">闵可夫斯基距离</h1>
<p><a href="https://baike.baidu.com/item/%E6%98%8E%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA%E8%B7%9D%E7%A6%BB/10515232">闵可夫斯基距离</a>或闵氏距离（Minkowski Distance）：以俄罗斯数学家闵可夫斯基命名的距离；是欧式距离的推广，闵氏距离不是一种距离，而是一组距离的定义。其定义如下： <span class="math display">\[d=\sqrt[p]{\sum_{i=1}^{n}\left|x_{i}-y_{i}\right|^{p}}\]</span> 从上面公式可以看出： 当<span class="math inline">\(p=1\)</span>时，就是曼哈顿距离 当<span class="math inline">\(p=2\)</span>时，就是欧氏距离 当<span class="math inline">\(p \rightarrow \infty\)</span>时，就是切比雪夫距离</p>
<h1 id="马氏距离">马氏距离</h1>
<p><a href="https://baike.baidu.com/item/%E9%A9%AC%E6%B0%8F%E8%B7%9D%E7%A6%BB">马氏距离</a>(Mahalanobis distance)： 由印度统计学家马哈拉诺比斯提出，表示数据的协方差距离。它是一种有效的计算两个未知样本集的相似度的方法。与欧氏距离不同的是它考虑到各种特性之间的联系（例如：一条关于身高的信息会带来一条关于体重的信息，因为两者是有关联的）并且是尺度无关的(scale-invariant)，即独立于测量尺度，如果协方差矩阵为单位矩阵，马氏距离就简化为欧式距离，如果协方差矩阵为对角阵，其也可称为正规化的马氏距离。 计算公式如下： <span class="math display">\[D_{M}(x)=\sqrt{(x-\mu)^{T} \Sigma^{-1}(x-\mu)}\]</span></p>
<p>马氏距离也可以定义为两个服从同一分布并且其协方差矩阵为<span class="math inline">\(\Sigma\)</span>的随机变量<span class="math inline">\(\vec{x}\)</span>与<span class="math inline">\(\vec{y}\)</span>的差异程度： <span class="math display">\[d(\vec{x}, \vec{y})=\sqrt{(\vec{x}-\vec{y})^{T} \Sigma^{-1}(\vec{x}-\vec{y})}\]</span></p>
<h1 id="汉明距离">汉明距离</h1>
<p>在信息论中，两个等长字符串之间的<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/475174?fr=aladdin">汉明距离</a>（Hamming distance）是两个字符串对应位置的不同字符的个数。换句话说，它就是将一个字符串变换成另外一个字符串所需要替换的字符个数。 &gt;1011101 与 1001001 之间的汉明距离是 2。 2143896 与 2233796 之间的汉明距离是 3。 "toned" 与 "roses" 之间的汉明距离是 3。</p>
<h1 id="余弦相似度">余弦相似度</h1>
<p><a href="https://baike.baidu.com/item/%E4%BD%99%E5%BC%A6%E7%9B%B8%E4%BC%BC%E5%BA%A6/17509249?fr=aladdin">余弦相似度</a>通过测量两个向量的夹角的余弦值来度量它们之间的相似性。0度角的余弦值是1，而其他任何角度的余弦值都不大于1；并且其最小值是-1。从而两个向量之间的角度的余弦值确定两个向量是否大致指向相同的方向。两个向量有相同的指向时，余弦相似度的值为1；两个向量夹角为90°时，余弦相似度的值为0；两个向量指向完全相反的方向时，余弦相似度的值为-1。这结果是与向量的长度无关的，仅仅与向量的指向方向相关。余弦相似度通常用于正空间，因此给出的值为0到1之间。给定两个属性向量，A和B，其余弦相似性θ由点积和向量长度给出，如下所示： <span class="math display">\[\cos \theta=\frac{A \cdot B}{\|A\|\|B\|}=\frac{\sum_{i=1}^{n} A_{i} \times B_{i}}{\sqrt{\sum_{i=1}^{n}\left(A_{i}\right)^{2}} \times \sqrt{\sum_{i=1}^{n}\left(B_{i}\right)^{2}}}\]</span></p>
<h1 id="杰卡德距离">杰卡德距离</h1>
<p><a href="https://baike.baidu.com/item/%E6%9D%B0%E5%8D%A1%E5%BE%B7%E8%B7%9D%E7%A6%BB/15416212?fr=aladdin">杰卡德距离</a>(Jaccard Distance) ：它是杰卡德相似系数的补集，被定义为1减去Jaccard相似系数。而杰卡德相似系数(Jaccard similarity coefficient)，也称杰卡德指数(Jaccard Index)，是用来衡量两个集合相似度的一种指标。 Jaccard相似指数用来度量两个集合之间的相似性，它被定义为两个集合交集的元素个数除以并集的元素个数。 <span class="math display">\[J(A, B)=\frac{|A \cap B|}{|A \cup B|}\]</span> 杰卡德距离如下： <span class="math display">\[d_{J}(A, B)=1-J(A, B)=\frac{|A \cup B|-|A \cap B|}{|A \cup B|}\]</span> 性质： 1）若<span class="math inline">\(A、B\)</span>两个集合都为空，则<span class="math inline">\(J(A,B)=1\)</span> 2）<span class="math inline">\(0 \leq J(A, B) \leq 1\)</span></p>
<h1 id="皮尔森相关系数">皮尔森相关系数</h1>
<p><a href="https://baike.baidu.com/item/%E7%9A%AE%E5%B0%94%E6%A3%AE%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0/4222137?fr=aladdin">皮尔森相关系数</a>（Pearson correlation coefficient）：也称皮尔森积矩相关系数(Pearson product-moment correlation coefficient) ，是一种线性相关系数。皮尔森相关系数是用来反映两个变量线性相关程度的统计量。相关系数用r表示，其中n为样本量，分别为两个变量的观测值和均值。r描述的是两个变量间线性相关强弱的程度。r的绝对值越大表明相关性越强。 计算公式： <span class="math display">\[
r=\frac{\sum_{i=1}^{n}\left(X_{i}-\overline{x}\right)\left(Y_{i}-\overline{y}\right)}{\sqrt{\sum_{i=1}^{n}\left(X_{i}-\overline{x}\right)^{2}} \sqrt{\sum_{i=1}^{n}\left(Y_{i}-\overline{y}\right)^{2}}}
\]</span> 分子是两个集合的交集大小，分母是两个集合大小的几何平均值。是余弦相似性的一种形式</p>
<h1 id="编辑距离">编辑距离</h1>
<p><a href="https://baike.baidu.com/item/%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/8010193?fr=aladdin">编辑距离</a>（Edit Distance）:又称Levenshtein距离，是指两个字串之间，由一个转成另一个所需的最少编辑操作次数。许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。一般来说，编辑距离越小，两个串的相似度越大。俄罗斯科学家Vladimir Levenshtein在1965年提出这个概念。编辑距离越小的两个字符串越相似，当编辑距离为0时，两字符串相等。 <span class="math display">\[f(n) = \begin{cases}max(i,j) &amp; \text{if min(i,j)=0} \\ min{\begin{cases} lev_{a,b}(i-1,j)+1 \\ lev_{a,b}(i,j-1)+1 \\ lev_{a,b}(i-1,j-1)+1_{(a_i \neq b_j)} \end{cases}} &amp; \text{otherwise.}\end{cases}\]</span></p>
<h1 id="k-l散度">K-L散度</h1>
<p><a href="https://baike.baidu.com/item/%E7%9B%B8%E5%AF%B9%E7%86%B5/4233536?fr=aladdin">K-L散度</a>即相对熵；是衡量两个分布(P、Q)之间的距离；越小越相似。 计算公式： <span class="math display">\[D(P||Q)=\sum_{i=1}^nP(i)log{P(i) \over Q(i)}\]</span></p>
<hr>
<p>参考博客：</p>
<p>[1] <a href="https://www.iteblog.com/archives/2317.html">机器学习中常用的距离公式</a></p>
<p>[2] <a href="https://www.jianshu.com/p/185abcc8b166">常用的相似性度量算法</a></p>
<p>[3] <a href="https://zhuanlan.zhihu.com/p/27305237">机器学习和统计学中常见的距离和相似度度量</a></p>
<p>[4] <a href="https://my.oschina.net/hunglish/blog/787596">几种距离度量方法比较</a></p>
]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|机器学习</title>
    <url>/2019/06/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p><strong>目前学习的机器学习知识点总结</strong> <span id="more"></span> # Perceptron ## 原理 <strong>感知机(Perceptron)</strong> 由两层神经元组成。输入层接收外界输入信号后传递给输出层， 输出层是M-P 神经元，亦称"阔值逻辑单元" (threshold logic unit)。 ## 构成 <img src="/2019/06/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/1.png" alt="p"> 可以看到，一个感知器有如下组成部分： * <strong>输入权值</strong> 一个感知器可以接收多个输入<span class="math inline">\(\left(x_{1}, x_{2}, \ldots, x_{n} | x_{i} \in \mathfrak{R}\right)\)</span>，每个输入上有一个<strong>权值</strong><span class="math inline">\(w_{i} \in \Re\)</span>，此外还有一个<strong>偏置项</strong><span class="math inline">\(b \in \mathfrak{R}\)</span>，就是上图中的<span class="math inline">\(w_{0}\)</span>。 * <strong>激活函数</strong> 感知器的激活函数可以有很多选择，比如我们可以选择下面这个<strong>阶跃函数</strong><span class="math inline">\(f\)</span>来作为激活函数： <span class="math display">\[f(z)=\left\{\begin{array}{ll}{1} &amp; {z&gt;0} \\ {0} &amp; {\text { otherwise }}\end{array}\right.\]</span> * <strong>输出</strong> 感知器的输出由下面这个公式来计算 <span class="math display">\[y=f(w \bullet x+b) \quad 公式1\]</span></p>
<h2 id="实现">实现</h2>
<p><strong>感知器训练算法</strong>：将权重项和偏置项初始化，然后，利用下面的感知器规则迭代修改<span class="math inline">\(w_{i}\)</span>和<span class="math inline">\(b\)</span>，直到训练完成。 <span class="math display">\[\begin{array}{c}{w_{i} \leftarrow w_{i}+\Delta w_{i}} \\ {b \leftarrow b+\Delta b}\end{array}\]</span> 其中 <span class="math display">\[\begin{aligned} \Delta w_{i} &amp;=\eta(y-y_{&#39;}) x_{i} \\ \Delta b &amp;=\eta(y-y_{&#39;}) \end{aligned}\]</span> <span class="math inline">\(w_{i}\)</span>是与输入<span class="math inline">\(x_{i}\)</span>对应的权重项，是<span class="math inline">\(b\)</span>偏置项。<span class="math inline">\(y\)</span>是训练样本的实际值。而<span class="math inline">\(y_{&#39;}\)</span>是感知器的输出值，它是根据公式(1)计算得出。<span class="math inline">\(\eta\)</span>是一个称为学习速率的常数，其作用是控制每一步调整权的幅度。</p>
<h2 id="代码">代码</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VectorOp</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实现向量计算操作</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dot</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算两个向量x和y的内积</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 首先把x[x1,x2,x3...]和y[y1,y2,y3,...]按元素相乘</span></span><br><span class="line">        <span class="comment"># 变成[x1*y1, x2*y2, x3*y3]</span></span><br><span class="line">        <span class="comment"># 然后利用reduce求和</span></span><br><span class="line">        <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> a, b: a + b, VectorOp.element_multiply(x, y), <span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">element_multiply</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将两个向量x和y按元素相乘</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 首先把x[x1,x2,x3...]和y[y1,y2,y3,...]打包在一起</span></span><br><span class="line">        <span class="comment"># 变成[(x1,y1),(x2,y2),(x3,y3),...]</span></span><br><span class="line">        <span class="comment"># 然后利用map函数计算[x1*y1, x2*y2, x3*y3]</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x_y: x_y[<span class="number">0</span>] * x_y[<span class="number">1</span>], <span class="built_in">zip</span>(x, y)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">element_add</span>(<span class="params">x, y</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将两个向量x和y按元素相加</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 首先把x[x1,x2,x3...]和y[y1,y2,y3,...]打包在一起</span></span><br><span class="line">        <span class="comment"># 变成[(x1,y1),(x2,y2),(x3,y3),...]</span></span><br><span class="line">        <span class="comment"># 然后利用map函数计算[x1+y1, x2+y2, x3+y3]</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x_y: x_y[<span class="number">0</span>] + x_y[<span class="number">1</span>], <span class="built_in">zip</span>(x, y)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">scala_multiply</span>(<span class="params">v, s</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将向量v中的每个元素和标量s相乘</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">map</span>(<span class="keyword">lambda</span> e: e * s, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Perceptron</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, input_num, activator</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化感知器，设置输入参数的个数，以及激活函数。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.activator = activator</span><br><span class="line">        <span class="comment"># 权重向量初始化为0</span></span><br><span class="line">        self.weights = [<span class="number">0.0</span>] * input_num</span><br><span class="line">        <span class="comment"># 偏置项初始化为0</span></span><br><span class="line">        self.bias = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        打印学习到的权重、偏置项</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;weights\t:%s\nbias\t:%f\n&#x27;</span> % (self.weights, self.bias)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self, input_vec</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        输入向量，输出感知器的计算结果</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 计算向量input_vec[x1,x2,x3...]和weights[w1,w2,w3,...]的内积</span></span><br><span class="line">        <span class="comment"># 然后加上bias</span></span><br><span class="line">        <span class="keyword">return</span> self.activator(VectorOp.dot(input_vec, self.weights) + self.bias)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">self, input_vecs, labels, iteration, rate</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        输入训练数据：一组向量、与每个向量对应的label；以及训练轮数、学习率</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(iteration):</span><br><span class="line">            self._one_iteration(input_vecs, labels, rate)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_one_iteration</span>(<span class="params">self, input_vecs, labels, rate</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        一次迭代，把所有的训练数据过一遍</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 把输入和输出打包在一起，成为样本的列表[(input_vec, label), ...]</span></span><br><span class="line">        <span class="comment"># 而每个训练样本是(input_vec, label)</span></span><br><span class="line">        samples = <span class="built_in">zip</span>(input_vecs, labels)</span><br><span class="line">        <span class="comment"># 对每个样本，按照感知器规则更新权重</span></span><br><span class="line">        <span class="keyword">for</span> (input_vec, label) <span class="keyword">in</span> samples:</span><br><span class="line">            <span class="comment"># 计算感知器在当前权重下的输出</span></span><br><span class="line">            output = self.predict(input_vec)</span><br><span class="line">            <span class="comment"># 更新权重</span></span><br><span class="line">            self._update_weights(input_vec, output, label, rate)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_update_weights</span>(<span class="params">self, input_vec, output, label, rate</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        按照感知器规则更新权重</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 首先计算本次更新的delta</span></span><br><span class="line">        <span class="comment"># 然后把input_vec[x1,x2,x3,...]向量中的每个值乘上delta，得到每个权重更新</span></span><br><span class="line">        <span class="comment"># 最后再把权重更新按元素加到原先的weights[w1,w2,w3,...]上</span></span><br><span class="line">        delta = label - output</span><br><span class="line">        self.weights = VectorOp.element_add(</span><br><span class="line">            self.weights, VectorOp.scala_multiply(input_vec, rate * delta))</span><br><span class="line">        <span class="comment"># 更新bias</span></span><br><span class="line">        self.bias += rate * delta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义激活函数f</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<!-- # MLP -->
<!-- # SVM
# CNN
# KNN
# GAN
# 自编码器

****
# 参考资料
[1] 《机器学习》 周志华
[2]  [感知器](https://www.zybuluo.com/hanbingtao/note/433855)
[] 
[] 
[] 
[] 
[] 
[]  -->
]]></content>
      <tags>
        <tag>机器学习</tag>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|简单的Web Service</title>
    <url>/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/</url>
    <content><![CDATA[<p><strong>编写Web Service客户端程序。</strong> <span id="more"></span> # 什么是Web Service？ * 为方便网络上不同节点之间互操作而定义的一套协议标准， 也可视为实现远程过程调用的一套协议标准。(W3C) * 方便了Business to Business的业务集成。可以将多个第三方服务组合成一种新的服务。 * Web系统功能被扩展：不只是用于共享文档，不只是为“看”；Web系统也被用于节点之间的互操作。 * 客户端-服务器模式 * 跨平台、跨语言、面向接口编程 * 实现面向服务构架(SOA：Service-oriented Architecture)的重要技术之一</p>
<h2 id="主要包含的标准协议">主要包含的标准协议</h2>
<ul>
<li>消息编码标准(XML)</li>
<li>传输协议标准(HTTP、SMTP、TCP、UDP)</li>
<li>远程对象访问协议（即远程方法调用协议）：SOAP(Simple Object Access Protocol):</li>
<li>Web服务描述语言：WSDL(Web Services Description Language) （主要描述服务接口定义）</li>
<li>服务目录、服务注册、服务发现：UDDI(Universal Discovery Description and Integration)</li>
<li>安全相关标准：签名、加密、认证等</li>
<li>服务组合、服务编排</li>
</ul>
<p><strong>SOAP</strong> <img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/6.png" alt="6"></p>
<p><strong>WSDL与UDDI</strong> <img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/7.png" alt="7"></p>
<h1 id="实现与调用web-service的流程">实现与调用Web Service的流程</h1>
<h2 id="服务端的实现">服务端的实现</h2>
<ol type="1">
<li>用常用高级编程语言（例如Java）定义Web服务接口</li>
<li>根据Java定义的Web服务接口生成WSDL（中间件自动做）</li>
<li>定义实现接口的Web服务实现类</li>
<li>将Web服务实现类绑定到Web服务器</li>
<li>将Web服务注册的UDDI中心</li>
</ol>
<h2 id="客户端的实现">客户端的实现</h2>
<ol type="1">
<li>从UDDI中心查找的目标Web服务的接口定义（WSDL）</li>
<li>根据WSDL生成Web服务代理类(WSDL to Java)</li>
<li>利用Web服务代理类调用Web服务接口中定义的具体方法</li>
</ol>
<h1 id="例子">例子</h1>
<p><strong>题目</strong>： 到免费公开Web Service目录网站（如<a href="http://www.webxml.com.cn" class="uri">http://www.webxml.com.cn</a>）上找到一种自己感兴趣的Web Service，如：天气预报服务、飞机航班时刻表查询服务、火车时刻表查询服务、邮政编码查询服务、中国股票行情查询、及时外汇查询等，编写一个该服务的调用客户端程序。</p>
<hr>
<p><strong>实现过程</strong> 1.首先在Web Services的网站中找到目标Web服务的接口定义。（我选的是IP地址，主要要的是WSDL那一行） <img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/1.png" alt="网站"> 拷贝网址 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ws.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx?wsdl</span><br></pre></td></tr></table></figure> 2.打开命令行输入命令，根据WSDL生成Web服务代理类 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 你的文件夹</span><br><span class="line">wsimport -keep -p wsproxy 你拷贝的网址</span><br><span class="line">（比如：http://ws.webxml.com.cn/WebServices/IpAddressSearchWebService.asmx?wsdl）</span><br><span class="line"></span><br></pre></td></tr></table></figure> <img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/2.png" alt="ml"> 在你的文件夹中会出现一个wsproxy文件夹 <img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/4.png" alt="file"> 3.利用Web服务代理类调用Web服务接口中定义的具体方法，编写客户端。这步比较麻烦，有接口说明的简单点，没有的就要根据上一步生成的文件猜测了。下面是我的，可以比较着写。 <img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/3.png" alt="code"> 4.最后，编译并运行客户端 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac .\wsclient\*.java</span><br><span class="line">java wsclient.CodeInfoClient</span><br><span class="line">(这里是我的客户端的位置和名称)</span><br></pre></td></tr></table></figure> <img src="/2019/05/16/%E5%88%86%E5%B8%83%E5%BC%8F4/5.png" alt="end"></p>
<p>PS: 第一步的网站是免费的，但里面的网址不是都可以用的，如果第二步出错，换个网址试试</p>
<p><strong>再举个例子</strong> QQ在线查询 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsimport -keep -p wsproxy http://ws.webxml.com.cn/webservices/qqOnlineWebService.asmx?wsdl</span><br></pre></td></tr></table></figure> CodeInfoClient.java <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wsproxy.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeInfoClient</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">QqOnlineWebService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QqOnlineWebService</span>();</span><br><span class="line">        <span class="type">QqOnlineWebServiceSoap</span> <span class="variable">pService</span> <span class="operator">=</span> service.getQqOnlineWebServiceSoap();</span><br><span class="line">         </span><br><span class="line">        System.out.println(pService.qqCheckOnline(<span class="string">&quot;QQ号&quot;</span>));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>算法</title>
    <url>/2023/02/28/%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>算法课程笔记 <span id="more"></span></p>
<h2 id="第一章">第一章</h2>
<p>参考链接：https://www.jiangguo.net/c/7l5/0w.html</p>
<h3 id="复杂度从低到高">复杂度从低到高：</h3>
<p><span class="math inline">\(1&lt;logn&lt;n&lt;nlogn&lt;log(n!)\)</span> <span class="math inline">\(&lt;n^k&lt;a^n&lt;n!&lt;n^n\)</span></p>
<h2 id="第二章">第二章</h2>
<p>参考链接：https://www.jianshu.com/p/1a87c98b0eb5</p>
<h3 id="解递归式的方法">解递归式的方法</h3>
<h3 id="归纳法"><strong>归纳法</strong></h3>
<ol type="1">
<li>猜测解的形式</li>
<li>用数学归纳法求出解中的常数，并证明解是正确的</li>
</ol>
<blockquote>
<p>猜测靠经验</p>
</blockquote>
<h3 id="变量替换"><strong>变量替换</strong></h3>
<p>例题：<span class="math inline">\(T(n)=2T(\sqrt{n})+ logn\)</span></p>
<p>可以设 <span class="math inline">\(m=logn\)</span>，则 <span class="math inline">\(T(2^m)=2T(2^{m/2})+m\)</span></p>
<p>再设 <span class="math inline">\(S(m)=T(2^m)\)</span>，可得<span class="math inline">\(S(m)=2S(m/2)+m\)</span></p>
<p>可证 <span class="math inline">\(S(m)=O(mlogm)\)</span>, 则<span class="math inline">\(T(n)=O(lognlog(logn))\)</span></p>
<p><strong>递归树</strong></p>
<h3 id="master定理"><strong>master定理</strong></h3>
<h4 id="快速计算">快速计算</h4>
<p><span class="math inline">\(T(n)=aT(n/b)+ O(n^d)\)</span>的复杂度判断 1) <span class="math inline">\(d &gt; log_b{a}\)</span> <span class="math display">\[
T(n) = O(n^d)
\]</span></p>
<ol start="2" type="1">
<li><p><span class="math inline">\(d = log_b{a}\)</span> <span class="math display">\[
T(n) = O(n^dlogn)
\]</span></p></li>
<li><p><span class="math inline">\(d &lt; log_b{a}\)</span> <span class="math display">\[
T(n) = O(n^{log_b{a}})
\]</span> 运用 Master 定理的时候，第一条和第三条中的<span class="math inline">\(ε\)</span>必须大于零。例如：<span class="math inline">\(T(n)=2T(n/2)+ nlogn\)</span></p></li>
</ol>
<h4 id="理论证明">理论证明</h4>
<p>https://www.cnblogs.com/HIIM/p/12499319.html</p>
<h2 id="第三章">第三章</h2>
<h3 id="最长公共子序列">最长公共子序列</h3>
<p><span class="math display">\[c[i][j] = \begin{cases} 0 &amp; \text{i &gt; 0; j = 0} \\ c[i - 1][j - 1] + 1 &amp; \text{i, j &gt; 0; $(x_i = y_i)$} \\ max(c[i][j - 1], c[i - 1][j]) &amp; \text{i, j &gt; 0;  $(x_i \neq y_i)$}\end{cases}\]</span></p>
<p>计算c[i][j]的算法时间复杂度为<span class="math inline">\(O(mn)\)</span></p>
<p>根据b[i][j]推导序列的时间复杂度为<span class="math inline">\(O(m + n)\)</span></p>
<h3 id="背包">01背包</h3>
<p><span class="math display">\[m[i][j] = \begin{cases} max(m[i + 1][j], m[i + 1][j - w_i] + v_i) &amp; \text{ j ≥ $w_i$ } \\ m[i + 1][j] &amp; \text{ 0 ≤ j &lt; $w_i$ } \end{cases}\]</span> 时间复杂度：O(cn) #### 跳跃点</p>
<h3 id="流水作业调度">流水作业调度</h3>
<h4 id="johnson算法">Johnson算法</h4>
<ol type="1">
<li>将任务分为两类<span class="math inline">\(a_i &lt; b_i\)</span> 和 <span class="math inline">\(a_i &gt; b_i\)</span></li>
<li><span class="math inline">\(a_i &lt; b_i\)</span>往前排，按照<span class="math inline">\(a_i\)</span>升序排列</li>
<li><span class="math inline">\(a_i &gt; b_i\)</span>往后排，按照<span class="math inline">\(b_i\)</span>降序排列</li>
</ol>
<h2 id="第四章">第四章</h2>
<p>主要为贪心选择性和最优子结构证明 ### 最小生成树 <strong>Prim算法</strong>：从点v1开始选择离v1最近的点；现在v1和v3作为一个整体，看那个点离v1和v3最近，此时有两个点离得最近，按顺序选择v4；。。。 时间复杂度：<span class="math inline">\(O(n^2)\)</span></p>
<p><strong>Kruskal算法</strong>：将图中的所有边都去掉；将边按权值从小到大的顺序添加到图中，保证添加的过程中不会形成环；重复上一步直到连接所有顶点 <span class="math inline">\(O(eloge)\)</span></p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>理论</tag>
      </tags>
  </entry>
  <entry>
    <title>Python|降维算法PCA和LDA的实现及总结</title>
    <url>/2019/05/19/%E9%99%8D%E7%BB%B4/</url>
    <content><![CDATA[<p><strong>以Iris数据集为例，分别实现PCA和LDA降维</strong> <span id="more"></span> # PCA ## 算法原理 主成分分析（Principal Component Analysis，PCA）是一种常用的线性降维数据分析方法，其实质是在能尽可能好的代表原特征的情况下，将原特征进行线性变换、映射至低纬度空间中。 &gt;至于更详细的的可以看下面的 &gt;<a href="https://blog.csdn.net/qq_16137569/article/details/82142668">PCA原理小结</a> &gt;<a href="https://blog.csdn.net/a8039974/article/details/81285238">PCA(主成分分析)详解</a> &gt;<a href="https://blog.csdn.net/zhongkelee/article/details/44064401">主成分分析（PCA）原理详解</a> &gt;<a href="https://blog.csdn.net/Eastmount/article/details/53285192">PCA降维操作</a></p>
<h2 id="算法实现">算法实现</h2>
<p>首先将数据做中心化处理 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">meanVal = np.mean(X, axis=<span class="number">0</span>)</span><br><span class="line">W = X - meanVal</span><br></pre></td></tr></table></figure> 这里说一下，中心化就是使得样本矩阵的中心回归到坐标系的原点，看下图应该比较好理解。也可以点<a href="https://www.zhihu.com/question/37069477/answer/132736027">这里</a>更详细。 <img src="/2019/05/19/%E9%99%8D%E7%BB%B4/1.jpg" alt="zx"></p>
<p>计算中心化后数据的协方差矩阵 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">covMat = np.cov(W, rowvar=<span class="number">0</span>)</span><br></pre></td></tr></table></figure> 计算协方差矩阵的特征值和特征向量 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eigVals, eigVects = np.linalg.eig(np.mat(covMat))</span><br></pre></td></tr></table></figure> 找出特征值最大的k个特征所对应的特征向量，并组成向量T <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">E = np.argsort(eigVals)</span><br><span class="line">k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">T = eigVects[:, k_E]</span><br></pre></td></tr></table></figure> Y=W*T即为降维到k维后的数据 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Y = W * T</span><br></pre></td></tr></table></figure> ## 结果 PCA算法 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">MyPca</span>(<span class="params">X,k</span>):</span><br><span class="line"></span><br><span class="line">    meanVal = np.mean(X, axis=<span class="number">0</span>)</span><br><span class="line">    W = X - meanVal</span><br><span class="line"></span><br><span class="line">    covMat = np.cov(W, rowvar=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    eigVals, eigVects = np.linalg.eig(np.mat(covMat))</span><br><span class="line"></span><br><span class="line">    E = np.argsort(eigVals)</span><br><span class="line">    k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">    T = eigVects[:, k_E]</span><br><span class="line"></span><br><span class="line">    Y = W * T</span><br><span class="line">    <span class="keyword">return</span> Y</span><br></pre></td></tr></table></figure> 带入Iris数据集 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = load_iris()</span><br><span class="line">y = data.target <span class="comment">#标签</span></span><br><span class="line">X = data.data</span><br></pre></td></tr></table></figure> 带入数据，输出结果 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reduced_X = np.array(MyPca(X, <span class="number">2</span>))</span><br><span class="line">show2(reduced_X)</span><br></pre></td></tr></table></figure> <img src="/2019/05/19/%E9%99%8D%E7%BB%B4/3.png" alt="pca"></p>
<h1 id="lda">LDA</h1>
<h2 id="算法原理">算法原理</h2>
<p>线性判别分析(linear discriminant analysis，LDA)是是一种监督学习的降维技术，投影后希望类内方差最小，类间方差最大，即每一种类别数据的投影点尽可能的接近，而不同类别的数据的类别中心之间的距离尽可能的大。 &gt;这里推荐几篇文章，有更详细的数学推导 &gt;<a href="https://www.cnblogs.com/jerrylead/archive/2011/04/21/2024384.html">线性判别分析（Linear Discriminant Analysis）（一）</a> &gt;<a href="https://www.cnblogs.com/jerrylead/archive/2011/04/21/2024389.html">线性判别分析（Linear Discriminant Analysis）（二）</a></p>
<h2 id="算法实现-1">算法实现</h2>
<p>首先将数据根据标签分类 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yi = <span class="built_in">set</span>(y)</span><br><span class="line">xi = np.array([X[np.where(y == i)] <span class="keyword">for</span> i <span class="keyword">in</span> yi])</span><br></pre></td></tr></table></figure> 计算所有样本均值<span class="math inline">\(\mu=\frac{1}{m}\sum\limits_{i=1}^m\)</span>和各类样本均值<span class="math inline">\(\mu_i=\frac{1}{n_i}\sum\limits_{x\in x_i}x\)</span> 其中<span class="math inline">\(m\)</span>表示总样本数，<span class="math inline">\(n_i\)</span>表示第i类的样本数。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">u = np.array([np.mean(X, axis=<span class="number">0</span>)])</span><br><span class="line">ui = np.array([np.mean(xi[i], axis=<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(xi.shape[<span class="number">0</span>])])</span><br></pre></td></tr></table></figure> 计算类内散度矩阵<span class="math inline">\(S_w=\sum\limits_{i=1}^c\sum\limits_{x\in x_i}(x-\mu_i)(x-\mu_i)^T\)</span> 及类间散度矩阵<span class="math inline">\(S_b=\sum\limits_{i=1}^cn_i(\mu_i-\mu)(\mu_i-\mu)^T\)</span> 其中<span class="math inline">\(c\)</span>表示类别数。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Sw = <span class="built_in">sum</span>(np.dot((xi[i] - ui[i]).T, (xi[i] - ui[i])) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br><span class="line">Sb = <span class="built_in">sum</span>(<span class="built_in">len</span>(xi[i]) * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u).T * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br></pre></td></tr></table></figure> 计算<span class="math inline">\(S_w^{-1}S_b\)</span>(由于<span class="math inline">\(S_b\)</span>的秩最大为<span class="math inline">\(c-1\)</span>，所以LDA最大只能降到<span class="math inline">\(c-1\)</span>的维度) <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S=np.linalg.inv(Sw).dot(Sb)</span><br><span class="line">r=np.linalg.matrix_rank(S)</span><br><span class="line"><span class="keyword">if</span>(k&gt;r):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;k_max=&quot;</span>,r)</span><br><span class="line">    k=r</span><br></pre></td></tr></table></figure> 找出特征值最大的k个特征所对应的特征向量，并组成向量<span class="math inline">\(W\)</span>，<span class="math inline">\(Y=W*X\)</span>即为降维到k维后的数据 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">eigVals, eigVects = np.linalg.eig(S)</span><br><span class="line">E = np.argsort(eigVals)</span><br><span class="line">k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">W = eigVects[:, k_E]</span><br><span class="line">Y=np.dot(X, W)</span><br></pre></td></tr></table></figure> ## 结果 LDA算法 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">MyLDA</span>(<span class="params">X,y,k</span>):</span><br><span class="line">    yi = <span class="built_in">set</span>(y)</span><br><span class="line">    xi = np.array([X[np.where(y == i)] <span class="keyword">for</span> i <span class="keyword">in</span> yi])</span><br><span class="line"></span><br><span class="line">    u = np.array([np.mean(X, axis=<span class="number">0</span>)])</span><br><span class="line">    ui = np.array([np.mean(xi[i], axis=<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(xi.shape[<span class="number">0</span>])])</span><br><span class="line"></span><br><span class="line">    Sw = <span class="built_in">sum</span>(np.dot((xi[i] - ui[i]).T, (xi[i] - ui[i]))</span><br><span class="line">             <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br><span class="line">    Sb = <span class="built_in">sum</span>(<span class="built_in">len</span>(xi[i]) * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u).T * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u)</span><br><span class="line">             <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br><span class="line"></span><br><span class="line">    S=np.linalg.inv(Sw).dot(Sb)</span><br><span class="line">    r=np.linalg.matrix_rank(S)</span><br><span class="line">    <span class="keyword">if</span>(k&gt;r):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;k_max=&quot;</span>,r)</span><br><span class="line">        k=r</span><br><span class="line"></span><br><span class="line">    eigVals, eigVects = np.linalg.eig(S)</span><br><span class="line">    E = np.argsort(eigVals)</span><br><span class="line">    k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">    W = eigVects[:, k_E]</span><br><span class="line"></span><br><span class="line">    Y=np.dot(X, W)</span><br><span class="line">    <span class="keyword">return</span> Y</span><br></pre></td></tr></table></figure> 带入数据，输出结果 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LDA_2D = np.array(MyLDA(X,y,<span class="number">2</span>))</span><br><span class="line">show2(LDA_2D)</span><br></pre></td></tr></table></figure> <img src="/2019/05/19/%E9%99%8D%E7%BB%B4/4.png" alt="lda"></p>
<p>这样就将数据降到二维，但可能有人会疑惑，怎么知道降维后的信息量变化了多少呢？可以用这样的计算方法: <span class="math inline">\(\eta_k=\frac{\sum_{j=1}^k\lambda_j}{\sum_{j=1}^k\lambda_j}\)</span>来表示降维后剩余的信息量</p>
<h1 id="总结">总结</h1>
<p>总的来说，PCA和LDA的实现很简单，但是基本原理和推导需要扎实的数学基础，尤其是LDA中，尤其要注意矩阵的秩对结果的影响。PCA和LDA虽然都用到数据降维的思想，但是两者有着很大的不同，首先监督方式不一样，LDA是有监督的降维方法，而PCA是无监督的降维方法；再者目的也不一样，PCA是为了去除原始数据集中冗余的维度，让投影子空间的各个维度的方差尽可能大。而LDA是通过数据降维使得原始数据中不同的类别尽可能区分开来。</p>
<h1 id="代码">代码</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyPCA</span>(<span class="params">X,k</span>):</span><br><span class="line"></span><br><span class="line">    meanVal = np.mean(X, axis=<span class="number">0</span>)</span><br><span class="line">    W = X - meanVal</span><br><span class="line"></span><br><span class="line">    covMat = np.cov(W, rowvar=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    eigVals, eigVects = np.linalg.eig(np.mat(covMat))</span><br><span class="line"></span><br><span class="line">    E = np.argsort(eigVals)</span><br><span class="line">    k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">    T = eigVects[:, k_E]</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">sum</span>(eigVals[k_E])/<span class="built_in">sum</span>(eigVals)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;降到&quot;</span>,k,<span class="string">&quot;维后保留的信息量是原来的&quot;</span>,n * <span class="number">100.0</span>, <span class="string">&quot;%&quot;</span>)</span><br><span class="line"></span><br><span class="line">    Y = W * T</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MyLDA</span>(<span class="params">X,y,k</span>):</span><br><span class="line">    yi = <span class="built_in">set</span>(y)</span><br><span class="line">    xi = np.array([X[np.where(y == i)] <span class="keyword">for</span> i <span class="keyword">in</span> yi])</span><br><span class="line"></span><br><span class="line">    u = np.array([np.mean(X, axis=<span class="number">0</span>)])</span><br><span class="line">    ui = np.array([np.mean(xi[i], axis=<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(xi.shape[<span class="number">0</span>])])</span><br><span class="line"></span><br><span class="line">    Sw = <span class="built_in">sum</span>(np.dot((xi[i] - ui[i]).T, (xi[i] - ui[i]))</span><br><span class="line">             <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br><span class="line">    Sb = <span class="built_in">sum</span>(<span class="built_in">len</span>(xi[i]) * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u).T * (ui[i].reshape(<span class="number">1</span>, <span class="number">4</span>) - u)</span><br><span class="line">             <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(yi)))</span><br><span class="line"></span><br><span class="line">    S=np.linalg.inv(Sw).dot(Sb)</span><br><span class="line">    r=np.linalg.matrix_rank(S)</span><br><span class="line">    <span class="keyword">if</span>(k&gt;r):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;k_max=&quot;</span>,r)</span><br><span class="line">        k=r</span><br><span class="line"></span><br><span class="line">    eigVals, eigVects = np.linalg.eig(S)</span><br><span class="line">    E = np.argsort(eigVals)</span><br><span class="line">    k_E = E[:-(k + <span class="number">1</span>):-<span class="number">1</span>]</span><br><span class="line">    W = eigVects[:, k_E]</span><br><span class="line"></span><br><span class="line">    n = <span class="built_in">sum</span>(eigVals[k_E]) / <span class="built_in">sum</span>(eigVals)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;降到&quot;</span>, k, <span class="string">&quot;维后保留的信息量是原来的&quot;</span>, n * <span class="number">100.0</span>, <span class="string">&quot;%&quot;</span>)</span><br><span class="line"></span><br><span class="line">    Y=np.dot(X, W)</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show2</span>(<span class="params">reduced_X</span>):</span><br><span class="line">    red_x, red_y = [], []</span><br><span class="line">    blue_x, blue_y = [], []</span><br><span class="line">    green_x, green_y = [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(reduced_X)):</span><br><span class="line">        <span class="keyword">if</span> y[i] == <span class="number">0</span>:</span><br><span class="line">            red_x.append(reduced_X[i][<span class="number">0</span>])</span><br><span class="line">            red_y.append(reduced_X[i][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span> y[i] == <span class="number">1</span>:</span><br><span class="line">            blue_x.append(reduced_X[i][<span class="number">0</span>])</span><br><span class="line">            blue_y.append(reduced_X[i][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            green_x.append(reduced_X[i][<span class="number">0</span>])</span><br><span class="line">            green_y.append(reduced_X[i][<span class="number">1</span>])</span><br><span class="line">    plt.scatter(red_x, red_y, c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    plt.scatter(blue_x, blue_y, c=<span class="string">&#x27;b&#x27;</span>, marker=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    plt.scatter(green_x, green_y, c=<span class="string">&#x27;g&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show3</span>(<span class="params">X</span>):</span><br><span class="line">    red_x, red_y, red_z = [], [], []</span><br><span class="line">    blue_x, blue_y, blue_z = [], [], []</span><br><span class="line">    green_x, green_y, green_z = [], [], []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(X)):</span><br><span class="line">        <span class="keyword">if</span> y[i] == <span class="number">0</span>:</span><br><span class="line">            red_x.append(X[i][<span class="number">0</span>])</span><br><span class="line">            red_y.append(X[i][<span class="number">1</span>])</span><br><span class="line">            red_z.append(X[i][<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">elif</span> y[i] == <span class="number">1</span>:</span><br><span class="line">            blue_x.append(X[i][<span class="number">0</span>])</span><br><span class="line">            blue_y.append(X[i][<span class="number">1</span>])</span><br><span class="line">            blue_z.append(X[i][<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            green_x.append(X[i][<span class="number">0</span>])</span><br><span class="line">            green_y.append(X[i][<span class="number">1</span>])</span><br><span class="line">            green_z.append(X[i][<span class="number">2</span>])</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = fig.gca(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">    ax.scatter(red_x, red_y, red_z, c=<span class="string">&#x27;r&#x27;</span>, marker=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    ax.scatter(blue_x, blue_y, blue_z, c=<span class="string">&#x27;b&#x27;</span>, marker=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    ax.scatter(green_x, green_y, green_z, c=<span class="string">&#x27;g&#x27;</span>, marker=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = load_iris()</span><br><span class="line">    y = data.target</span><br><span class="line">    X = data.data</span><br><span class="line"></span><br><span class="line">    <span class="comment">#PCA</span></span><br><span class="line">    <span class="comment">#降到2维</span></span><br><span class="line">    PCA_2D = np.array(MyPCA(X, <span class="number">2</span>))</span><br><span class="line">    show2(PCA_2D)</span><br><span class="line">    <span class="comment"># 降到3维</span></span><br><span class="line">    PCA_3D = np.array(MyPCA(X, <span class="number">3</span>))</span><br><span class="line">    show3(PCA_3D)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#LDA</span></span><br><span class="line">    <span class="comment"># 降到2维</span></span><br><span class="line">    LDA_2D = np.array(MyLDA(X,y,<span class="number">2</span>))</span><br><span class="line">    show2(LDA_2D)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>
<p><strong>如有错误，欢迎指正；如果有更好的，欢迎分享。</strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>PCA</tag>
        <tag>LDA</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|网络程序设计</title>
    <url>/2019/06/14/%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p><strong>网络程序设计简单的总结</strong> <strong>ψ(｀∇´)ψ</strong> <span id="more"></span> # Linux 编程基础 ## C语言编译 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc hello.c –o hello </span><br></pre></td></tr></table></figure> ## Linux常用网络调试命令 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看网络配置（网卡）</span><br><span class="line">ifconfig</span><br><span class="line">查看所有网络连接状态</span><br><span class="line">nestat – a</span><br><span class="line">查看TCP协议网络连接状态</span><br><span class="line">netstat –t</span><br><span class="line">查看网络连接所属进程PID</span><br><span class="line">netstat -p</span><br><span class="line">检查网络是否可达</span><br><span class="line">ping 127.0.0.1 </span><br></pre></td></tr></table></figure> ## Linux操作基础 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls 显示当前目录中的内容 </span><br><span class="line">ls －l</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd 切换目录</span><br><span class="line">cd /mnt/usb</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir 创建目录</span><br><span class="line">mkdir work</span><br><span class="line">rmdir 删除目录</span><br><span class="line">rmdir work</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp 复制文件</span><br><span class="line">cp prog1.c prog2.c</span><br><span class="line">cp prog1.c /mnt/usb</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm 删除文件或目录</span><br><span class="line">rm prog1.c</span><br><span class="line">rm *.*</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv 移动或改变文件名称</span><br><span class="line">mv prog1.c ..</span><br><span class="line">mv pro1.c prog2.c</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more命令</span><br><span class="line">ls –l|more 显示画面暂停</span><br><span class="line">more prog1.c 显示文本文件内容</span><br><span class="line">pwd 显示当前所在目录</span><br></pre></td></tr></table></figure> # 基本socket函数 ## 必须的头文件 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br></pre></td></tr></table></figure> ## 创建网络端点 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> sock;</span><br><span class="line"><span class="keyword">if</span>((sock=socket(AF_INET,SOCK_STREAM,<span class="number">0</span>))&lt;<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure> &gt;int socket (int family, int type, int protocol) 功能：创建socket描述符 参数：（P34表2－1描述了可能的参数值） family（协议簇）：AF_INET、AF_UNIX type（类型）：SOCK_STREAM、SOCK_DGRAM、SOCK_RAW protocol（协议）：默认为0 返回值：&gt;0－socket描述符， -1－失败， 系统全局变量errno为错误代码 ## 设置地址 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">bzero(&amp;srvaddr,<span class="keyword">sizeof</span>(srvaddr));</span><br><span class="line">addr.sin_family=AF_INET;</span><br><span class="line">addr.sin_port=htons(<span class="number">1234</span>);</span><br><span class="line"><span class="keyword">if</span>(inet_aton(<span class="string">&quot;127.0.0.1&quot;</span>,srvaddr.sin_addr.s_addr)==<span class="number">-1</span>)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;addr convert error\n&quot;</span>);</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> &gt;TCP/IP协议的socket地址 常用地址形式（字符串）：“127.0.0.1” 地址转换函数: <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">inet_aton(<span class="type">const</span> <span class="type">char</span> *cp,<span class="keyword">struct</span> in_addr *inp);</span><br><span class="line"><span class="type">char</span>* <span class="title function_">inet_ntoa</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="绑定服务器地址和端口">绑定服务器地址和端口</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( bind(sockfd,(<span class="keyword">struct</span> sockaddr *)&amp;addr,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr))==<span class="number">-1</span>)&#123;		</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;bind error\n&quot;</span>);		</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>int bind(int sockfd,struct sockaddr *myaddr,int addrlen); 功能：绑定本地地址和端口 参数： sockfd－socket描述符 myaddr－自己的地址 addrlen－地址结构长度 返回值： 0－成功，-1－失败，errno为错误代码</p>
</blockquote>
<h2 id="监听端口">监听端口</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( listen(sockfd,BACKLOG) ==<span class="number">-1</span>)&#123;	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;listen error\n&quot;</span>);	</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>int listen(int sockfd,int backlog) 功能：监听本地地址和端口 参数： sockfd－已绑定的socket描述符 backlog－以完成连接，等待接受的队列长度 返回值 0－成功，-1－失败，errno为错误代码</p>
</blockquote>
<h2 id="接受客户端连接">接受客户端连接</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> sin_size=<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in);	</span><br><span class="line"><span class="type">int</span> new_fd= accept(sockfd,(<span class="keyword">struct</span> sockaddr *)&amp;clientaddr,&amp;sin_size);</span><br><span class="line"><span class="keyword">if</span>(( new_fd==<span class="number">-1</span>)&#123;		</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;accept errot\n&quot;</span>);	</span><br><span class="line">	<span class="keyword">continue</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>int accept(int sockfd,struct sockaddr *clientaddr,int addrlen); 功能：接受连接 参数： sockfd－socket描述符 clientaddr－客户端地址 addrlen－地址结构长度 返回值: 0－成功，返回新的socket描述符标识已接受的连接 -1－失败，errno为错误代码</p>
</blockquote>
<h2 id="接收数据">接收数据</h2>
<blockquote>
<p>int read(int fd,char *buf,int len); 功能：从socket读取数据 参数： fd－socket描述符 buf－接收数据缓冲区 len－要读取数据大小 返回值 ≥0－成功，-1－失败，errno为错误代码</p>
</blockquote>
<h2 id="发送数据">发送数据</h2>
<blockquote>
<p>int write(int fd,char *buf,int len); 功能：从socket读取数据 参数： fd－socket描述符 buf－发送数据缓冲区 len－要发送数据大小 返回值 ≥0－成功，-1－失败，errno为错误代码</p>
</blockquote>
<h2 id="关闭socket">关闭socket</h2>
<blockquote>
<p>int close(int sockfd) 功能：关闭socket 参数： sockfd－socket描述符 返回值 0－成功，-1－失败，errno为错误代码 说明 调用close只是将对sockfd的引用减1，直到对sockfd的引用为0时才清除sockfd ，TCP协议将继续使用sockfd，直到所有数据发送完成</p>
</blockquote>
<h2 id="连接服务器">连接服务器</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( connect(sockfd,(<span class="keyword">struct</span> sockaddr *)&amp;srvaddr,<span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr) )==<span class="number">-1</span>)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;connect error\n&quot;</span>);</span><br><span class="line">	<span class="built_in">exit</span>(<span class="number">1</span>);	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>int connect(int sockfd,struct sockaddr *servaddr,int addrlen) 功能：连接服务器 参数： sockfd－socket描述符 servaddr－服务器地址 addrlen－地址结构长度 返回值： 0－成功，-1－失败，errno为错误代码</p>
</blockquote>
<h1 id="高级socket函数">高级socket函数</h1>
<h2 id="域名访问">域名访问</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span> *<span class="title">he</span>=</span>gethostbyname(“www.sina.com.cn”);</span><br><span class="line"><span class="keyword">if</span>(he!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;h_name:%s\n&quot;</span>,he-&gt;h_name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;h_length:%d\n&quot;</span>,he-&gt;h_length);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;h_addrtype:%d&quot;</span>,he-&gt;h_addrtype;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;he-&gt;h_aliases[i] !=<span class="literal">NULL</span>;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;h_aliases%d:%s\n&quot;</span>,i+<span class="number">1</span>,he-&gt;h_aliases[i]); </span><br><span class="line">	<span class="comment">//列出所有地址</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;he-&gt;h_addr_list[i]!=<span class="literal">NULL</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">struct</span> in_addr *addr;</span><br><span class="line">		addr=(<span class="keyword">struct</span> in_addr *)he-&gt;h_addr_list[i];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;ip%d:%s\n&quot;</span>,(i+<span class="number">1</span>),inet_ntoa(*addr));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;gethostbyname error:%s\n&quot;</span>,hstrerror(h_errno));</span><br></pre></td></tr></table></figure>
<blockquote>
<p>域名到IP的转换函数 struct hostent* gethostbyname(const char *name) 功能：查询域名对应的IP <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hostent</span>&#123;</span></span><br><span class="line">	<span class="type">char</span>	 h_name;	<span class="comment">/*主机正式名称*/</span></span><br><span class="line">	<span class="type">char</span>	**h_aliases;	<span class="comment">/*别名列表，以NULL结束*/</span></span><br><span class="line">	<span class="type">int</span> 	h_addrtype;	<span class="comment">/*主机地址类型：AF_INET*/</span></span><br><span class="line">	<span class="type">int</span> 	h_length;	<span class="comment">/*主机地址长度：4字节32位*/</span></span><br><span class="line">	<span class="type">char</span> 	**h_addr_list;	<span class="comment">/*主机网络地址列表，以NULL结束*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 	h_addr 	h_addr_list[0]; <span class="comment">//主机的第一个网络地址</span></span></span><br></pre></td></tr></table></figure> ## recv和send <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">recv</span><span class="params">(<span class="type">int</span> sockfd,<span class="type">void</span>* buf,<span class="type">int</span> len, <span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">send</span><span class="params">(<span class="type">int</span> sockfd,<span class="type">void</span>* buf,<span class="type">int</span> len,<span class="type">int</span> flags)</span>;</span><br></pre></td></tr></table></figure> 功能：通过参数控制读写数据 参数： sockfd－socket描述符 buf－发送或接收数据缓冲区 len－发送或接收数据长度 flags－发送或接收数据的控制参数 返回值：≥0－成功，-1失败</p>
</blockquote>
<p><strong>控制参数说明</strong> &gt;flags=0，相当于read和write函数 flags=MSG_DONTROUTE，发送数据不查找路由表，适用于局域网，或同一网段 flags=MSG_OOB，发送和接收带外数据 flags=MSG_PEEK，接收数据时不从缓冲区移走数据，其他进程调用read或recv仍然可以读到数据 flags=MSG_WAITALL，数据量不够时，读操作等待，不返回，但在收到、文件结束符、信号以及出错时，仍然会结束。 ## 高级socket函数 <img src="/2019/06/14/%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/1.png" alt="1"> ## 多路复用 <strong>多路复用函数select</strong> &gt;int select(int maxfd,fd_set <em>rdset,fd_set </em>wrest,fd_set <em>exset,struct timeval </em>timeout); 功能：检查多个文件描述符（socket描述符）是否就绪，当某一个描述符就绪（可读、可写或发生异常）时函数返回。可以实现输入输出多路复用 返回值：有描述符就绪则返回就绪的描述符个数；超时时间内没有描述符就绪返回0；执行失败返回-1。</p>
<p><strong>参数：</strong> &gt;maxfd－需要测试的描述符的最大值，实际测试的描述符从0－maxfd-1<br>
rdset－需要测试是否可读的描述符集合（包括处于listen状态的socket接收到连接请求） wrset－需要测试是否可写的描述符集合（包括以非阻塞方式调用connect是否成功）<br>
exset－需要测试是否异常的描述符集合（包括接收带外数据的socket有带外数据到达）<br>
timeout－指定测试超时的时间</p>
<p><strong>timeout参数</strong> &gt;timeval结构 timeout=NULL，select将永远阻塞直到有一个描述符就绪，或者出现错误（接收到信号）。 timeout&gt;0，在timeout时间内如果有描述符就绪则返回，否则在timeout时间后返回0；如果将3个描述符集合都设定为NULL则select相当于sleep函数，只是时间可以精确到毫秒<br>
timeout=0，select检查完描述符集合后立即返回</p>
<p><strong>设置描述符集合</strong> &gt;FD_ZERO(fd_set <em>fdset)－清空描述符集合 FD_SET(int fd,fd_set </em>fdset)－将一个描述符添加到描述符集合 FD_CLR(int fd,fd_set <em>fdset)－将一个描述符从描述符集合中清除 FD_ISSET(int fd,fd_set </em>fdset)－检测一个描述符是否就绪 在设置描述符集合前应该先调用FD_ZERO将集合清空，每次调用select函数前应该重新设置这3个集合 三个集合中的描述符可以交叉</p>
<h1 id="socket选项">socket选项</h1>
<p><strong>设置/获取socket选项函数</strong> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getsockopt</span><span class="params">(<span class="type">int</span> sockfd,<span class="type">int</span> level,<span class="type">int</span> optname,<span class="type">void</span> *optval,sock_len *optlen)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">setsockopt</span><span class="params">(<span class="type">int</span> sockfd,<span class="type">int</span> level,<span class="type">int</span> optname,<span class="type">void</span> *optval,sock_len optlen)</span>;</span><br></pre></td></tr></table></figure> &gt;功能：获取或设置socket选项 返回值： 0－成功，－1失败</p>
<p><strong>参数：</strong> &gt;sockfd－socket描述符 level－选项级别 SOL_SOCKET —通用socket选项 IPPROTO_IP—IP选项 IPPROTO_TCP—TCP选项 optname—选项名称 optval—选项值 optlen—选项值的长度/存放选项值长度的指针</p>
<p><strong>通用socket选项</strong> &gt;SO_KEEPALIVE 设置该选项后，2小时内没有数据交换时，TCP协议将自动发送探测数据包，检查网络连接 SO_RCVBUF和SO_SNDBUF 设置发送和接收数据缓冲区的大小（在连接建立以前设置） SO_RCVTIMEO和SO_SNDTIMEO 设置发送和接收超时，当指定时间内数据没有成功接收或发送，发送和接收函数将返回。 SO_REUSEADDR 快速重启服务器程序 启动服务器程序的多个实例（绑定本地IP地址的多个别名）</p>
<p><strong>阻塞/非阻塞模式</strong> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fcntl</span><span class="params">(<span class="type">int</span> fd,<span class="type">int</span> cmd,…)</span></span><br></pre></td></tr></table></figure> &gt;功能： 设置socket为阻塞/非阻塞模式 设置/获取socket的所有者 参数： fd－文件（socket）描述符 cmd－执行的操作 其他参数－根据cmd选择适当参数 返回值：≥0－成功，-1－失败</p>
<table>
<thead>
<tr class="header">
<th>操作类型</th>
<th>参数</th>
<th>返回值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>F_GETFL</td>
<td>0</td>
<td>描述符标志</td>
<td>获得描述符标志</td>
</tr>
<tr class="even">
<td>F_SETFL</td>
<td>O_NONBLOCK</td>
<td>成功0，否则-1</td>
<td>设置socket为非阻塞方式</td>
</tr>
<tr class="odd">
<td>F_GETOWN</td>
<td>int *</td>
<td>成功0，否则-1</td>
<td>获得socket的所有者</td>
</tr>
<tr class="even">
<td>F_SETOWN</td>
<td>int *</td>
<td>成功0，否则-1</td>
<td>设置socket的所有者</td>
</tr>
</tbody>
</table>
<p>非阻塞方式 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fcntl(socket_fd,F_SETFL,fcntl(socket_fd,F_GETFL,<span class="number">0</span>)|O_NONBLOCK);</span><br></pre></td></tr></table></figure> 阻塞方式 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">fcntl(socket_fd,F_SETFL,fcntl(socket_fd,F_GETFL,<span class="number">0</span>)&amp;^O_NONBLOCK);</span><br></pre></td></tr></table></figure></p>
<p><strong>控制输入输出</strong> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ioctl</span><span class="params">(<span class="type">int</span> fd,<span class="type">int</span> req,…)</span>;</span><br></pre></td></tr></table></figure> &gt;功能：控制输入输出 参数： fd－文件（socket）描述符 req－执行的操作类型 第三个参数－总是指针类型，存储操作返回的数据或操作所需的数据 返回值：0－成功，-1－失败</p>
<table>
<thead>
<tr class="header">
<th>操作类型</th>
<th>参数类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>SIOCATMARK</td>
<td>int*</td>
<td>是否到达带外标志</td>
</tr>
<tr class="even">
<td>FIOASYNC</td>
<td>int*</td>
<td>异步输入/输出标志</td>
</tr>
<tr class="odd">
<td>FIONREAD</td>
<td>int*</td>
<td>缓冲区中有多少字节数据可读</td>
</tr>
</tbody>
</table>
<h1 id="udp-socket编程">UDP Socket编程</h1>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>* <span class="title">saddrp</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> <span class="type">const</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//创建socket</span></span><br><span class="line">     <span class="type">int</span> sockfd = socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>);</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">0</span> &gt; sockfd)</span><br><span class="line">     &#123;</span><br><span class="line">          perror(<span class="string">&quot;sockfd&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//准备地址</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span> =</span> &#123;&#125;;</span><br><span class="line">     addr.sin_family = AF_INET;<span class="comment">//ipv4</span></span><br><span class="line">     addr.sin_port = htons(<span class="number">5577</span>);<span class="comment">//端口号</span></span><br><span class="line">     addr.sin_addr.s_addr = inet_addr(<span class="string">&quot;192.168.2.177&quot;</span>);<span class="comment">//我的ip地址</span></span><br><span class="line">     <span class="comment">//绑定</span></span><br><span class="line">     <span class="type">int</span> ret = bind(sockfd,(saddrp)&amp;addr,<span class="keyword">sizeof</span>(addr));</span><br><span class="line">     <span class="keyword">if</span> (<span class="number">0</span> &gt; ret)</span><br><span class="line">     &#123;</span><br><span class="line">          perror(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">src_addr</span> =</span>&#123;&#125;;</span><br><span class="line">     <span class="type">socklen_t</span> addr_len = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> sockaddr_in);</span><br><span class="line">     <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">     &#123;</span><br><span class="line">          <span class="type">char</span> buf[<span class="number">255</span>] = &#123;&#125;;</span><br><span class="line">          <span class="comment">//接收数据和来源的ip地址</span></span><br><span class="line">          recvfrom(sockfd,buf,<span class="keyword">sizeof</span>(buf),<span class="number">0</span>,(saddrp)&amp;src_addr,&amp;addr_len);</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Recv:%s\n&quot;</span>,buf);</span><br><span class="line">          <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(buf,<span class="string">&quot;q&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">          <span class="comment">//发送数据给目标地址</span></span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Please input the return value:&quot;</span>);</span><br><span class="line">          gets(buf);</span><br><span class="line">          sendto(sockfd,buf,<span class="built_in">strlen</span>(buf)+<span class="number">1</span>,<span class="number">0</span>,(saddrp)&amp;src_addr,addr_len);</span><br><span class="line">          <span class="keyword">if</span> (<span class="number">0</span> == <span class="built_in">strcmp</span>(buf,<span class="string">&quot;q&quot;</span>)) <span class="keyword">break</span>;</span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="comment">//关闭socket对象</span></span><br><span class="line">     close(sockfd);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="原始socket编程">原始socket编程</h1>
<p><strong>创建原始socket</strong> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">socket</span> <span class="params">(<span class="type">int</span> family, <span class="type">int</span> type, <span class="type">int</span> protocol)</span></span><br></pre></td></tr></table></figure> &gt;参数： family－AF_INET type－SOCK_RAW protocol IPPROTO_ICMP－ICMP数据包 IPPROTO_IGMP－IGMP数据包 IPPROTO_IP－IP数据包 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">send_icmp</span><span class="params">(<span class="type">int</span> sockfd,sockaddr_in send_addr)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">static</span> <span class="type">short</span> <span class="type">int</span> seq=<span class="number">0</span>;</span><br><span class="line">     <span class="type">char</span> buf[<span class="number">8</span>+<span class="number">8</span>];</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">icmphdr</span> *<span class="title">icmp</span>=</span>(<span class="keyword">struct</span> icmphdr *)buf;</span><br><span class="line">     icmp-&gt;type=ICMP_ECHO;</span><br><span class="line">     icmp-&gt;code=<span class="number">0</span>;</span><br><span class="line">     icmp-&gt;checksum=CHECK_SUM;</span><br><span class="line">     icmp-&gt;un.echo.id=getpid();</span><br><span class="line">     icmp-&gt;un.echo.sequence=seq++;</span><br><span class="line">     <span class="type">int</span> len=send(sockfd,buf,buflen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">recv_icmp</span><span class="params">(<span class="type">int</span> sockfd,sockaddr_in send_addr)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="type">char</span> buf[<span class="number">256</span>];</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">icmphdr</span> *<span class="title">icmp</span>;</span></span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">ip</span> *<span class="title">ip</span>;</span></span><br><span class="line">     <span class="type">int</span> ipheadlen;</span><br><span class="line">     <span class="type">int</span> icmplen;</span><br><span class="line">     <span class="type">int</span> n=recvfrom(sockfd,buf,<span class="keyword">sizeof</span>(buf),<span class="number">0</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>);</span><br><span class="line">     <span class="keyword">if</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;recv error&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     ip=(<span class="keyword">struct</span> ip *)buf;	</span><br><span class="line">     ipheadlen=ip-&gt;ip_hl&lt;&lt;<span class="number">2</span>;</span><br><span class="line">     icmplen=n-ipheadlen;</span><br><span class="line">     icmp=(<span class="keyword">struct</span> icmphdr *)(buf+ipheadlen);</span><br><span class="line">     <span class="keyword">if</span>(icmp-&gt;type==ICMP_ECHOREPLY)</span><br><span class="line">          <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;recv from &quot;</span>&lt;&lt;inet_ntoa(send_addr.sin_addr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Socket</tag>
        <tag>Linux</tag>
        <tag>NOTE</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>组合数学</title>
    <url>/2022/09/28/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<p>学习总结 <span id="more"></span></p>
<h1 id="第一章">第一章</h1>
<h2 id="加法法则和乘法法则">加法法则和乘法法则</h2>
<h2 id="一一对应">一一对应</h2>
<p>例：100位选手要选出1位冠军，要举行多少场比赛？</p>
<blockquote>
<p>一场比赛淘汰一人，淘汰99人则要打99场。</p>
</blockquote>
<h2 id="排列组合">排列组合</h2>
<p>例：五位数中，至少出现一个6，而且被3整除的数有多少个？</p>
<blockquote>
<p>五位数中被3除尽的有30000个；<br>第1位不出现6有8种可能（12345789），<br>第2，3，4位不出现6有9种可能（012345789）；<br>想要被3除尽且不含6，则前四位相加后余数为0，1，2时，第5位分别为（039），（258），（147），都是3种可能。<br> 则<span class="math inline">\(8*9^3*3=17496\)</span></p>
</blockquote>
<h2 id="圆周排列">圆周排列</h2>
<p><span class="math display">\[Q(n,r)=P(n,r)/r\]</span></p>
<h2 id="排列生成算法">排列生成算法</h2>
<h3 id="序数法">序数法</h3>
<p>设整数为<span class="math inline">\(n\)</span>，<span class="math inline">\(k! &lt; n &lt; (k+1)!\)</span> <span class="math display">\[ n-1 = a_k*k!+...+a_1 \]</span> <span class="math inline">\(a_ka_{k-1}...a1\)</span>为<span class="math inline">\(n\)</span>的序数</p>
<blockquote>
<p>排列：以4213为例，4的右边比它小的有3个，则<span class="math inline">\(a_3=3\)</span>；3的右边比它小的有0个，则<span class="math inline">\(a_2=0\)</span>；2的右边比它小的有1个，则<span class="math inline">\(a_1=1\)</span>。于是排列(4213)对应的序数(301)</p>
</blockquote>
<h3 id="字典序法">字典序法</h3>
<p>设序列为<span class="math inline">\(p_1p_2...p_k\)</span>,则该序列的下一排列为</p>
<ol type="1">
<li>从右往左找首次出现<span class="math inline">\(p_j&gt;p_{j-1}\)</span>情况</li>
<li>从右往左找到首个大于<span class="math inline">\(p_{j-1}\)</span>的数，并于<span class="math inline">\(p_{j-1}\)</span>交换</li>
<li>将<span class="math inline">\(p_j...p_k\)</span>顺序逆转（例：1234变4321）</li>
</ol>
<blockquote>
<p>3421的下一排列为4123</p>
</blockquote>
<h3 id="换位法">换位法</h3>
<blockquote>
<p>优先活动大值，没有数处于活动状态结束</p>
</blockquote>
<h2 id="section"></h2>
<p>允许重复组合（线性方程整数解） <span class="math display">\[C(n+r-1,r)\]</span></p>
<p>不相邻的组合 <span class="math display">\[C(n-r+1,r)\]</span></p>
<h1 id="第二章-递推关系与母函数">第二章 递推关系与母函数</h1>
<p><span class="math display">\[
C(n,0)+C(n,1)+...+C(n,n) = 2^n
\]</span> <span class="math display">\[
C(n, 1) + 2C(n, 2) +...+nC(n, n) = n2^{n-1}
\]</span></p>
<h2 id="母函数定义">母函数定义</h2>
<p>对于序列<span class="math inline">\(C_0,C_1,...\)</span>构造一函数 <span class="math display">\[
G(x) = C_0 + C_1x + C_2x^2 + ...
\]</span> 称G(x)为序列<span class="math inline">\(C_0,C_1,...\)</span>的母函数</p>
<blockquote>
<p><span class="math inline">\((1 + x) ^ n\)</span>是序列<span class="math inline">\(C(n,0),C(n,1),...,C(n,n)\)</span>的母函数</p>
</blockquote>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>NOTE|人工智能</title>
    <url>/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
    <content><![CDATA[<p><strong>人工智能简单的笔记</strong> <strong>ψ(｀∇´)ψ</strong> <span id="more"></span> # 第一章 绪论 ## 什么是人工智能？ 1. <strong>智能机器</strong>： 能够在各类环境中自主地或交互地执行各种拟人任务的机器。 2. <strong>人工智能(学科)</strong>： 人工智能(学科)是计算机科学中涉及研究、设计和应用智能机器的一个分支。它的近期主要目标在于研究用机器来模仿和执行人脑的某些智力功能，并开发相关理论和技术。 3. <strong>人工智能(能力)</strong>： 人工智能(能力)是智能机器所执行的通常与人类智能有关的智能行为，如判断、推理、证明、识别、感知、理解、通信、设计、思考、规划、学习和问题求解等思维活动。 ## 人工智能有哪些学派？ <strong>符号主义</strong>：以知识的符号表达为基础，通过推理进行问题求解 <strong>连接主义</strong>：认为人的思维基元是神经元，而不是符号处理过程 <strong>行为主义</strong>：主张从行为方面模拟、延伸、扩展人的智能，认为“智能”可以不需要“知识”</p>
<h1 id="第二章-知识表示方法">第二章 知识表示方法</h1>
<h2 id="什么是知识">什么是知识</h2>
<ol type="1">
<li>数据与信息： 数据是信息的载体和表示；信息是数据的语义。</li>
<li>知识： 一般来说，把有关信息关联在一起所形成的信息结构称为知识。 ## 一些重要的等价式 <img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/1.png" alt="1"> ## 一些重要的永真蕴含式 <img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/2.png" width="80%" height="60%" div align="center/"> ## 状态空间的搜索策略 <img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/3.png" alt="1"> ### 搜索策略</li>
</ol>
<ul>
<li>广度优先搜索按照“先扩展出的节点先被考察”的原则进行搜索；</li>
<li>深度优先搜索按照“后扩展出的节点先被考察”的原则进行搜索；</li>
<li>有界深度优先搜索的原则与深度优先搜索相同，但是它规定了深度限界，使搜索不得无限制地向纵深方向发展；</li>
<li>代价树的广度优先搜索按照“哪个节点到根节点的代价小就先考察哪个节点”的原则进行搜索；</li>
<li>代价树的深度优先搜索按照“当前节点的哪个子节点到其父节点的代价小就先考察哪个子节点”的原则进行搜索；</li>
<li>局部择优搜索按照“当前节点的哪个子节点到目标节点的估计代价小就先考察哪个子节点”的原则进行搜索；</li>
<li>全局择优搜索按照“哪个节点到目标节点的估计代价小就先考察哪个节点”的原则进行搜索</li>
</ul>
<p>以重排九宫为例 ## 盲目搜索 ### 广度优先搜索 <img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/4.png" alt="4"> &gt;优点： 只要问题有解，用广度优先搜索总可以得到解，而且得到的是路径最短的解。 缺点： 广度优先搜索盲目性较大，当目标节点距初始节点较远时将会产生许多无用节点，搜索效率低。</p>
<h3 id="深度优先搜索">深度优先搜索</h3>
<p><img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/5.png" alt="5"> &gt;1.在深度优先搜索中，搜索一旦进入某个分支，就将沿着该分支一直向下搜索。如果目标节点恰好在此分支上，则可较快地得到解。但是，如果目标节点不在此分支上，而该分支又是一个无穷分支，则就不可能得到解。所以深度优先搜索是不完备的，即使问题有解，它也不一定能求得解。 2.用深度优先求得的解，不一定是路径最短的解。 3.本质：以初始节点为根节点，在状态空间图中按照深度优先的原则，生成一棵搜索树。</p>
<h3 id="有界深度优先搜索">有界深度优先搜索</h3>
<p><img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/6.png" alt="6"> &gt;1.如果问题有解，且其路径长度≤dm，则上述搜索过程一定能求得解。但是，若解的路径长度&gt;dm,则上述搜索过程就得不到解。这说明在有界深度优先搜索中，深度界限的选择是很重要的。 2.要恰当地给出dm的值是比较困难的。即使能求出解，它也不一定是最优解。</p>
<h3 id="代价树">代价树</h3>
<p>上标有代价(或费用)的树称为代价树。</p>
<p>用g(x)表示从初始节点S0到节点x的代价，用c(x1,x2)表示从父节点x1到子节点x2的代价，则有： <span class="math display">\[g(x_2)=g(x_1)+c(x_1,x_2)\]</span></p>
<h3 id="代价树的广度优先搜索">代价树的广度优先搜索</h3>
<p><strong>搜索过程</strong> 1. 把初始节点S0放入OPEN表，令g(S0)=0。 2. 如果OPEN表为空，则问题无解，退出。 3. 把OPEN表的第一个节点（记为节点n）取出放入CLOSE表。 4. 考察节点n是否为目标节点。若是，则求得了问题的解，退出。 5. 若节点n不可扩展，则转第2步。 6. 扩展节点n，为每一个子节点都配置指向父节点的指针，并将各子节点放入OPEN表中；计算各子节点的代价，按各节点的代价对OPEN表中的全部节点进行排序(按从小到大的顺序)，然后转第2步</p>
<h3 id="代价树的深度优先搜索">代价树的深度优先搜索</h3>
<p><strong>搜索过程</strong> 1. 把初始节点S0放入OPEN表，令g(S0)=0。 2. 如果OPEN表为空，则问题无解，退出。 3. 把OPEN表的第一个节点（记为节点n）取出放入CLOSE表。 4. 考察节点n是否为目标节点。若是，则求得了问题的解，退出。 5. 若节点n不可扩展，则转第2步。 6. 扩展节点n，将其子节点按“边”代价从小到大的顺序放到OPEN表中的首部，并为每一个子节点都配置指向父节点的指针，然后转第2步。 &gt;代价树的深度优先搜索是不完备的。</p>
<h2 id="启发式搜索">启发式搜索</h2>
<p>盲目搜索具有较大的盲目性，产生的无用节点较多，效率不高。</p>
<p>启发式搜索采用问题自身的特性信息，以指导搜索朝着最有希望的方向前进。这种搜索针对性较强，因而效率较高</p>
<h3 id="启发性信息与估价函数">启发性信息与估价函数</h3>
<p>可用于指导搜索过程，且与具体问题有关的信息称为启发性信息。 用于评估节点重要性的函数称为估价函数。其一般形式为： <span class="math display">\[f(x) = g(x)+h(x)\]</span> &gt;其中g(x)表示从初始节点S0到节点x的代价；h(x)是从节点x到目标节点Sg的最优路径的代价的估计，它体现了问题的启发性信息，称为启发函数。 f(x) 决定节点在OPEN表中的次序。 g(x) 指出了搜索的横向趋势，有利于搜索的完备性，但影响搜索的效率。 h(x)指出了搜索的纵向趋势，有利于提高搜索的效率，但影响搜索的完备性。</p>
<h3 id="局部择优搜索">局部择优搜索</h3>
<p>局部择优搜索是一种启发式搜索方法，是对深度优先搜索方法的一种改进。 基本思想：当一个节点被扩展以后，按f(x)对每一个子节点计算估价值，并选择最小者作为下一个要考察的节点。</p>
<p><strong>搜索过程</strong> 1. 把初始节点S0放入OPEN表，计算f(S0)。 2. 如果OPEN表为空，则问题无解，退出。 3. 把OPEN表的第一个节点（记为节点n）取出放入CLOSE表。 4. 考察节点n是否为目标节点。若是，则求得了问题的解，退出。 5. 若节点n不可扩展，则转第2步。 6. 扩展节点n，用估价函数f(x)计算每个子节点的估价值，并按估价值从小到大的顺序放到OPEN表中的首部，并为每一个子节点都配置指向父节点的指针，然后转第2步。</p>
<blockquote>
<p>在局部择优搜索中，若令f(x) = g(x)，则局部择优搜索就成为代价树的深度优先搜索。 在局部择优搜索中，若令f(x) =d(x)，这里d(x) 表示节点x的深度，则局部择优搜索就成为深度优先搜索。 因此：深度优先搜索、代价树的深度优先搜索均为局部择优搜索的特例</p>
</blockquote>
<h3 id="全局择优搜索">全局择优搜索</h3>
<p>每当要选择下一个节点进行考察时，全局择优搜索每次总是从OPEN表的全体节点中选择一个估价值最小的节点。 <strong>搜索过程</strong> 1. 把初始节点S0放入OPEN表，计算f(S0)。 2. 如果OPEN表为空，则问题无解，退出。 3. 把OPEN表的第一个节点（记为节点n）取出放入CLOSE表。 4. 考察节点n是否为目标节点。若是，则求得了问题的解，退出。 5. 若节点n不可扩展，则转第2步。 6. 扩展节点n，用估价函数f(x)计算每个子节点的估价值，并为每一个子节点都配置指向父节点的指针。把这些子节点都送入OPEN表中，然后对OPEN表中的全部节点按估价值从小至大的顺序进行排序，然后转第2步。</p>
<blockquote>
<p>在全局择优搜索中，若令f(x) = g(x)，则它就成为代价树的广度优先搜索。 在全局择优搜索中，若令f(x) =d(x)，这里d(x) 表示节点x的深度，则它就成为广度优先搜索。 因此：广度优先搜索、代价树的广度优先搜索是全局择优搜索的两个特例。</p>
</blockquote>
<p><strong>例子</strong> 设估价函数为 f(x)=d(x)+h(x)，其中，d(x)表示节点x的深度，h(x)表示节点x的格局与目标节点格局不相同的牌数。 <img src="/2019/06/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/7.png" alt="7"></p>
<h1 id="第三章">第三章</h1>
<h2 id="变量代换">变量代换</h2>
<p>代换是一个形如<span class="math inline">\(\{t_1/x_1,t_2/x_2,…,t_n/x_n\}\)</span>的有限集合。 其中<span class="math inline">\(t_1,t_2,…,t_n\)</span>是项（常量、变量、函数）;<span class="math inline">\(x_1,x_2,…,x_n\)</span>是（某一公式中）互不相同的变元； <span class="math inline">\(t_i/x_i\)</span>表示用<span class="math inline">\(t_i\)</span>代换<span class="math inline">\(x_i\)</span> 不允许<span class="math inline">\(t_i\)</span>与<span class="math inline">\(x_i\)</span>相同，也不允许变元<span class="math inline">\(x_i\)</span>循环地出现在另一个<span class="math inline">\(t_j\)</span>中。 &gt;例如： {a/x,f(b)/y,w/z}是一个代换 {g(y)/x,f(x)/y}不是代换 {g(a)/x,f(x)/y}是代换</p>
<h2 id="代换的复合">代换的复合</h2>
<p>定义 设 <span class="math inline">\(\theta=\{t_1/x_1,t_2/x_2,\cdots,t_n/x_n\}\)</span> <span class="math inline">\(\lambda=\{u_1/y_1,u_2/y_2,\cdots,u_m/y_m\}\)</span> 是两个代换 则这两个代换的复合也是一个代换，它是从 <span class="math display">\[\{t_1\lambda/x_1,t_2\lambda/x_2,\cdots,t_n\lambda/x_n,u_1/y_1,u_2/y_2,\cdots,u_m/y_m\}\]</span> 中删去如下两种元素： <span class="math inline">\(t_i\lambda/x_i \quad 当t_i\lambda=x_i\)</span> <span class="math inline">\(u_i/y_i \quad 当y_i\in\{x_1,x_2,\cdots,x_n\}\)</span> 后剩下的元素所构成的集合，记为θ°λ &gt;(1) <span class="math inline">\(t_i\lambda\)</span>表示对<span class="math inline">\(t_i\)</span>运用λ进行代换。 (2)θ°λ就是对一个公式F先运用θ进行代换，然后再运用λ进行代换：F(θ°λ)=（F θ）λ</p>
<h2 id="最一般合一">最一般合一</h2>
<ul>
<li>F={P(a,x,f(g(y))),P(z,f(z),f(u))}</li>
<li>求其最一般合一的过程：</li>
<li>令F0=F, σ0=ε。 F0中有两个表达式，所以σ0不是最一般合一。 差异集：D0={a,z}。代换： {a/z} F1= F0 {a/z}={P(a,x,f(g(y))),P(a,f(a),f(u))} 。 σ1=σ0°{a/z}={a/z} D1={x,f(a)} 。代换： {f(a)/x} F2=F1{f(a)/x}={P(a,f(a),f(g(y))),P(a,f(a),f(u))} 。 σ2=σ1°{f(a)/x}={a/z,f(a)/x} D2={g(y),u} 。代换： {g(y)/u} F3=F2{g(y)/u}={P(a,f(a),f(g(y))),P(a,f(a),f(g(y)))} 。 σ3=σ2°{g(y)/u}={a/z,f(a)/x,g(y)/u}</li>
</ul>
<h2 id="子句集">子句集</h2>
<p>定义： 任何文字的析取式称为子句 (1) 合取范式：C1 ∧C2 ∧C3… ∧Cn (2) 子句集: S= {C1 ,C2 ,C3… ,Cn} (3)任何谓词公式F都可通过等价关系及推理规则化为相应的子句集S ### 把谓词公式化成子句集 1. 利用等价关系消去“→”和“↔︎” 例如公式 <span class="math inline">\((\forall x)((\forall y) P(x, y) \rightarrow \neg(\forall y)(Q(x, y) \rightarrow R(x, y)))\)</span> 可等价变换成 <span class="math inline">\((\forall x)(\neg(\forall y) P(x, y) \vee \neg(\forall y)(\neg Q(x, y) \vee R(x, y)))\)</span> 2. 利用等价关系把“¬”移到紧靠谓词的位置上 上式经等价变换后 <span class="math inline">\((\forall x)((\exists y) \neg P(x, y) \vee(\exists y)(Q(x, y) \wedge \neg R(x, y)))\)</span> 3. 重新命名变元，使不同量词约束的变元有不同的名字 上式经变换后 <span class="math inline">\((\forall x)((\exists y) \neg P(x, y) \vee(\exists z)(Q(x, z) \wedge \neg R(x, z)))\)</span> 4. 消去存在量词 a.存在量词前面没有全称量词时，则只要用一个新的个体常量替换受该量词约束的变元。 b.存在量词前面有一个或者多个全称量词时，要用函数f(x1,x2,…,xn)替换受该存在量词约束的变元。 上式中存在量词(<span class="math inline">\(\exists y\)</span>)及(<span class="math inline">\(\exists z\)</span>)都位于(<span class="math inline">\(\forall x\)</span>)的后面，所以需要用函数替换，设替换y和z的函数分别是f(x)和g(x)，则替换后得到 <span class="math inline">\((\forall x)(\neg P(x, f(x)) \vee(Q(x, g(x)) \wedge \neg R(x, g(x))))\)</span> 5. 把全称量词全部移到公式的左边 <span class="math inline">\((\forall x)(\neg P(x, f(x)) \vee(Q(x, g(x)) \wedge \neg R(x, g(x))))\)</span> 6. 利用等价关系把公式化为Skolem标准形 <span class="math inline">\(P \vee(Q \wedge R) \Leftrightarrow(P \vee Q) \wedge(P \vee R)\)</span> Skolem标准形的一般形式是 <span class="math inline">\(\left(\forall x_{1}\right)\left(\forall x_{2}\right) \cdots\left(\forall x_{n}\right) M\)</span> 其中，M是子句的合取式，称为Skolem标准形的母式。 上式化为Skolem标准形后得到 <span class="math inline">\((\forall x)((\neg P(x, f(x)) \vee Q(x, g(x))) \wedge(\neg P(x, f(x)) \vee \neg R(x, g(x))))\)</span> 7. 消去全称量词 8. 对变元更名，使不同子句中的变元不同名 <span class="math inline">\((\neg P(x, f(x)) \vee Q(x, g(x))) \wedge(\neg P(y, f(y)) \vee \neg R(y, g(y)))\)</span> 9. 消去合取词，就得到子句集 <span class="math inline">\(\neg P(x, f(x)) \vee Q(x, g(x))\)</span> <span class="math inline">\(\neg P(y, f(y)) \vee \neg R(y, g(y))\)</span></p>
<h2 id="海伯伦理论herbrand">海伯伦理论（Herbrand）</h2>
<p>为了判断子句集的不可满足性，需要对所有可能论域上的所有解释进行判定。只有当子句集对任何非空个体域上的任何一个解释都是不可满足的时候，才可断定该子句集是不可满足的。</p>
<h2 id="鲁滨逊归结原理">鲁滨逊归结原理</h2>
<h3 id="子句集s的不可满足性">子句集S的不可满足性：</h3>
<p>对于任意论域中的任意一个解释，S中的子句不能同时取得真值T。一旦S中包含空子句，则S必不可满足。<br>
### 基本思想： 检查子句集S中是否包含空子句。若包含，则S不可满足；若不包含，就在子句集中选择合适的子句进行归结，一旦通过归结能推出空子句，就说明子句集S是不可满足的。</p>
<h2 id="归结反演的步骤">归结反演的步骤</h2>
<p>设F为已知前提的公式集，Q为目标公式(结论)，用归结反演证明Q为真的步骤是： 1. 否定Q，得到¬Q； 2. 把¬Q并入到公式集F中，得到{F, ¬Q}; 3. 把公式集{F, ¬Q}化为子句集S； 4. 应用归结原理对子句集S中的子句进行归结，并把每次归结得到的归结式都并入S中。如此反复进行，若出现了空子句，则停止归结，此时就证明了Q为真。</p>
<h2 id="应用归结原理求取问题的答案">应用归结原理求取问题的答案</h2>
<h3 id="求解的步骤">求解的步骤：</h3>
<ol type="1">
<li>把已知前提用谓词公式表示出来，并且化为相应的子句集。设该子句集的名字为S。</li>
<li>把待求解的问题也用谓词公式表示出来，然后把它否定并与谓词Answer构成析取式。Answer是一个为了求解问题而专设的谓词，其变元须与问题公式的变元完全一致。</li>
<li>把此析取式化为子句集，并且把该子句集并入到子句集S中，得到子句集S’。</li>
<li>对S’应用归结原理进行归结。</li>
<li>若得到归结式Answer，则答案就在Answer中。</li>
</ol>
<h1 id="第四章">第四章</h1>
<h2 id="可信度方法">可信度方法</h2>
<p><strong>概念</strong> * 根据经验对一个事物和现象为真的相信程度称为可信度。 * 在可信度方法中，由专家给出规则或知识的可信度，从而可避免对先验概率、条件概率的要求。 * 可信度方法首先在专家系统MYCIN中得到了成功的应用。</p>
<h2 id="c-f模型">C-F模型</h2>
<h3 id="组合证据不确定性的算法">组合证据不确定性的算法</h3>
<p>可采用最大最小法。 若<span class="math inline">\(\mathrm{E}=\mathrm{E}_{1} \text { AND } \mathrm{E}_{2} \text { AND } \ldots \text { AND } \mathrm{E}_{\mathrm{n}}\)</span>，则 <span class="math display">\[\mathrm{CF}(\mathrm{E})=\min \left\{\mathrm{CF}\left(\mathrm{E}_{1}\right), \mathrm{CF}\left(\mathrm{E}_{2}\right), \ldots, \mathrm{CF}\left(\mathrm{E}_{n}\right)\right\}\]</span> 若<span class="math inline">\(\mathrm{E}=\mathrm{E}_{1} \text { OR } \mathrm{E}_{2} \text { OR } \ldots \text { OR } \mathrm{E}_{\mathrm{n}}\)</span>，则 <span class="math display">\[\mathrm{CF}(\mathrm{E})=\max \left\{\mathrm{CF}\left(\mathrm{E}_{1}\right), \mathrm{CF}\left(\mathrm{E}_{2}\right), \ldots, \mathrm{CF}\left(\mathrm{E}_{\mathrm{n}}\right)\right\}\]</span></p>
<h3 id="结论不确定性的合成算法">结论不确定性的合成算法</h3>
<p>若由多条不同知识推出了相同的结论，但可信度不同，则用合成算法求出综合可信度。 设有如下知识： IF <span class="math inline">\(\quad \mathrm{E}_{1} \quad\)</span> THEN <span class="math inline">\(\quad \mathrm{H} \quad\left(\mathrm{CF}\left(\mathrm{H}, \mathrm{E}_{1}\right)\right)\)</span> IF <span class="math inline">\(\quad \mathrm{E}_{2} \quad\)</span> THEN <span class="math inline">\(\quad \mathrm{H} \quad\left(\mathrm{CF}\left(\mathrm{H}, \mathrm{E}_{2}\right)\right)\)</span> 则结论H的综合可信度分如下两步算出： 首先分别对每一条知识求出<span class="math inline">\(CF(H)\)</span>: 计算<span class="math inline">\(CF_1(H)\)</span>,<span class="math inline">\(CF_2(H)\)</span> 然后用下述公式求出E1与E2对H的综合可信度<span class="math inline">\(CF_{12}(H)\)</span>: <span class="math display">\[P(H | S)=\left\{\begin{array}{ll}{C F_{1}(H)+C F_{2}(H)-C F_{1}(H) \times C F_{2}(H), C F_{1}(H) \geq 0, C F_{2}(H) \geq 0}\\ {C F_{1}(H)+C F_{2}(H)+C F_{1}(H) \times C F_{2}(H), C F_{1}(H)&lt;0, C F_{2}(H)&lt;0}\\{\frac{C F_{1}(H)+C F_{2}(H)}{1-\min \left\{\left|C F_{1}(H)\right|, C F_{2}(H) |\right\}} \qquad, C F_{1}(H) \times C F_{2}(H)&lt;0}\end{array}\right.\]</span></p>
<h4 id="例题">例题</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例 设有如下一组知识：</span><br><span class="line">R1: IF	E1	THEN		H	(0.8)</span><br><span class="line">R2: IF	E2	THEN		H	(0.6)</span><br><span class="line">R3: IF	E3	THEN		H	(-0.5)</span><br><span class="line">R4: IF	E4 AND (E5 OR E6)	THEN		E1	(0.7)</span><br><span class="line">R5: IF	E7 AND E8 THEN		E3	(0.9)</span><br><span class="line">已知：CF(E2)=0.8, CF(E4)=0.5, CF(E5)=0.6</span><br><span class="line">		CF(E6)=0.7, CF(E7)=0.6, CF(E8)=0.9</span><br><span class="line">求：CF(H)=？</span><br><span class="line">解：由R4得到：</span><br><span class="line">CF(E1)=0.7×max&#123;0,CF[E4 AND (E5 OR E6)]&#125;</span><br><span class="line">	   =0.7×max&#123;0,min&#123;CF(E4),CF(E5 OR E6)&#125;&#125;</span><br><span class="line">	   =0.35</span><br><span class="line">由R5得到：</span><br><span class="line">CF(E3)=0.9×max&#123;0,CF[E7 AND E8]&#125;</span><br><span class="line">	   =0.54</span><br><span class="line">由R1得到：</span><br><span class="line">CF1(H)=0.8×max&#123;0,CF(E1)&#125;=0.28</span><br><span class="line">由R2得到：</span><br><span class="line">CF2(H)=0.6×max&#123;0,CF(E2)&#125;=0.48</span><br><span class="line">由R3得到：</span><br><span class="line">CF3(H)=-0.5×max&#123;0,CF(E3)&#125;=-0.27</span><br><span class="line">根据结论不确定性的合成算法：</span><br><span class="line">CF12(H)=CF1(H)+CF2(H)-CF1(H)×CF2(H)=0.63</span><br><span class="line">CF123(H)=[CF12(H)+CF3(H)]/[1-min&#123;|CF12(H)|,|CF3(H)|&#125;]</span><br><span class="line">		  =0.49</span><br><span class="line">即最终的综合可信度为CF(H)=0.49。</span><br></pre></td></tr></table></figure>
<h3 id="加权的不确定性推理">加权的不确定性推理</h3>
<p>若有<span class="math inline">\(CF(E_1)，CF(E_2)，…，CF(E_n)\)</span>，则组合证据的可信度为： <span class="math display">\[C F(E)=\sum_{i=1}^{n}\left(\omega_{i} \times C F\left(E_{i}\right)\right)\]</span> #### 例题 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例设有如下知识：</span><br><span class="line">R1: IF E1(0.6) AND E2(0.4) THEN E6(0.8,0.75)</span><br><span class="line">R2: IF E3(0.5) AND E4(0.3) AND E5(0.2) </span><br><span class="line">	 THEN E7(0.7,0.6)</span><br><span class="line">R3: IF E6(0.7) AND E7(0.3) THEN H(0.75,0.6)</span><br><span class="line">已知：CF(E1)=0.9, CF(E2)=0.8, CF(E3)=0.7,</span><br><span class="line">		CF(E4)=0.6, CF(E5)=0.5</span><br><span class="line">求：CF(H)=?</span><br><span class="line">解：由R1得到：</span><br><span class="line">CF(E1(0.6) AND E2(0.4))=0.86&gt;λ1=0.75</span><br><span class="line">∴R1可被应用。</span><br><span class="line">由R2得到：</span><br><span class="line">CF(E3(0.5) AND E4(0.3) AND E5(0.2))＝0.63&gt;λ2 =0.6</span><br><span class="line">∴R2可被应用。</span><br><span class="line">∵0.86&gt;0.63 </span><br><span class="line">∴R1先被应用。</span><br><span class="line">由R1得到：CF(E6)=0.69</span><br><span class="line">由R2得到：CF(E7)=0.44</span><br><span class="line">由R3得到：</span><br><span class="line">CF(E6(0.7) AND E7(0.3))=0.615&gt;λ3 =0.6</span><br><span class="line">∴R3可被应用,得到：</span><br><span class="line">CF(H)=0.46</span><br><span class="line">即最终得到的结论H可信度为0.46</span><br></pre></td></tr></table></figure></p>
<h1 id="第五章">第五章</h1>
<h2 id="扎德法推理">扎德法推理</h2>
<p>扎德提出了两种方法：一种称为条件命题的极大极小规则；另一种称为条件命题的算术规则，由它们获得的模糊关系分别记为<span class="math inline">\(R_m\)</span>和<span class="math inline">\(R_a\)</span>。 设<span class="math inline">\(A \in F(U), B \in F(V)\)</span>，其表示分别为 <span class="math display">\[A=\int_{U} \mu_{A}(u) / u \quad, B=\int_{V} \mu_{B}(u) / u\]</span></p>
<p>用<span class="math inline">\(x, \cup, \cap, \neg, \oplus\)</span>分别表示模糊集的笛卡儿乘积、并、交、补及有界和运算，则扎德把<span class="math inline">\(R_m\)</span>和<span class="math inline">\(R_a\)</span>分别定义为： <span class="math inline">\(R_{m}=(A \times B) \cup(\neg A \times V)=\int_{U \times V}\left(\mu_{A}(u) \wedge \mu_{B}(v)\right) \vee\left(1-\mu_{A}(u)\right) /(u, v)\)</span> <span class="math inline">\(R_{a}=(\neg A \times V) \oplus(U \times B)=\int_{U \times V} 1 \wedge\left(1-\mu_{A}(u)+\mu_{B}(v)\right) /(u, v)\)</span></p>
<h3 id="例子">例子</h3>
<p>例 设<span class="math inline">\(\mathbf{U}=\mathbf{V}=\{1,2,3,4,5\}, \mathbf{A}=\mathbf{1} / 1+0.5 / 2, \mathbf{B}=0.4 / 3+0.6 / 4+1 / 5\)</span> 并设模糊知识及模糊证据分别为： <span class="math display">\[ \text { IF }x \text { is A THEN } y \text { is } B \quad x \text { is } A^{\prime}\]</span> 其中，$ A<sup>{}<span class="math inline">\(的模糊集为：\)</span></sup>{}= / + .4 / 2+ .2 / 3$ 则由模糊知识可分别得到<span class="math inline">\(R_m\)</span>和<span class="math inline">\(R_a\)</span>： <span class="math inline">\(R_{m}=\left[\begin{array}{ccccc}{0} &amp; {0} &amp; {0.4} &amp; {0.6} &amp; {1} \\ {0.5} &amp; {0.5} &amp; {0.5} &amp; {0.5} &amp; {0.5} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1}\end{array}\right], R_{a}=\left[\begin{array}{ccccc}{0} &amp; {0} &amp; {0.4} &amp; {0.6} &amp; {1} \\ {0.5} &amp; {0.5} &amp; {0.9} &amp; {1} &amp; {1} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1} \\ {1} &amp; {1} &amp; {1} &amp; {1} &amp; {1}\end{array}\right]\)</span> 则 <span class="math inline">\(\mathbf{B}_{\mathrm{m}}^{\prime}=\mathbf{A}^{\prime} \circ \mathbf{R}_{\mathrm{m}}=\{0.4,0.4,0.4,0.6,1\}\)</span> <span class="math inline">\(\mathbf{B}_{\mathrm{a}}^{\prime}=\mathbf{A}^{\prime} \circ \mathbf{R}_{\mathrm{a}}=\{0.4,0.4,0.4,0.6,1\}\)</span></p>
]]></content>
      <tags>
        <tag>NOTE</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA|RPC/RMI-书籍信息管理系统</title>
    <url>/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p><strong>使用RPC/RMI实现书籍信息管理系统及Web Service改写</strong> <span id="more"></span> # 基本原理 ## RPC 远程过程调用(Remote Procedure Call): 使应用程序可以像调用本地节点上的过程(子程序) 那样去调用一个远程节点上的子程序。 * 对于被调用者而言也无法区分调用者来自于本地还是远程 * RPC将面向过程的通用编程模型扩展到了分布式环境。 * 实现了跨进程、跨语言、跨网络、跨平台的过程调用 * 强化了面向接口编程的编程风格 * 实现RPC必须要有RPC中间件的支持。</p>
<p><strong>RPC一般采用同步调用方式</strong> <img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/1.png" alt="RPC"> ## RMI 远程方法调用(Remote Method Invocation): 将面向对象的编程模型扩展到了分布式环境。 * RMI使应用程序可以像调用本机上对象的方法一样调用远程主机中对象的方法。 * 利用RMI调用一个远程对象方法时，参数可以是一个本地对象，也可以是另外一个远程对象(可能存在于第三个节点)。 * 在整个系统范围内支持垃圾回收。 * 实现RMI也必须要有中间件的支持。</p>
<h2 id="中间件">中间件</h2>
<h3 id="实现原理">实现原理</h3>
<ul>
<li>RPC/RMI中间件在调用者进程中植入stub模块，stub模块作为远程过程的本地代理，并且暴露与远程过程相同的接口。</li>
<li>RPC/RMI中间件在被调用者进程中植入skeleton模块，skeleton作为调用者在远程主机中的代理。</li>
<li>stub模块与skeleton模块利用Socket进行通信。</li>
<li>skeleton模块相当于Client-Server通信模式中的服务器端，要先于客户端运行，并且在某个Socket端口进行监听。 <img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/2.png" alt="中间件"></li>
</ul>
<h3 id="作用">作用</h3>
<ul>
<li>定义并利用Socket服务接口实现了一套调用者和被调用者之间的通信协议。(远程过程调用协议)。例如Java RMI的Java Remote Method Protocol (JRMP)</li>
<li>实现了过程参数的序列化、反序列化；过程运算结果的序列化、反序列化。</li>
<li>通信过程中的错误处理</li>
<li>过程服务进程(或远程对象)的集中注册与发现（目录服务）</li>
<li>远程对象的生命周期管理</li>
<li>在服务端支持并发访问。（多采用多线程技术）</li>
</ul>
<p>常用的RPC/RMI中间件有很多种，本文章使用的是Java RMI，其他的欢迎尝试和分享。 &gt;常用的RPC/RMI中间件： Java RMI：Java的自娱自乐 Microsoft .NET Remoting：.Net的自娱自乐 CORBA：重量级分布式对象中间件，跨语言 gRPC：Google的RPC中间件，高效，开源，跨语言 Thrift：Facebook、Apache的RPC中间件，高效，开源，跨语言 Hessian：基于HTTP+二进制，跨语言 Dubbo：淘宝开源中间件，Java Motan：新浪开源中间件，Java WebService：基于HTTP + SOAP/XML/JSON Google Protocol Buffers：一种对象序列化标准和开发库</p>
<h1 id="例子">例子</h1>
<p>实现一个书籍信息管理系统，具体要求： 1. 客户端实现用户交互，服务器端实现书籍信息存储和管理。 2. 服务器端至少暴露如下接口： * bool add(Book b) 添加一个书籍对象。 * Book queryByID(int bookID) 查询指定ID号的书籍对象。 * BookList queryByName(String name) 按书名查询符合条件的书籍对象列表，支持模糊查询。 * bool delete((int bookID) 删除指定ID号的书籍对象</p>
<h1 id="rpcrmi实现">RPC/RMI实现</h1>
<p>创建book类，包含图书ID和名称，构建getid()和getname()方法，能够在类外访问。并继承序列化接口Serializable。 <strong>Book.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">	<span class="keyword">private</span> String name=<span class="literal">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(<span class="type">int</span> id,String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.id=id;</span><br><span class="line">		<span class="built_in">this</span>.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getID</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getname</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 新建一个txt文件，使用IO的方式读取书籍信息 <strong>book.txt</strong> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1001 分布式计算</span><br><span class="line">1002 大数据</span><br><span class="line">1003 机器学习</span><br><span class="line">1004 计算机系统</span><br><span class="line">1005 计算机组成</span><br><span class="line">1006 Java</span><br><span class="line">1007 数据结构</span><br><span class="line">1008 计算机网络</span><br><span class="line">1009 虚拟现实</span><br></pre></td></tr></table></figure> 声明接口，继承于 Remote类，声明要实现的方法。 <strong>ComputingService.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ComputingService</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Book b)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">	Book <span class="title function_">queryByID</span><span class="params">(<span class="type">int</span> bookID)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">	ArrayList&lt;Book&gt; <span class="title function_">BookList</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">	<span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> bookID)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">	ArrayList&lt;Book&gt; <span class="title function_">showAll</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 实现接口中实现的方法。其中BookFlies类用于读取和保存文件 <strong>ComputingServiceImpl.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ComputingServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">ComputingService</span> &#123;</span><br><span class="line">	</span><br><span class="line">	BookFlies bookFlies=<span class="keyword">new</span> <span class="title class_">BookFlies</span>();</span><br><span class="line">	ArrayList&lt;Book&gt; booklist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Book&gt;();</span><br><span class="line">	</span><br><span class="line">    ComputingServiceImpl() <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    	<span class="built_in">super</span>();</span><br><span class="line">		bookFlies.load(booklist);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Book b)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    	<span class="keyword">if</span>(queryByID(b.getID())==<span class="literal">null</span>) &#123;</span><br><span class="line">    		booklist.add(b);</span><br><span class="line">    		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">public</span> Book <span class="title function_">queryByID</span><span class="params">(<span class="type">int</span> bookID)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			<span class="keyword">if</span>(b.getID()==bookID) &#123;</span><br><span class="line">				<span class="keyword">return</span> b;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title function_">BookList</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">		ArrayList&lt;Book&gt; books=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Book&gt;();</span><br><span class="line">		<span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(name);</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			<span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(b.getname());</span><br><span class="line">			<span class="keyword">if</span>(matcher.find())&#123;</span><br><span class="line">				books.add(b);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> books;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> bookID)</span>  <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			<span class="keyword">if</span>(b.getID()==bookID) &#123;</span><br><span class="line">				booklist.remove(b);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title function_">showAll</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">		<span class="keyword">return</span> booklist;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">		bookFlies.save(booklist);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookFlies</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(ArrayList&lt;Book&gt; booklist)</span><span class="comment">//读取文件</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;book.txt&quot;</span>;</span><br><span class="line">			<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">			<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file));</span><br><span class="line">			String temp;</span><br><span class="line">			<span class="keyword">while</span>((temp = reader.readLine()) != <span class="literal">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				String[] a=temp.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">				<span class="type">String</span> <span class="variable">idstr</span> <span class="operator">=</span> a[<span class="number">0</span>];</span><br><span class="line">				<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> a[<span class="number">1</span>];</span><br><span class="line">				<span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span>Integer.parseInt(idstr);</span><br><span class="line">				<span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>(id,name);</span><br><span class="line">				booklist.add(book);</span><br><span class="line">			&#125;</span><br><span class="line">			reader.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(ArrayList&lt;Book&gt; booklist)</span><span class="comment">//写入文件</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;book.txt&quot;</span>;</span><br><span class="line">		String allbook=<span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; booklist.size()-<span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> booklist.get(i);</span><br><span class="line">			<span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> book.getID() + <span class="string">&quot; &quot;</span> + book.getname()+<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">			allbook += temp;</span><br><span class="line">		&#125;</span><br><span class="line">		Book book=booklist.get(booklist.size()-<span class="number">1</span>);</span><br><span class="line">		allbook += book.getID()+ <span class="string">&quot; &quot;</span> + book.getname();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(fileName));</span><br><span class="line">			fileWriter.write(allbook);</span><br><span class="line">			fileWriter.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 创建服务端。在端口8196声明了一个注册表，用Naming.bind将地址信息和类ComputingServiceImpl的一个对象computingServan绑定在一起并放入注册表。 <strong>RMIServer.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException, MalformedURLException &#123;</span><br><span class="line">    	LocateRegistry.createRegistry(<span class="number">8196</span>);</span><br><span class="line">        <span class="type">ComputingService</span> <span class="variable">computingServant</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComputingServiceImpl</span>();</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://192.168.43.204:8196/ComputingService&quot;</span>,computingServant);</span><br><span class="line">        System.out.println(<span class="string">&quot;ComputingService is online.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 创建客户端。通过在注册表中查找名字，获得一个远程对象。设置提示信息，根据用户输入，调用所需方法。(有兴趣的话可以加一个UI) <strong>RMIClient.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException, MalformedURLException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ComputingService</span> <span class="variable">c</span> <span class="operator">=</span>(ComputingService)Naming.lookup(<span class="string">&quot;rmi://localhost:8196/ComputingService&quot;</span>);</span><br><span class="line">        <span class="type">int</span> chose;</span><br><span class="line">        <span class="type">int</span> bookID;</span><br><span class="line">        String name;</span><br><span class="line">        Book b=<span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎使用!&quot;</span>);</span><br><span class="line">        printMenu();</span><br><span class="line">        <span class="keyword">while</span>((chose=s.nextInt())!=<span class="number">6</span>) &#123;</span><br><span class="line">        	System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        	<span class="keyword">switch</span> (chose) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入图书ID：&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入图书名称：&quot;</span>);</span><br><span class="line">				name=s.next();</span><br><span class="line">				b=<span class="keyword">new</span> <span class="title class_">Book</span>(bookID, name);</span><br><span class="line">				<span class="keyword">if</span>(c.add(b)) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;增加成功!&quot;</span>);</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   名称&quot;</span>);</span><br><span class="line">					<span class="keyword">for</span>(Book book:c.showAll()) &#123;</span><br><span class="line">						System.out.println(book.getID() + <span class="string">&quot; &quot;</span> + book.getname());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;增加失败,ID重复!&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入图书ID:&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				b=c.queryByID(bookID);</span><br><span class="line">				<span class="keyword">if</span>(b==<span class="literal">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;图书信息不存在&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   名称&quot;</span>);</span><br><span class="line">					System.out.println(b.getID() + <span class="string">&quot; &quot;</span> + b.getname());</span><br><span class="line">					System.out.println(<span class="string">&quot;确认删除?&lt;Y/n&gt;&quot;</span>);</span><br><span class="line">					String order=s.next();</span><br><span class="line">					<span class="keyword">if</span>(order.equalsIgnoreCase(<span class="string">&quot;Y&quot;</span>)) &#123;</span><br><span class="line">						<span class="keyword">if</span>(c.delete(bookID)) &#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;删除成功!&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span>&#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;删除失败!&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入图书ID:&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				b=c.queryByID(bookID);</span><br><span class="line">				<span class="keyword">if</span>(b==<span class="literal">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;查询ID不存在&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   名称&quot;</span>);</span><br><span class="line">					System.out.println(b.getID() + <span class="string">&quot; &quot;</span> + b.getname());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入图书名称：&quot;</span>);</span><br><span class="line">				name=s.next();</span><br><span class="line">				ArrayList&lt;Book&gt; books=c.BookList(name);</span><br><span class="line">				<span class="keyword">if</span>(books.size()==<span class="number">0</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;查询图书不存在&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   名称&quot;</span>);</span><br><span class="line">					<span class="keyword">for</span>(Book book:books) &#123;</span><br><span class="line">						System.out.println(book.getID() + <span class="string">&quot; &quot;</span> + book.getname());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;ID   名称&quot;</span>);</span><br><span class="line">				<span class="keyword">for</span>(Book book:c.showAll()) &#123;</span><br><span class="line">					System.out.println(book.getID() + <span class="string">&quot; &quot;</span> + book.getname());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;输入错误!!!&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">        	System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        	printMenu();</span><br><span class="line">        &#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;感谢使用!&quot;</span>);</span><br><span class="line">        c.end();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMenu</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;增加图书...1&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;删除图书...2&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;书号查询...3&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;书名查询...4&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;查看目录...5&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;退出系统...6&quot;</span>);</span><br><span class="line">		System.out.print(<span class="string">&quot;请输入选项：&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ## 运行结果 由于我的Eclipse出了问题，所以使用的是命令行编译运行的。 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac *.java</span><br><span class="line">rmic ComputingServiceImpl</span><br><span class="line">java RMIServer</span><br><span class="line">java RMIClient</span><br></pre></td></tr></table></figure> <img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/3.png" alt="server"> <img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/4.png" alt="client"></p>
<h1 id="web-service改写">Web Service改写</h1>
<blockquote>
<p>前面几篇博客简单讲了Web Service的使用，不知道各位有没有发现Web的实现过程以及结果都和RPC/RMI的十分相似。那么能不能把我们写的方法发布出去，从而实现远程调用。让我们试一试吧。</p>
</blockquote>
<p>改写主要变动在Book.java,Pulisher.java和Client.java。Book需要调用javax.xml.bind.annotation这个包转化为xml; Pulisher中使用Websevice的方法发布接口；Client中请求并调用方法。</p>
<p>先创建两个个文件夹，分别放服务端和客户端代码 <img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/5.png" alt="文件"> ## 服务端 在wsserver文件夹里 创建book类 <strong>Book.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlAccessType;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlAccessorType;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlElement;</span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlType;</span><br><span class="line"></span><br><span class="line"><span class="meta">@XmlRootElement(name=&quot;book&quot;, namespace=&quot;http://localhost:9999/ws/books&quot;)</span></span><br><span class="line"><span class="meta">@XmlAccessorType(XmlAccessType.FIELD)</span></span><br><span class="line"><span class="meta">@XmlType(name=&quot;book&quot;, namespace=&quot;http://localhost:9999/ws/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">	<span class="meta">@XmlElement(name = &quot;id&quot;, namespace = &quot;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">	<span class="meta">@XmlElement(name = &quot;name&quot;, namespace = &quot;&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> id,String name)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.id=id;</span><br><span class="line">		<span class="built_in">this</span>.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getID</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> String <span class="title function_">getname</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <strong>book.txt</strong> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1001 分布式计算</span><br><span class="line">1002 大数据</span><br><span class="line">1003 机器学习</span><br><span class="line">1004 计算机系统</span><br><span class="line">1005 计算机组成</span><br><span class="line">1006 Java</span><br><span class="line">1007 数据结构</span><br><span class="line">1008 计算机网络</span><br><span class="line">1009 虚拟现实</span><br></pre></td></tr></table></figure> 定义Web服务接口 <strong>Bookstore.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wsserver.Book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> javax.jws.WebService;</span><br><span class="line"><span class="keyword">import</span> javax.jws.soap.SOAPBinding;</span><br><span class="line"><span class="keyword">import</span> javax.jws.soap.SOAPBinding.Style;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebService(targetNamespace=&quot;http://localhost:9999/ws/books&quot;)</span></span><br><span class="line"><span class="meta">@SOAPBinding(style = Style.RPC)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Bookstore</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Book b)</span>;</span><br><span class="line">	<span class="keyword">public</span> Book <span class="title function_">queryByID</span><span class="params">(<span class="type">int</span> bookID)</span>;</span><br><span class="line">	<span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title function_">BookList</span><span class="params">(String name)</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> bookID)</span>;</span><br><span class="line">	<span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title function_">showAll</span><span class="params">()</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 定义实现接口的Web服务实现类 <strong>BookstoreImpl.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jws.WebService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebService</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookstoreImpl</span> <span class="keyword">implements</span> <span class="title class_">Bookstore</span>&#123;</span><br><span class="line">	BookFlies bookFlies=<span class="keyword">new</span> <span class="title class_">BookFlies</span>();</span><br><span class="line">	ArrayList&lt;Book&gt; booklist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Book&gt;();</span><br><span class="line">	</span><br><span class="line">	BookstoreImpl()&#123;</span><br><span class="line">		bookFlies.load(booklist);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Book b)</span>&#123;</span><br><span class="line">    	<span class="keyword">if</span>(queryByID(b.getID())==<span class="literal">null</span>) &#123;</span><br><span class="line">    		booklist.add(b);</span><br><span class="line">    		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Book <span class="title function_">queryByID</span><span class="params">(<span class="type">int</span> bookID)</span> &#123;</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			<span class="keyword">if</span>(b.getID()==bookID) &#123;</span><br><span class="line">				<span class="keyword">return</span> b;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title function_">BookList</span><span class="params">(String name)</span>&#123;</span><br><span class="line">		ArrayList&lt;Book&gt; books=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Book&gt;();</span><br><span class="line">		<span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(name);</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			<span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(b.getname());</span><br><span class="line">			<span class="keyword">if</span>(matcher.find())&#123;</span><br><span class="line">				books.add(b);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> books;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> bookID)</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(Book b:booklist) &#123;</span><br><span class="line">			<span class="keyword">if</span>(b.getID()==bookID) &#123;</span><br><span class="line">				booklist.remove(b);</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> ArrayList&lt;Book&gt; <span class="title function_">showAll</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> booklist;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span>&#123;</span><br><span class="line">		bookFlies.save(booklist);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookFlies</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(ArrayList&lt;Book&gt; booklist)</span><span class="comment">//读取文件</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;wsserver\\book.txt&quot;</span>;</span><br><span class="line">			<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">			<span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(file));</span><br><span class="line">			String temp;</span><br><span class="line">			<span class="keyword">while</span>((temp = reader.readLine()) != <span class="literal">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				String[] a=temp.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">				<span class="type">String</span> <span class="variable">idstr</span> <span class="operator">=</span> a[<span class="number">0</span>];</span><br><span class="line">				<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> a[<span class="number">1</span>];</span><br><span class="line">				<span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span>Integer.parseInt(idstr);</span><br><span class="line">				<span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">				book.set(id,name);</span><br><span class="line">				booklist.add(book);</span><br><span class="line">			&#125;</span><br><span class="line">			reader.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(ArrayList&lt;Book&gt; booklist)</span><span class="comment">//写入文件</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;wsserver\\book.txt&quot;</span>;</span><br><span class="line">		String allbook=<span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; booklist.size()-<span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> booklist.get(i);</span><br><span class="line">			<span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> book.getID() + <span class="string">&quot; &quot;</span> + book.getname()+<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">			allbook += temp;</span><br><span class="line">		&#125;</span><br><span class="line">		Book book=booklist.get(booklist.size()-<span class="number">1</span>);</span><br><span class="line">		allbook += book.getID()+ <span class="string">&quot; &quot;</span> + book.getname();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="keyword">new</span> <span class="title class_">File</span>(fileName));</span><br><span class="line">			fileWriter.write(allbook);</span><br><span class="line">			fileWriter.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 将Web服务实现类绑定到Web服务器 <strong>Publisher.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsserver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.ws.Endpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Publisher</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	   <span class="type">BookstoreImpl</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookstoreImpl</span>();</span><br><span class="line">	   Endpoint.publish(<span class="string">&quot;http://localhost:9999/ws/books&quot;</span>, b);</span><br><span class="line">	   System.out.println(<span class="string">&quot;Web service is online.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ## 客户端 在wsclient文件夹里 根据WSDL生成Web服务代理类，利用Web服务代理类调用Web服务接口中定义的具体方法。 <strong>Client.java</strong> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wsclient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wsproxy.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">BookstoreImplService</span> <span class="variable">service</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookstoreImplService</span>();</span><br><span class="line">		<span class="type">BookstoreImpl</span> <span class="variable">pService</span> <span class="operator">=</span> service.getBookstoreImplPort();</span><br><span class="line">        <span class="type">int</span> chose;</span><br><span class="line">        <span class="type">int</span> bookID;</span><br><span class="line">        String name;</span><br><span class="line">        Book b=<span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Welcome!!!&quot;</span>);</span><br><span class="line">        printMenu();</span><br><span class="line">        <span class="keyword">while</span>((chose=s.nextInt())!=<span class="number">6</span>) &#123;</span><br><span class="line">        	System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        	<span class="keyword">switch</span> (chose) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;Input book ID:&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				System.out.println(<span class="string">&quot;Input book Name:&quot;</span>);</span><br><span class="line">				name=s.next();</span><br><span class="line">				b.setId(bookID);b.setName(name);</span><br><span class="line">				<span class="keyword">if</span>(pService.add(b)) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;Added successfully!&quot;</span>);</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   Name&quot;</span>);</span><br><span class="line">					<span class="keyword">for</span>(Book book:pService.showAll()) &#123;</span><br><span class="line">						System.out.println(book.getId() + <span class="string">&quot; &quot;</span> + book.getName());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;Failure, ID duplication&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;Input book ID:&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				b=pService.queryByID(bookID);</span><br><span class="line">				<span class="keyword">if</span>(b==<span class="literal">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;Not exist&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   Name&quot;</span>);</span><br><span class="line">					System.out.println(b.getId() + <span class="string">&quot; &quot;</span> + b.getName());</span><br><span class="line">					System.out.println(<span class="string">&quot;Confirm?&lt;Y/n&gt;&quot;</span>);</span><br><span class="line">					String order=s.next();</span><br><span class="line">					<span class="keyword">if</span>(order.equalsIgnoreCase(<span class="string">&quot;Y&quot;</span>)) &#123;</span><br><span class="line">						<span class="keyword">if</span>(pService.delete(bookID)) &#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;Successfully deleted!&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">						<span class="keyword">else</span>&#123;</span><br><span class="line">							System.out.println(<span class="string">&quot;Failed to delete!&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;Input book ID:&quot;</span>);</span><br><span class="line">				bookID=s.nextInt();</span><br><span class="line">				b=pService.queryByID(bookID);</span><br><span class="line">				<span class="keyword">if</span>(b==<span class="literal">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;Not exist&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   Name&quot;</span>);</span><br><span class="line">					System.out.println(b.getId() + <span class="string">&quot; &quot;</span> + b.getName());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;Input book Name:&quot;</span>);</span><br><span class="line">				name=s.next();</span><br><span class="line">				ArrayList&lt;Book&gt; books=(ArrayList&lt;Book&gt;) pService.bookList(name);</span><br><span class="line">				<span class="keyword">if</span>(books.size()==<span class="number">0</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;Not exist&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;ID   Name&quot;</span>);</span><br><span class="line">					<span class="keyword">for</span>(Book book:books) &#123;</span><br><span class="line">						System.out.println(book.getId() + <span class="string">&quot; &quot;</span> + book.getName());</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;ID   Name&quot;</span>);</span><br><span class="line">				<span class="keyword">for</span>(Book book:pService.showAll()) &#123;</span><br><span class="line">					System.out.println(book.getId() + <span class="string">&quot; &quot;</span> + book.getName());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				System.out.println(<span class="string">&quot;Error!!!&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">        	System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        	printMenu();</span><br><span class="line">        &#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;Thanks for using!&quot;</span>);</span><br><span class="line">		pService.end();</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMenu</span><span class="params">()</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Add books ......1&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Delete books ...2&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Query By ID ....3&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Query By Name ..4&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Show All .......5&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;Exit ...........6&quot;</span>);</span><br><span class="line">		System.out.print(<span class="string">&quot;Please enter the option:&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ## 运行结果 编译并启动服务商 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac .\wsserver\*.java</span><br><span class="line">java wsserver.Publisher</span><br></pre></td></tr></table></figure> <img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/6.png" alt="ser"></p>
<p>浏览器打开<a href="http://localhost:9999/ws/books?wsdl" class="uri">http://localhost:9999/ws/books?wsdl</a>看到如下界面，即wsdl文件 <img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/7.png" alt="wsdl"></p>
<p>使用wsimport命令，将wsdl文件生成本地代理 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsimport -keep -p wsproxy http://localhost:9999/ws/books?wsdl</span><br></pre></td></tr></table></figure> <img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/8.png" alt="ws"></p>
<p>编译并启动客户端 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac .\wsclient\*.java</span><br><span class="line">java wsclient.Client</span><br></pre></td></tr></table></figure> <img src="/2019/06/10/%E8%BF%9C%E7%A8%8B%E7%B1%BB%E8%B0%83%E7%94%A8/9.png" alt="cl"></p>
<hr>
<p>最后，总算圆满完成。虽然看起来并不困难，刚开始我就是这么想的，但是从头开始写真的会遇到很多想不到的问题，比如不知道Book类需要转化为xml，就查了好几天的资料。总之，学知识还需要多动手啊。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>分布式</tag>
        <tag>Web</tag>
        <tag>RMI</tag>
      </tags>
  </entry>
</search>
